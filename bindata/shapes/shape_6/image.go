// Code generated for package shape_6 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/shapes/shape-6/shape.png
package shape_6

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataShapesShape6ShapePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xed\x0d\x12\xf2\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x74\x00\x00\x00\x74\x08\x06\x00\x00\x00\x54\x9a\x16\x27\x00\x00\x0d\xb4\x49\x44\x41\x54\x78\x9c\xed\x9d\x7b\xb0\x55\x55\x19\xc0\x7f\x5c\xf0\x09\x18\x09\x2d\x4d\xf0\x85\x8f\xcc\x3e\x07\xc2\xcc\xf2\x99\x86\xa8\xe0\x63\xa6\x49\x45\x4d\x42\x23\x34\xdf\x45\x69\xbe\x35\xc1\x47\x88\x06\xa6\x63\x0d\xf9\xc0\x7c\x4e\xd3\x68\x2a\x09\x82\x93\xa9\x19\x29\x8a\xe3\xa7\xa2\x12\x28\x5e\x30\xb6\x60\x28\xc8\x43\xbc\xd0\x1f\x6b\x5d\xba\xc0\x39\xe7\xee\xbd\xd6\xda\xfb\xdc\x7d\xe1\x37\xc3\x1f\xcc\x39\xeb\xfb\xd6\xdd\xdf\xd9\x6b\xaf\xbd\xbe\x57\x07\xda\x19\x22\xb2\x05\x30\x10\x38\x12\xd8\x1f\xe8\x0d\x6c\xe3\x3e\xfe\x04\x98\x0d\x4c\x03\x26\x01\x13\x55\x75\x65\x3d\xe6\x99\x17\x1d\xea\x3d\x81\x58\x88\x48\x57\x60\x04\x70\x0e\xd0\x23\xe5\xb0\x85\xc0\x6d\xc0\x18\x55\x5d\x92\xd7\xdc\x8a\xa4\x5d\x18\x54\x44\x8e\x06\xc6\x03\x3b\x78\x8a\x98\x0f\x0c\x53\xd5\xbf\xc6\x9b\x55\x7d\xe8\x58\xef\x09\x84\x22\x22\x57\x62\x8d\xd9\x35\x40\x4c\x57\xe0\x54\x63\xcc\x9a\x24\x49\x9e\x89\x33\xb3\xfa\x50\x6a\x83\x8a\xc8\x68\xe0\xb2\x88\x22\x0f\x33\xc6\x74\x49\x92\xe4\xa9\x88\x32\x0b\xa5\xb4\x06\x15\x91\xe1\xc0\xf5\x39\x88\x3e\xc0\x18\xf3\x41\x92\x24\xd3\x73\x90\x9d\x3b\xa5\x7c\x86\x8a\xc8\xde\xc0\xcb\xc0\x16\x39\xa9\x58\x09\xf4\x53\xd5\x37\x72\x92\x9f\x1b\x0d\xf5\x9e\x80\x27\xe3\xc8\xcf\x98\x38\xd9\xe3\x72\x94\x9f\x1b\xa5\xbb\x43\x45\xe4\x20\xe0\xd9\x82\xd4\x1d\xa2\xaa\x45\xe9\x8a\x42\x19\xef\xd0\xb3\xda\xa9\xae\x28\x94\xea\x0e\x15\x91\x4e\xc0\x7f\x81\x2e\x05\xa9\x5c\x0a\x7c\x51\x55\x3f\x2f\x48\x5f\x30\x65\xbb\x43\xf7\xa5\x38\x63\xe2\x74\xed\x57\xa0\xbe\x60\x3a\xe5\xad\x40\x44\x3a\x03\xbb\x03\xdd\x81\x2d\xb1\xe7\xa9\xef\x01\x8d\xaa\xba\x26\xa3\xb8\xbd\x23\x4f\x2f\xad\xce\x17\xb2\x0e\x12\x91\x1d\x80\x5d\x81\xad\x81\x55\xc0\x22\x60\x96\xaa\x2e\x8f\x3b\xbd\x75\xc9\xc5\xa0\x22\xd2\x1b\x38\x0d\x38\x0e\xe8\x4b\xe5\x95\x60\xa1\x88\x4c\x01\x1e\x02\x1e\x4f\xb9\xac\xf5\x8c\x37\xcb\xd4\xf4\x4a\xf3\x25\x11\x69\xc0\x3a\x05\x4e\x06\xbe\x0b\x6c\x57\xe1\x6b\x4d\x22\x32\x03\x78\x14\x98\xa0\xaa\xef\x45\x9b\xa5\x23\xaa\x41\x45\xa4\x17\x70\x03\x30\x98\xd6\x0f\x2d\x7a\xb8\xef\x0d\x06\xe6\x88\xc8\xe5\xc0\x03\xad\xdc\xb5\x45\x2e\xb7\xcd\x7c\xa1\xb5\x2f\x88\xc8\x89\xc0\x28\xec\x4a\x54\x8b\x8e\xd8\xc7\xc6\xbe\xc0\x55\x22\x72\x3f\x70\x89\xaa\xce\x0b\x9e\xa5\x23\xda\xa6\x48\x44\x86\x00\xb7\x03\x9d\x03\xc4\x4c\x02\x86\xa8\x6a\xd2\x42\x6e\x07\xe0\x60\xe0\x74\xac\xf1\xb7\x0c\x99\xa7\x07\xcb\x81\x07\x81\x3b\x81\xe7\x5b\xfe\xe0\x44\xa4\x07\x70\x37\x30\x28\x40\xfe\x52\xe0\x6c\x55\xbd\x37\x64\x92\xcd\x04\x1b\xd4\x5d\xf0\x1b\x81\x5f\x84\x4f\x07\xb0\xcf\xd7\x23\x81\xb9\xd8\x65\xfb\x67\xc0\x57\x22\xc9\x0e\x65\x26\x70\x33\x70\x2f\x76\x29\x9e\x84\xf5\xb7\xc6\x60\x34\x70\xb1\xc7\xbe\x62\x1d\x62\x18\xf4\xd7\xc4\x33\x66\x33\x8b\x81\x26\xec\x46\xaa\x2d\xf2\x21\x76\xf9\xdc\x36\xb2\xdc\xd1\xaa\x7a\x51\x88\x80\x20\x83\x8a\xc8\x69\xc0\x84\x10\x19\x9b\xd8\x80\x1f\xaa\xaa\xf7\x35\xf5\x36\xa8\x88\xf4\xc4\x2e\x41\xf5\xd8\xa8\xb4\x67\x3e\x05\xf6\x52\xd5\x46\x9f\xc1\x21\x07\x0b\x37\xb0\xc9\x98\x79\xd0\x19\x7b\x6d\xbd\xf0\xba\x43\x45\x64\x67\xe0\xdf\x94\xd8\x9f\xda\xc6\x69\x02\xf6\x50\xd5\x39\x59\x07\xfa\xde\xa1\x43\xa8\x8f\x31\x67\x02\x3f\x07\xfa\x03\xcb\x72\xd4\xb3\x02\xbb\xd3\xbe\x08\x78\x3b\x47\x3d\xd5\xe8\x88\xbd\xc6\x99\xf1\x35\xe8\xf1\x9e\xe3\x7c\x79\x15\x18\x00\xec\xad\xaa\x63\x54\x75\x2a\x70\x7e\x8e\xfa\x2e\x50\xd5\xc9\xaa\x3a\x1a\xd8\x0b\x38\xca\xcd\xa1\x48\x8e\xf5\x19\x94\x79\xc9\x15\x91\xad\xb0\x2f\xc3\x45\x1e\xec\x5f\xa3\xaa\x57\x57\x98\xcb\x48\xe2\xc6\x14\x01\xdc\xa0\xaa\x97\x54\xd0\x75\x25\x70\x4d\x64\x5d\xb5\x58\x0d\x6c\xa3\xaa\x9f\x66\x19\xe4\x63\x94\xdd\x3d\xc7\x85\x50\xf1\x60\x41\x55\x2f\x27\xae\x41\xaf\xac\x64\x4c\xc7\x9e\x11\xf5\xa4\xa1\x81\xd6\x8f\x12\x2b\x0e\xca\x4a\x3d\x5e\xf6\xbf\x5c\xed\x03\x55\xbd\x0e\x7b\x28\xfe\x7e\x80\xfc\x46\x60\x90\xaa\x5e\x5b\xe3\x3b\x69\x83\xb7\x63\x92\xf9\x5a\xfb\x18\x74\x33\x8f\x31\xb9\xe2\x02\xa4\x05\xb8\x1c\xeb\xa6\x4a\xcb\x22\xe0\x0a\xe0\x6b\xaa\x3a\xb1\x95\xef\x16\x7d\x86\xec\xa5\xd3\xc7\xdb\x92\xe7\xee\xb2\x1a\xad\xa6\x29\xa8\xea\x27\xc0\x28\x11\xb9\x09\xbb\x81\x3a\x06\xe8\x87\x5d\xb6\xba\xb9\xaf\x2d\x06\x66\x61\x23\x06\x1f\x07\x26\x67\xc8\x6d\xc9\xf2\x43\x89\xc5\x27\x59\x07\xf8\x18\x34\xf3\xbb\x51\x04\x52\x2f\xa7\xce\x40\x8f\xb9\x7f\xc0\x5a\x07\x02\x81\x07\xdf\xf3\x03\xc6\xfa\x92\xd9\x5f\x9a\x79\xc9\x55\xd5\xf9\xc0\x82\xac\xe3\x02\x79\x39\x64\xb0\xaa\xae\x09\xf5\x62\x00\x2f\x06\x8e\xcf\xca\x42\xec\xb3\x3d\x13\xbe\xbb\xd5\xa9\x9e\xe3\x7c\x79\xba\x60\x7d\x95\xf8\x5b\xc1\xfa\xa6\xf8\xfc\x08\x7d\x0d\xfa\x80\xe7\x38\x1f\xa6\xa9\xea\xec\x02\xf5\x55\x44\x55\xe7\x02\xcf\x15\xa8\xf2\x21\x9f\x41\xbe\x06\x9d\x08\xbc\xe3\x39\x36\x2b\xbf\x29\x48\x4f\x1a\x6e\x2d\x48\xcf\x1c\xec\xa6\x2d\x33\x5e\x06\x55\xd5\xd5\xd8\x57\x84\xbc\x79\x0d\x78\xb8\x00\x3d\x69\xf9\x13\x30\xa3\x00\x3d\x57\xf8\xc6\x02\x7b\x9f\xf8\xa8\xea\xc3\xc0\x13\xbe\xe3\x53\xd0\x04\x9c\xe1\x7e\x3c\x6d\x02\x37\x97\xd3\x81\x3c\x03\xaf\x27\x01\xf7\xfb\x0e\x0e\x3d\xc2\x1b\x8a\xad\x59\x90\x07\x17\xaa\xea\x4b\x39\xc9\xf6\x46\x55\x67\x00\x17\xe4\x24\x7e\x2e\x36\x48\xce\x7b\x47\x1e\xe4\x02\x4b\x92\x64\x99\x31\x66\x22\xf0\x03\x60\xab\x10\x59\xeb\x71\x9d\xaa\x7a\x3b\x79\xf3\x26\x49\x92\x17\x8d\x31\x9b\x01\x87\x44\x14\xbb\x18\x38\xd4\x6d\xbe\xbc\x89\x71\xc8\xde\x88\x5d\x1e\x63\xf0\x39\xd6\x75\x15\xdb\x83\x12\x1d\xe7\x18\xb8\x80\x78\xcb\x6f\x13\xf6\x0e\x0d\x22\x86\x41\x4f\x03\xbe\x14\x41\xce\x0c\xe0\x40\x55\x2d\x4d\x5e\xa6\x9b\xeb\x81\xc4\xf1\x95\x76\xc7\x5e\xcb\x20\x42\xa3\xfe\x3a\x00\x6f\x60\x9d\xc0\xbe\xbc\x80\x7d\x1d\x78\x58\x55\x63\xdd\xe9\x85\x22\x22\x1d\x81\x93\xb0\x77\xec\x37\x03\x44\xbd\x05\x7c\x35\xe4\x19\x1a\x6a\xd0\xd6\x92\x6f\x5f\x05\xfe\x8c\x35\x78\x0f\x60\x73\xec\x41\xfb\xbb\xee\xb3\xa9\x3e\x71\x33\x6d\x19\x97\xd7\x73\x38\xf0\x75\x6c\x10\xf6\x56\x58\x67\x75\x82\x35\xd8\xf1\x40\x9f\x1a\x22\x0e\x55\xd5\xbf\xfb\xea\x0f\xcd\x6d\x39\xa3\x95\xcf\x2f\x56\xd5\x49\x81\x3a\x4a\x85\x3b\xd5\xaa\xba\xf3\x17\x91\xe7\x80\xc9\x35\x44\x9c\x0e\xe4\x6f\x50\x97\x6c\xbb\x1f\x36\xbd\xae\x17\x36\x89\x67\x70\x8d\x21\x6f\x53\x7b\xe2\x1b\x2b\x53\xb0\xc1\x6e\xd5\x1e\x53\x83\x45\xe4\x3f\xd8\xf8\xdc\x79\xd8\x47\xda\xf4\xb4\x07\x0d\xad\x2e\xb9\x22\x72\x30\x36\x35\xfd\x38\xb2\xc5\xe1\x5e\xe4\x82\xac\x36\xb1\x1e\x22\x32\x02\xb8\x29\xc3\x90\xa5\xd8\x14\xc4\x3b\x54\xb5\xe6\x79\x72\xd5\x3b\xd4\x95\x8e\x19\x87\xcd\x75\xf4\xa1\xe8\x28\xb9\x32\x91\xf5\xf8\xb0\x0b\x70\x2a\x70\xaa\x88\x4c\x05\xce\xaf\x56\x72\xa7\xe2\xc1\x82\x2b\xea\xf4\x08\xb0\x47\x46\xc5\x2d\x39\xc1\x18\xf3\x61\x59\x0b\x38\xe5\x85\x88\xfc\x08\x9b\x0f\xe4\x1b\xca\xd3\x1b\x18\x66\x8c\x49\x2a\x5d\xdb\x0d\x0c\xea\xca\xad\x5d\x4f\xf8\x86\xa9\x13\x70\xac\x31\x66\xcb\x24\x49\x8a\xf6\x9f\xb6\x49\x5c\xd8\xe9\x4d\x84\xc7\x65\x35\x5f\xdb\x0d\xca\xd8\xad\x63\x50\x17\x7b\x1a\xfb\x94\xe6\x20\x63\xcc\xea\x24\x49\xbc\x77\x6e\xed\x01\x11\xb9\x14\xb8\x3a\xb2\xd8\x03\xd6\x2f\x38\xb9\x76\x53\xe4\x4a\x94\xb6\x16\xf9\x16\xc2\xa0\x14\x91\x75\xed\x92\x02\xae\xed\xc0\xe6\xd2\xb0\x1d\x9c\xc2\xae\xd8\xad\xb4\x6f\xbd\xd9\x34\x34\x62\xc3\x25\x33\x47\xb2\x95\x19\x11\xd9\x06\x50\x60\xc7\x1c\xd5\xcc\xc7\xa6\x20\x2e\x69\x3e\xcb\x1d\x41\xbe\xc6\x04\xfb\xee\x9a\x67\x3e\x4a\x5b\xe5\x3c\xf2\x35\x26\x58\xdb\x8d\x00\xe8\xe0\x6a\xb4\x37\x52\x4c\x64\xf8\x22\xa0\x67\x7b\xab\xf3\x5e\x0d\x77\x6d\xe7\x51\x4c\xb6\xc1\x42\xa0\x57\x73\x6d\x9d\xa2\xc2\xfc\xbb\x63\x83\xa0\x37\x16\x06\x50\x5c\xea\x48\x0f\x60\x60\x03\x36\x0f\xb2\x48\x8e\x29\x58\x5f\x3d\x29\xfa\x6f\x3d\xb2\x01\xdb\x0a\xa3\x48\xfa\x15\xac\xaf\x9e\x14\xfd\xb7\xee\xdf\x40\xbc\x3a\x3b\x69\xc9\x9c\x22\x57\x62\x8a\xfe\x5b\x7b\x37\xf0\xff\x26\x35\x45\xd1\xad\x39\xd7\x64\x23\xa0\x5b\xeb\x5f\x89\xca\x36\x65\x2b\xaf\x5a\x1a\xea\xf5\xa3\x6d\xc0\x23\x65\x2d\x90\xc5\x11\x12\x87\xda\x3c\xee\x6f\x5c\x5c\xb0\xda\x4f\x1a\xc8\x2f\xae\xb6\x1a\xb3\x0a\xd6\x57\x4f\x8a\xfe\x5b\x67\x37\x60\x1b\xbb\x15\xc9\xc6\xe4\x4e\x0b\x4a\x83\xf4\x60\x5a\x03\x36\xf4\xbe\x48\xf2\x4c\x9f\x68\x6b\x78\x25\x1c\x05\x30\xa9\x01\xeb\x05\x58\x58\x90\xc2\x45\x6c\x5c\x71\x46\x93\x29\x2e\x95\x7f\x21\x30\xb1\xc1\x9d\xab\xde\x56\x90\xd2\x5b\x36\x96\x73\x5c\x58\x5b\x1e\xe0\x96\x82\xd4\xdd\xa6\xaa\x2b\x9b\x5f\x5b\xc6\x90\x7f\x0d\x81\xf7\x29\x2e\xbf\xb2\x2d\x71\x2b\x61\x25\x77\xd2\x30\x1f\x6b\x43\x9b\x0a\xe1\x9a\xa1\x0e\xcb\x59\xe9\xf0\x8d\xcd\x17\x0a\x6b\xab\xb3\x9c\x99\xb3\x9a\x61\xcd\x0d\x6d\xd7\x86\xa0\x24\x49\x32\xcb\x18\xb3\x06\x38\x2c\x07\x85\x97\xaa\xea\xdd\x39\xc8\x2d\x05\xee\xda\xae\xc2\x3f\x82\xb2\x16\x57\xa9\xea\x1f\x9a\xff\xb3\x4e\x4c\x51\x92\x24\xcf\x18\x63\xba\x00\x07\x44\x54\x38\x52\x55\x7f\x15\x51\x5e\x29\x49\x92\xe4\x59\x63\xcc\x16\xd8\x86\x08\xb1\xb8\xc9\x65\xc1\xad\x65\x83\xa8\xbf\x24\x49\x9e\x32\xc6\x7c\x80\xf5\xe5\x85\x44\xfe\x2d\x03\x7e\xa2\xaa\x63\x02\x64\xb4\x2b\x92\x24\x99\x6a\x8c\x99\x0f\x1c\x41\xd8\xb5\x5d\x09\x9c\x53\x29\x87\xb6\xea\x79\x63\x84\x40\xeb\xfe\xae\x0c\xea\x26\xd6\x43\x44\x06\xe0\xff\xfe\x5f\x33\xd0\xba\xea\xe1\xbc\xaa\xbe\xa1\xaa\xfd\xb1\x4b\xc4\x7d\xd8\x70\xfc\x2c\xf4\xcd\xf8\xfd\x8d\x89\x5a\xd9\x67\x95\x58\x8a\xb5\xc1\xc1\xaa\xda\xbf\x56\xa3\xda\xd4\x1e\x01\x97\xac\xb4\x2f\x36\x59\xa9\x27\x36\x59\xe9\x5c\xaa\x17\x18\x9c\x89\x2d\x58\xdc\xee\x0f\xe2\xb3\xe0\xbc\x30\x33\xa9\x5e\xae\x75\x05\xf0\x5b\xe0\x63\x3c\x92\x95\x52\xaf\xe3\x4e\xe0\x34\x5a\x9c\xfd\xba\xce\x42\x43\xab\x0c\xd9\x0b\x5b\x4a\xbc\xb4\x0d\xca\x73\x62\x00\xb5\x6b\xef\x3e\xa8\xaa\xde\x7d\x70\x42\xd3\x1d\xee\xa2\xba\x41\x01\x46\x8b\xc8\xa3\xd8\x02\xc6\x06\xbb\xc4\x2f\xc7\x7a\x78\x5e\x01\x9e\x6e\x0b\x55\xc2\x62\x22\x22\xbb\x62\xf7\x1d\x7d\x80\x5d\x80\xae\xc0\x67\xd8\xa3\xb9\x99\xc0\xf7\x5a\x11\x71\x67\x88\xfe\x18\x29\xf9\x6f\x12\xd6\xca\xea\x5f\xc0\x58\xe0\xa1\x92\xa7\xe4\x9f\x88\x8d\xc1\xfd\x76\x80\xa8\xe0\xc7\x54\x50\xc4\x82\x53\x7c\x73\x88\x0c\x6c\x4d\x82\xfb\x80\xe9\x22\x12\x52\x9f\xa0\x2e\xb8\x39\xbf\x84\x2d\x16\x15\x62\x4c\x80\x31\xa1\x7b\x8e\x18\x21\x28\xf7\x12\xc7\xa3\xd0\x07\x78\x5e\x44\x4a\x13\x5d\xef\xe6\xfa\x3c\x71\x76\xf4\x0b\x88\xd0\x76\x2c\x86\x41\x77\x22\x5e\x0f\x97\x4e\xc0\x58\x97\x76\xd7\xa6\x71\x73\x1c\x4b\xbc\x1e\xac\x1d\xb1\xd7\x32\x88\xd0\x67\xa8\xc1\x16\x06\x0e\x9e\x48\x05\xce\x51\xd5\xdb\x73\x90\x1b\x8c\x88\x9c\x4b\x3e\x9e\xa3\xd9\xc0\xfe\xaa\xea\xed\x9f\xf6\xbe\x43\xdd\x86\x68\x02\xf9\x18\x13\xec\x9d\xda\xe6\x0e\x27\x44\xa4\x1f\xf9\xf9\x38\x7b\x13\xb8\xcb\x0d\x59\x72\x4f\x21\xdf\x34\x8a\x4e\xc0\x5d\xae\xb7\x75\x9b\xc0\xcd\xe5\x6e\xf2\x6d\x46\x7f\xac\x88\x9c\xe0\x3b\xd8\xeb\x62\xb9\x53\xa3\x5a\x3d\x4e\x62\xd1\x17\xf8\x7e\x01\x7a\xd2\x72\x22\xb0\x4f\x01\x7a\x46\xfa\xfe\x90\x7d\x7f\xfd\xc7\x00\xbb\x7a\x8e\xcd\xca\x79\x05\xe9\x49\xc3\x85\x05\xe9\xd9\x13\x38\xda\x67\xa0\xaf\x41\x4f\xf2\x1c\xe7\xc3\x41\x22\x92\xd7\x73\x3a\x35\xae\xe4\x5b\x91\x89\x5d\x5e\xd7\x38\xb3\x41\xdd\x66\xa8\xbf\x8f\xb2\x00\xbe\x53\xb0\xbe\x4a\x1c\x5e\xb0\xbe\x23\x7c\x06\xf9\xdc\xa1\xbd\x28\xbe\x0f\xd8\x7e\x05\xeb\xab\x44\xd1\xa9\x81\xdb\xbb\xd7\xc2\x4c\xf8\xec\xd6\x76\xf6\x18\x13\x4a\xea\xfa\x0f\x2e\x0d\x3e\x8f\x56\x59\x79\xd7\x49\xa8\x44\x6f\x6c\x15\xcf\xd4\xf8\x18\xb4\xe8\xf4\x43\x48\x91\xd6\xee\xaa\x8d\x9c\x8f\xdd\xb8\x54\xfb\x7e\x37\xe0\x1b\xee\xdf\x70\x60\x91\x88\xdc\x02\xdc\x9a\x22\x22\xb1\x6b\xfa\xe9\x46\x23\x73\x33\x3b\x9f\x25\x77\x85\xc7\x98\x50\x6a\xea\x14\x91\x81\xc0\xeb\xd8\x57\xa9\x2c\x35\x0d\xba\x03\x23\x01\x75\xb5\x84\x4a\x8f\x8f\x41\xeb\xd1\xa5\xaf\xea\x51\x98\x88\x5c\x81\xcd\x97\xe9\x15\x20\x7f\x47\x60\xa2\xab\xf6\x55\x8d\x0f\x02\xe4\xfb\x92\xb9\xc7\x9c\x8f\x41\x67\x61\x2b\x34\x17\x49\xc5\xc6\xe6\x22\x72\x3d\x10\x33\x44\x74\x54\x0d\xc7\xc0\x5b\x11\xf5\xa4\xa1\x09\x8f\x54\xcf\xcc\x5e\x92\x24\x49\x56\x19\x63\x8e\x23\xff\x42\x55\x2d\xd9\xd6\x18\x33\xc7\x18\x33\x3b\x49\xec\x1e\xc1\x55\x0c\xbd\x31\x07\x5d\x87\x18\x63\x1a\x93\x24\x79\xc5\xe9\xe9\x60\x8c\x39\x02\xfb\x7c\xde\x3e\x07\x7d\xd5\x78\x51\x55\x7f\x97\x75\x90\xef\x99\xe4\x63\xd8\x80\xb1\xa2\xe8\x03\x3c\x09\xbc\x2d\x22\xe3\xb1\xb5\x78\xc7\xe6\xa8\x6f\x9c\x88\xbc\x8b\x3d\x7a\x1c\x46\x58\x93\x04\x5f\x1e\xf5\x19\xe4\xe5\x3e\x73\x71\x33\xef\x10\xcf\x0f\xba\x89\x75\x59\x05\xec\xa6\xaa\x99\x93\x9c\x7c\x9b\xd9\xcd\x01\x1e\xf4\x19\xbb\x89\x54\xfc\xd1\xc7\x98\x10\xe6\x3e\xfb\x25\xb6\xd0\xfd\x26\xe2\xb2\x84\x80\x9a\xc5\x21\xdd\x09\x1b\x81\xb3\x7d\xc7\x6f\xa2\x2a\xc3\x55\xd5\xfb\x15\x29\xb4\x99\xdd\xab\xc6\x98\xce\xd8\x76\x51\x31\xf9\x08\x1b\xfe\xdf\x39\xb2\xdc\x58\x2c\xc0\xf6\x3c\xcb\x7c\x92\xd3\x0a\xd7\xaa\x6a\x50\x68\x4b\x8c\x68\x80\x8b\x81\x98\xed\x3c\x66\x63\xdd\x54\x3b\x61\x8f\xe7\x66\x46\x94\x1d\xca\xeb\xd8\x5d\xef\xce\xc0\xb7\xf0\xe8\x62\x5f\x83\x91\xc0\x55\xa1\x42\xa2\x55\xbb\x12\x91\xd3\x80\xdb\xc9\xd6\xdb\x65\x7d\x9e\x00\x86\xb6\x0c\x92\x72\xee\xba\x03\xb1\x5d\x9c\x06\x13\xb7\xad\x65\x1a\x96\x61\x7b\x8e\xdf\xa9\xaa\xff\x68\xf9\x81\xf3\x86\xdc\x03\x1c\x15\x20\x7f\x09\x70\xa6\xaa\x46\xe9\x6b\x1e\xb5\x7c\x99\x88\xf4\xc4\x76\x94\x38\x85\x6c\xcb\xf9\x2c\xe0\x32\xd7\x35\xb8\x96\xfc\x9b\x81\x9f\xfa\xcf\xd0\x8b\xeb\x6a\xb5\xbf\x74\x3f\xb8\xc1\xd8\x73\xe4\xdd\x32\xc8\x6d\xc2\xc6\x34\x5f\x1a\xf2\xcc\x5c\x9f\xa8\xc1\x4e\xaa\x3a\x0f\x18\xe2\xce\x57\x87\x60\x1b\xb7\xf5\xa5\xb2\x71\x17\x60\x73\x1d\x1f\x00\x26\xa6\x6c\xcd\x5c\x8f\x1a\x0d\x35\xd3\x28\x5d\xa4\xfb\x03\x22\xf2\x30\x30\x08\x38\x19\x5b\xd6\x60\xbb\x0a\x5f\x6f\xc2\x16\xde\xfa\x0b\x30\xc1\xf7\xd5\xa4\x16\xb9\x17\x18\x14\x91\xad\xb0\x3e\xc9\xee\xd8\x7e\x25\xcb\x80\x39\xaa\x9a\xb9\xea\x8a\x6b\x62\x33\x3e\xee\x0c\x5b\x65\xa8\xaa\xde\x93\x75\x90\x5b\xad\x76\x01\xb6\xc6\x1e\x14\x2c\x02\x66\xa9\xea\xf2\xb8\xd3\x5b\x97\x3c\xc3\x11\x01\x70\x7f\xc0\x6b\x91\xc4\xbd\x19\x49\x4e\x16\xbc\xe6\xee\x56\xab\x79\x91\xe7\xd2\x2a\x6d\x26\xe6\x35\x25\x2f\x91\x3d\x93\x3c\x84\x8f\x29\x59\x0f\xb7\x52\x19\x54\x55\x3f\xc3\x3a\x06\x8a\xe2\x91\xb2\xa5\x38\x96\xca\xa0\x8e\x3b\xda\xa9\xae\x28\x94\xce\xa0\xae\x9d\xf1\xd3\x05\xa8\x7a\x52\x55\xff\x59\x80\x9e\xa8\x94\xce\xa0\x8e\xf3\xb0\xb5\x7a\xf2\x62\x05\x25\xed\x02\x55\x4a\x7f\x66\x92\x24\x1f\x1a\x63\x3e\x24\xbf\xbe\x28\x67\xa9\xea\x94\x9c\x64\xe7\x4a\x29\x0d\x0a\x90\x24\xc9\xf4\x9c\x1c\x03\xa3\xca\x5c\xfd\xac\xb4\x06\x85\xb5\x65\xec\x56\x13\xa7\xe0\xe4\x1a\xec\xf1\x63\xa9\xeb\x12\xb6\x8b\xfe\x29\x2e\xa6\xf6\xf7\xf8\x87\x72\xce\x05\x7e\xac\xaa\xa5\xaf\xb6\x5d\xea\x3b\xb4\x19\x57\xbe\x74\x3c\x76\x33\xb3\x0f\xf6\xb8\x2d\x0d\x0b\xb1\x6e\xab\x21\xaa\xda\x96\xdc\x74\xde\xb4\x8b\x3b\xb4\x25\x22\xb2\x39\xd6\x9d\x75\x34\xb6\x64\xce\x2e\xc0\xb6\xee\xe3\x8f\xb0\xfe\xd6\x69\xd8\xe2\x89\x4f\xaa\xea\xaa\x3a\x4c\x33\x37\xfe\x07\xd8\x18\x22\xa7\xa3\x10\x61\x38\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xee\xc0\xff\x6c\xed\x0d\x00\x00")

func sourcedataShapesShape6ShapePngBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataShapesShape6ShapePng,
		"sourcedata/shapes/shape-6/shape.png",
	)
}

func sourcedataShapesShape6ShapePng() (*asset, error) {
	bytes, err := sourcedataShapesShape6ShapePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/shapes/shape-6/shape.png", size: 3565, mode: os.FileMode(420), modTime: time.Unix(1715607060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/shapes/shape-6/shape.png": sourcedataShapesShape6ShapePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"shapes": &bintree{nil, map[string]*bintree{
			"shape-6": &bintree{nil, map[string]*bintree{
				"shape.png": &bintree{sourcedataShapesShape6ShapePng, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
