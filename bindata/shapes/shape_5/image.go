// Code generated for package shape_5 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/shapes/shape-5/shape.png
package shape_5

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataShapesShape5ShapePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x12\x07\xed\xf8\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x78\x00\x00\x00\x78\x08\x06\x00\x00\x00\x39\x64\x36\xd2\x00\x00\x06\xd9\x49\x44\x41\x54\x78\x9c\xed\x9d\x6b\xc8\x14\x55\x18\xc7\x7f\x56\x56\x6a\x96\x94\x6d\x5e\xc0\xa2\x9b\x64\x4f\x21\x5a\x74\x21\x48\x44\xc3\x4a\x4a\xbb\x50\x50\x46\x57\x0a\x22\xa2\xa4\x8c\xb0\x6f\x7e\xe9\x83\x15\x7e\x50\x24\x48\xa2\x0b\x25\x66\x22\x25\x62\x1f\x0a\x2a\xbb\xa9\x45\x3e\x14\x5a\x96\x74\x33\xb7\xab\xbe\x66\x5e\x4a\xfb\x30\x6b\xec\x8e\xb3\xbb\x33\x3b\xe7\xcc\xed\x7d\x7e\xb0\x1f\xce\x99\x39\xe7\xfd\xb3\x3f\xce\xd9\x99\xdd\x39\xe7\x05\xc3\x30\x0c\xc3\x30\x0c\xc3\x30\x92\x31\x20\xef\x00\xcd\x88\xc8\x20\x60\x18\x70\x4c\xa3\x6a\x2f\xf0\x9b\xaa\xee\xcb\x2f\x55\x67\x44\x64\x30\x70\x34\xb0\x4b\x55\xff\xc9\x3b\x4f\x98\x5c\x04\x8b\xc8\x68\xe0\x12\x60\x7c\xe3\x75\x06\x30\x12\x38\xa1\x4d\x93\x9d\xc0\x36\xe0\x4b\x60\x23\xa0\xc0\xdb\xaa\xfa\x8b\xff\xb4\x20\x22\x27\x02\x97\x02\xe7\x01\x02\x9c\x0d\x8c\x00\x86\x03\xc7\x86\x4e\xef\x6b\x64\xdd\x06\x6c\x02\x3e\x6b\xbc\x36\xa8\xea\xde\x2c\xf2\x36\x93\x89\x60\x11\x19\x40\xf0\x06\xcd\x04\xa6\x01\xe7\x3a\xea\xfa\x73\x60\x0d\xf0\x8a\xaa\xae\x77\xd4\x27\x00\x22\x32\x11\xb8\x11\x98\x02\x4c\x20\xfd\x7b\xb5\x1b\x78\x1b\x58\x0d\xbc\xae\xaa\x3f\xa6\xec\x2f\x16\x5e\x05\x8b\xc8\x08\xe0\x76\xe0\x4e\xe0\x2c\x9f\x7f\x8b\x60\x74\x3f\x0f\x2c\x56\xd5\x3f\x7b\xe9\x40\x44\x86\x03\xf7\x00\xb3\x80\x73\x1c\x66\x0b\x73\x80\x40\xf4\x12\x60\x85\xcf\xa9\xdd\x8b\x60\x11\x19\x09\xcc\x01\xee\xe5\xf0\x29\xcc\x37\x7d\xc0\x22\xe0\x19\x55\xdd\x16\xa7\x81\x88\x8c\x01\x66\x03\x77\x03\x83\x3d\x66\x8b\x62\x2b\xf0\x24\xf0\x9c\x8f\x6b\x0d\xa7\x82\x45\x64\x08\xf0\x04\xf0\x20\xd9\x8b\x0d\xb3\x1b\x98\x07\x3c\xd5\xee\xb3\x4f\x44\x8e\x03\xe6\x02\x0f\x11\x5c\x28\xe5\xc9\xf7\xc0\x23\xaa\xfa\xaa\xcb\x4e\x9d\x09\x16\x91\x6b\x81\x05\xc0\x18\x57\x7d\x3a\xe2\x6b\xe0\x7e\x55\x5d\xd3\x5c\x29\x22\x37\x03\xf3\x81\x51\xb9\xa4\x6a\xcf\x5b\x04\x79\xbf\x72\xd1\x59\x6a\xc1\x22\x32\x94\x60\x4a\xbc\x25\x7d\x1c\xaf\x2c\x04\x1e\x26\x98\x82\x17\x13\x5c\x40\x15\x95\x3d\xc0\x6c\x55\x5d\x98\xb6\xa3\x54\x82\x45\x64\x1c\xb0\x1c\x18\x9b\x36\x48\x46\x6c\x20\xb8\xcf\x3e\x3d\xef\x20\x31\x59\x0a\xdc\xa5\xaa\xbb\x7a\xed\xa0\x67\xc1\x22\x32\x15\x58\x06\x1c\xdf\x6b\x1f\x46\x2c\x3e\x05\xa6\xab\xea\x4f\xbd\x34\xee\x49\xb0\x88\xdc\x08\xbc\x04\x0c\xec\xa5\xbd\x91\x98\xad\xc0\x54\x55\xfd\x3a\x69\xc3\xc4\x82\x45\xe4\x26\xe0\x65\xe0\x88\xa4\x6d\x8d\x54\xfc\x08\x4c\x4a\x2a\x39\x91\x60\x11\x99\x06\xac\xc4\x46\x6e\x5e\x6c\x01\x2e\x53\xd5\x9f\xe3\x36\x88\x2d\x58\x44\xce\x05\x3e\x00\x86\xf6\x10\xcc\x70\xc7\x3a\xe0\x72\x55\xdd\x1d\xe7\xe4\x58\xd3\x6c\xe3\x56\x68\x05\x26\xb7\x08\x5c\x40\x70\x5b\x1a\x8b\xb8\x9f\xa3\x8b\x80\x33\x7b\x8a\x63\xf8\xe0\x36\x11\xb9\x23\xce\x89\x5d\xa7\x68\x11\xb9\x0e\x78\x2d\x75\x24\xc3\x35\x7d\xc0\xf9\xaa\xba\xb5\xd3\x49\x1d\x47\x70\x63\x6a\x5e\xe0\x30\x94\xe1\x8e\xa1\x04\xdf\xce\x75\xa4\xdb\x14\x3d\x07\x18\xed\x24\x8e\xe1\x83\x2b\x1b\xbf\x01\xb4\xa5\xed\x14\x2d\x22\xa7\x00\xdf\x02\x83\x5c\xa7\x32\x9c\xb2\x19\x18\xa7\xaa\xff\x46\x1d\xec\x34\x82\x1f\xc0\xe4\x96\x81\xb3\x81\x1b\xda\x1d\x8c\x14\xdc\x78\x90\xec\x3e\x5f\x89\x0c\xe7\x3c\xda\xee\x40\xbb\x11\x3c\x0b\x38\xc9\x4f\x16\xc3\x03\x13\x44\x64\x4a\xd4\x81\x76\x82\x6f\xf5\x18\xc6\xf0\xc3\xed\x51\x95\x87\x5d\x64\x89\xc8\x28\xe0\x87\xa8\x63\x46\xa1\xf9\x0b\x38\x59\x55\xff\x6e\xae\x8c\x1a\xc1\xd7\x63\x72\xcb\xc8\x10\xe0\xb0\x5b\xa6\x28\xc1\x91\x73\xb9\x51\x0a\xa6\x85\x2b\x5a\x04\x37\x3d\xa0\x6e\x94\x93\x49\xe1\x8a\xf0\x08\x1e\x4b\xb0\x1c\xc3\x28\x27\xa7\x8a\xc8\x69\xcd\x15\x61\xc1\xe3\xb3\xcb\x62\x78\xe2\xc2\xe6\x42\x58\xb0\xfd\x24\x58\x7e\x5a\x9e\x70\x0d\x0b\x2e\xcb\xe3\xa4\x46\x7b\x5a\xd6\x80\x85\x05\x17\x6d\x55\x82\x91\x9c\x33\x9a\x0b\x61\xc1\xf6\x8c\x73\xf9\x69\x59\x63\x1d\x16\x9c\xf7\x82\x31\x23\x3d\x2d\xcf\xcd\xd9\x08\xae\x1e\xc3\x9a\x0b\x61\xc1\xfb\x33\x0c\x62\xf8\xe1\x60\x73\x21\x2c\xb8\x2f\xc3\x20\x86\x1f\x76\x34\x17\xc2\x82\x77\x66\x18\xc4\xf0\xc3\x9e\xe6\x42\x58\xf0\x6f\x19\x06\x31\xfc\xf0\x7b\x73\x21\x2c\xf8\x9b\x0c\x83\x18\x7e\xd8\xd2\x5c\x08\x0b\xde\x9c\x61\x10\xc3\x0f\x2d\x83\xd4\x04\x57\x8f\x16\x87\x61\xc1\xeb\x81\xc8\xe7\x6b\x8d\xd2\xf0\x61\x73\xa1\x45\x70\x63\x2f\x88\x0d\x99\xc6\x31\x5c\xb2\x5d\x55\x3b\x7e\x06\x03\xbc\x9b\x51\x18\xc3\x3d\x87\xb9\x8b\x12\xbc\x2a\x83\x20\x86\x1f\x56\x86\x2b\xa2\x04\xbf\x03\x64\xb2\x8b\xab\xe1\x94\x7d\xc4\x11\xdc\x58\xc4\x64\xeb\x81\xcb\xc7\x6a\x55\xdd\x11\xae\x6c\xb7\xb2\x61\x89\xe7\x30\x86\x7b\x9e\x8d\xaa\x8c\x14\xac\xaa\x1f\x03\x6b\xbd\xc6\x31\x5c\xb2\x09\x78\x33\xea\x40\xa7\xe5\xa3\x4f\xfb\xc9\x62\x78\x60\xbe\xaa\x1e\x8c\x3a\xd0\x49\xf0\x72\x82\x9d\x5a\x8d\x62\xf3\x3d\xf0\x62\xbb\x83\x6d\x05\xab\xea\x01\xe0\x71\x1f\x89\x0c\xa7\xcc\x0d\x2f\x38\x6b\xa6\xdb\x1e\x1d\xcb\x80\xf7\xdd\xe6\x31\x1c\xb2\x16\x78\xa1\xd3\x09\x71\xb6\x51\x3a\x9f\xe0\x3b\xea\xa3\x1c\x85\x32\xdc\xb0\x0f\x98\xa8\xaa\xda\xe9\xa4\x23\xbb\xf5\x52\xaf\xd7\xb7\xd7\x6a\xb5\x23\x89\x58\xd8\x64\xe4\xca\x63\xaa\xba\xa2\xdb\x49\x71\x77\xba\x9b\x87\x4d\xd5\x45\x62\x15\xc1\xbf\x23\xe8\x4a\x92\xcd\x48\xc7\x00\x9f\x00\xb5\x1e\x43\x19\x6e\xd8\x0c\x5c\xac\xaa\x7f\xc4\x39\x39\xf6\x9e\xcf\xaa\xfa\x1d\xc1\xea\x7f\x7b\xb4\x36\x3f\x7e\x05\xae\x8a\x2b\x17\x12\x6e\xea\xad\xaa\xef\x11\xfc\xf3\x8d\x03\x09\x83\x19\xe9\xd9\x09\x5c\x11\xfe\xbd\xb7\x1b\x5d\x2f\xb2\xc2\xd4\xeb\xf5\x2f\x6a\xb5\x5a\x1d\x98\x9e\xb4\xad\xd1\x33\x87\xe4\xae\x4b\xda\x30\xb1\x60\x80\x7a\xbd\xbe\xae\x21\xf9\xea\x5e\xda\x1b\x89\x38\x24\xf7\xa3\x5e\x1a\xf7\x24\x18\x4c\x72\x46\xa4\x92\x0b\x29\x04\x83\x49\xf6\x4c\x6a\xb9\x90\x52\x30\xfc\x2f\x79\x1b\x81\x64\xdb\x5f\xcb\x0d\x4e\xe4\x82\x03\xc1\x00\xf5\x7a\x7d\x7d\xad\x56\xdb\x02\xcc\xc0\x24\xa7\xc5\x99\x5c\x70\x24\x18\xa0\x5e\xaf\x6f\x34\xc9\xa9\x71\x2a\x17\x1c\x0a\x06\x93\x9c\x12\xe7\x72\xc1\xb1\x60\x30\xc9\x3d\xe2\x45\x2e\x78\x10\x0c\x26\x39\x21\xde\xe4\x82\x27\xc1\x60\x92\x63\xe2\x55\x2e\x78\x14\x0c\x26\xb9\x0b\xde\xe5\x82\x67\xc1\x60\x92\xdb\x90\x89\x5c\xc8\x40\x30\x98\xe4\x10\x99\xc9\x85\x8c\x04\x83\x49\x6e\x90\xa9\x5c\xc8\x50\x30\xf4\x7b\xc9\x99\xcb\x85\x8c\x05\x43\xbf\x95\x9c\x8b\x5c\xc8\x41\x30\xf4\x3b\xc9\xb9\xc9\x85\x9c\x04\x43\xbf\x91\x9c\xab\x5c\xc8\x51\x30\x54\x5e\x72\xee\x72\x21\x67\xc1\x50\x59\xc9\x85\x90\x0b\x05\x10\x0c\x95\x93\x5c\x18\xb9\x50\x10\xc1\x50\x19\xc9\x85\x92\x0b\x05\x12\x0c\xa5\x97\x5c\x38\xb9\x50\xd0\x37\x51\x44\x66\x00\x4b\x81\x81\x79\x67\x89\x49\x21\xe5\x42\x41\x05\x03\x88\xc8\x35\x04\xeb\x93\x8b\x2e\xb9\xb0\x72\xa1\xc0\x82\xa1\x14\x92\x0b\x2d\x17\x0a\x2e\x18\x0a\x2d\xb9\xf0\x72\xa1\x04\x82\xa1\x90\x92\x4b\x21\x17\x4a\x22\x18\x0a\x25\xb9\x34\x72\xa1\x44\x82\xa1\x10\x92\x4b\x25\x17\x4a\x26\x18\x72\x95\x5c\x3a\xb9\x50\x42\xc1\x90\x8b\xe4\x52\xca\x85\x92\x0a\x86\x4c\x25\x97\x56\x2e\x94\x58\x30\x64\x22\xb9\xd4\x72\xa1\xe4\x82\xc1\xab\xe4\xd2\xcb\x85\x0a\x08\x06\x2f\x92\x2b\x21\x17\x2a\x22\x18\x9c\x4a\xae\x8c\x5c\xa8\x90\x60\x70\x22\xb9\x52\x72\xa1\x62\x82\x21\x95\xe4\xca\xc9\x85\x0a\x0a\x86\x9e\x24\x57\x52\x2e\x54\x54\x30\x24\x92\x5c\x59\xb9\x50\x61\xc1\x10\x4b\x72\xa5\xe5\x42\xc2\xbd\x2a\xcb\x86\xaa\xae\x04\x66\x02\x51\x5b\xde\x57\x5e\x2e\x54\x7c\x04\x1f\x42\x44\x26\x03\x6f\x00\x83\x1a\x55\xfd\x42\x2e\xf4\x13\xc1\xd0\x22\x79\x3f\xfd\x44\x6e\xbf\x43\x44\x26\x8b\xc8\x45\x79\xe7\x30\x0c\xc3\x30\x0c\xc3\x30\x0c\xa3\xc8\xfc\x07\xae\x3e\x8a\x74\xed\xd1\x08\xab\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x6d\x8d\xdf\xcb\x12\x07\x00\x00")

func sourcedataShapesShape5ShapePngBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataShapesShape5ShapePng,
		"sourcedata/shapes/shape-5/shape.png",
	)
}

func sourcedataShapesShape5ShapePng() (*asset, error) {
	bytes, err := sourcedataShapesShape5ShapePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/shapes/shape-5/shape.png", size: 1810, mode: os.FileMode(420), modTime: time.Unix(1715607068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/shapes/shape-5/shape.png": sourcedataShapesShape5ShapePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"shapes": &bintree{nil, map[string]*bintree{
			"shape-5": &bintree{nil, map[string]*bintree{
				"shape.png": &bintree{sourcedataShapesShape5ShapePng, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
