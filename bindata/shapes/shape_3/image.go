// Code generated for package shape_3 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/shapes/shape-3/shape.png
package shape_3

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataShapesShape3ShapePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x28\x00\x61\x0e\x36\x06\x06\x86\x63\x0f\xbe\x78\x33\x30\xb0\xd4\x7b\xba\x38\x86\x54\xcc\x79\x7b\xd7\xbf\x63\x4a\xa9\xcc\xf1\x8f\xdf\xcf\xf9\x25\x06\x08\x4e\xdc\xbf\x28\x6a\x5b\x30\xfb\xef\xa8\x69\x4b\x55\x22\x04\x2a\x3b\x84\x94\xbf\x28\x38\x6a\xc4\xf1\x76\x4d\x78\x71\xe9\xa2\xaa\xd8\xca\xd3\xf7\xb8\x8e\xb6\x72\x78\x79\xbc\x49\x92\x6d\x99\xb6\xcd\x7e\x9a\x68\xed\xeb\x0b\x8e\x11\xd3\x98\xea\x1b\x75\x76\x5c\xbb\x96\xe7\xd7\x9e\x6e\xe6\x23\x22\xf7\xfd\xa7\xed\xd1\xf4\x5f\xfb\x0e\x9c\xde\xf0\xf9\x63\xe2\xbd\x37\x67\x74\xf6\x37\x4a\x2e\x3a\x7f\x66\xd7\x01\xbd\x04\xf3\x0f\x0c\x1b\xba\xaa\xaa\x0e\xf0\x14\xf0\x48\x94\x7f\xbf\x39\xeb\xfb\xef\x78\xa3\xcd\x82\x09\xf2\x1b\x44\x25\x58\xdb\xb2\xee\x95\x32\x5a\xb0\xca\xb0\xf0\xed\xfc\x2d\x74\xba\xdc\x6c\xf3\xd5\x03\xbf\x0f\x2c\x6b\xbb\x6e\xce\xff\xa6\xe4\x3b\xbf\xd4\x3b\x1e\x15\xe3\x6a\xa1\x0a\xe9\x1d\x1b\x1f\x5e\x59\x7e\xc0\xac\xfc\x7f\xea\x8a\xff\xb3\xbf\x1b\x7e\x28\xb8\xcc\xfd\x26\x9a\xc5\x6c\xf7\xef\xe7\xad\xdf\xd8\x9a\x66\xda\x72\xf8\x30\x5f\x17\x99\x35\x87\x4d\xee\x6d\x80\x6d\xee\xb4\x2e\xf6\xab\xac\x7e\x22\x77\xa4\x45\x84\xa7\x74\xb3\x5f\xdd\xfc\x74\x1d\xdf\xd5\xec\xb8\xcc\xd7\x67\x73\x72\xb9\x77\x4f\x3a\x93\xc3\xbb\x61\x61\xeb\xcb\xbb\xce\x69\xdf\xa4\xbf\xde\xdf\x10\xd3\xeb\xb9\x4a\xfc\x2e\xc3\x77\xe6\xf3\x5b\x37\xec\x36\x48\x49\xdb\x2b\xd6\x76\x78\xff\x92\xcf\xf1\xf1\x0e\x19\x6a\x4c\x5d\xdd\x0d\x8f\x94\x16\xec\xe0\xd0\xd0\x43\x30\xd7\x79\x97\xce\x0b\xff\xee\xf3\x2a\xeb\x0c\x53\x7a\xf4\x8d\xd0\x12\x63\x83\x4b\x87\xf2\xd6\x7b\x97\x4a\x54\x87\x73\x3f\xae\xbe\xf3\x77\xb1\x58\xd9\xd3\x19\x37\xc5\x1e\x1c\x16\x5b\x96\x6e\x15\xa2\xfe\x72\xe9\x59\xc6\x60\xdd\x37\xab\x66\x2d\xaa\xf2\xf1\xb2\xbe\xc6\x78\x6c\xa5\xdf\x25\xef\x5b\xef\xdf\x71\xb7\x9a\xa7\x7e\x95\xef\xfe\xdb\x9a\xfe\xbc\xf1\xa3\xdf\x7f\x63\x1d\x6b\x90\x44\x85\xb8\x45\x40\x46\xf6\x04\x99\x05\x55\x39\x5e\x11\x4b\x7e\xbd\x38\xf5\xc6\xc0\xe1\xdc\xcf\xe3\x53\x2e\x15\x26\xc8\x16\x1c\xe7\x72\x7f\xde\x10\xde\x38\xfd\xce\x5f\xa7\x99\xaf\x65\x64\x2c\x9f\xc7\x79\xbd\xe4\x28\x90\xab\xe8\x98\x3a\xff\x60\x1d\x6b\x4e\xf9\x77\xe1\x82\x99\xe5\xf3\xff\x5e\x7e\x3c\x7d\x65\x3d\x83\x25\xf7\x1b\xc6\x65\x8f\x32\x37\xcb\x19\x47\xb3\xe6\xb0\xdd\x5b\xf4\x6f\xf7\x65\xcf\x55\xfe\x7f\x6b\xcb\x3f\xf6\x4e\xff\xfb\xf9\xe0\x99\x38\x86\xb8\xf5\x96\x7f\xd6\xee\x5e\xbf\xfa\xe7\xe6\x87\x4a\x69\xdf\x78\x0b\xe2\xcf\xca\xd7\x5f\xbc\x7b\x7f\xc7\x97\x63\x3f\x9c\xe3\x62\x58\x44\xc4\x19\x8f\xba\x3a\x14\x0a\x06\x0c\x09\xe6\x9d\x0f\x4b\xcd\x67\xdc\x8c\x4a\xb0\xfe\xba\x3f\xb2\xc8\x70\xe9\x97\x5a\xaf\x97\xcb\xe7\x7c\x0e\xba\xb8\x5a\x3a\x20\xad\xac\xdc\xeb\x25\x67\x82\x74\x81\xf3\xd9\xdd\x73\xbd\x35\xff\xce\x0b\xfa\x65\xf9\xfc\xcf\xf1\x4f\xbd\xf5\xf5\xac\xab\x67\xe6\xb2\xa8\x35\x7c\xd5\xde\xb3\xce\x32\x81\xc7\xe2\xc1\xbb\xfa\x75\x05\xc9\x0b\x66\xde\xd4\xf8\xa0\xf6\xa1\xa2\x79\xe6\xe7\x90\xfe\xcf\x33\x76\xc7\x4b\xbc\xe3\xb7\x67\x95\x61\x7f\x97\x63\xb0\x87\xeb\x06\xd3\x9d\xc9\x41\x56\x93\x8a\xdf\x99\xde\x90\xb2\xf8\x5b\x31\x9f\xf1\xbb\xd9\x9c\x5d\x62\x15\x3c\x12\x67\x2d\xe5\x65\xcd\x36\x0b\x3e\x60\x29\x88\x3d\xfc\x30\x35\xbb\xe1\xb3\xe5\x73\x7f\xae\xb7\xbc\x2d\x53\x2e\x55\x9b\xf4\x97\x6f\x2c\xd5\x54\x7d\xcf\xf0\xbb\xe1\x35\x37\x1f\xf3\x9e\x4b\xff\x57\xbd\x75\xf8\x3a\xcb\x7d\xf3\xf2\xb3\xda\x95\xfb\x98\x73\x72\x13\x7f\xa8\x3d\x98\x28\x56\x16\x9a\x9b\x91\x59\xfe\x78\xc2\xcc\xd8\x07\x5c\xf7\xd5\xef\x5f\xd0\x29\xd8\xd6\x1a\xeb\xba\xba\xf1\xf6\x6d\x89\x77\x97\xfc\x6c\x1a\x26\xfe\xdb\x7f\x61\x11\xee\xa8\x11\x8f\x58\x60\xc5\xa5\xf5\xd6\xe0\x43\x29\xf7\xee\x2e\x33\x46\xeb\x5b\x12\xef\x98\x96\xff\xfa\xef\x98\xb9\x7e\xe7\x6f\x7e\xdd\x37\xa7\x0c\x37\x5f\xde\x22\xfc\xc1\x87\xdd\xe2\xc6\xa1\x0f\x27\x3b\xbe\xf3\xab\xaf\xf0\xbb\xe4\x6d\x7d\x8d\x91\x8f\xf1\x32\xab\xbb\x78\xe3\x5e\xd6\xef\x4f\x76\xfe\xb6\x5c\xd5\xef\x38\xc5\x84\xbf\xa7\xf4\x4e\x2d\x67\xc5\x2c\x23\xc1\xe7\x8d\xe9\x77\xfe\x76\x33\x45\x37\xa7\xf5\xbc\x9a\xbe\xb4\xa5\x32\xa1\x7d\xf7\x7c\x39\xb6\x13\x96\xff\x67\x05\x59\xf9\x94\xb6\x95\x73\x5f\xfd\x19\xba\xfd\x59\x04\xff\x0c\x46\xb5\xc6\xf4\xbb\x7f\x4f\x3b\x89\x5b\x06\x14\x9d\xdb\x3b\xe7\xf3\xc5\x29\x93\x98\xb7\x33\x6d\x0f\xfc\x6f\x18\x57\xc6\x56\xd1\xfe\xaa\xd0\x8e\xf3\x83\xf8\xcc\xc7\xff\x37\x3b\x3b\x9d\xac\x67\x60\x60\x60\xf0\x74\xf5\x73\x59\xe7\x94\xd0\x04\x08\x00\x00\xff\xff\xba\x1f\x5b\x14\xb8\x04\x00\x00")

func sourcedataShapesShape3ShapePngBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataShapesShape3ShapePng,
		"sourcedata/shapes/shape-3/shape.png",
	)
}

func sourcedataShapesShape3ShapePng() (*asset, error) {
	bytes, err := sourcedataShapesShape3ShapePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/shapes/shape-3/shape.png", size: 1208, mode: os.FileMode(420), modTime: time.Unix(1715607111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/shapes/shape-3/shape.png": sourcedataShapesShape3ShapePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"shapes": &bintree{nil, map[string]*bintree{
			"shape-3": &bintree{nil, map[string]*bintree{
				"shape.png": &bintree{sourcedataShapesShape3ShapePng, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
