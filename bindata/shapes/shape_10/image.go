// Code generated for package shape_10 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/shapes/shape-10/shape.png
package shape_10

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataShapesShape10ShapePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x70\x11\x8f\xee\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x78\x00\x00\x00\x78\x08\x06\x00\x00\x00\x39\x64\x36\xd2\x00\x00\x11\x37\x49\x44\x41\x54\x78\x9c\xed\x9d\x7d\xb8\x55\x55\x99\xc0\x7f\x5c\x54\x44\x11\xd3\xd1\x93\x5a\xa3\xe3\x67\x33\xf4\x66\x8e\xa3\x95\x25\x65\x8a\x59\x66\x40\xa9\xe1\x68\x7e\xe0\xd4\x34\x38\x89\x53\xa6\xd3\x87\x95\x8d\xa6\xd6\xf8\x94\xf4\xa1\x62\x9a\x48\x96\xa2\x86\x28\x6a\x7e\x24\x0a\x8a\x3a\x28\x81\xf1\x66\xa5\x68\x62\x98\x7a\xcc\x44\x23\x11\x14\xee\xfc\xf1\xae\x7b\x3b\x67\x9f\x75\xce\xd9\x1f\x6b\xed\x73\xcf\x7d\xee\xef\x79\xf8\x83\x75\xf6\x7e\xd7\xbe\xe7\x3d\x7b\xef\xb5\xde\x4f\x18\x62\x88\x21\x86\x18\x62\x88\x21\x3a\xc1\xb0\x98\xc2\x45\x64\x67\xe0\x7d\xc0\x66\xc0\x6f\x80\xfb\x55\xf5\xd5\x98\x73\x0e\x44\x44\x64\x0f\x60\x2f\x60\x2d\xb0\x58\x55\x57\x96\x35\x77\x14\x05\x8b\xc8\xa6\xc0\x77\x81\x4f\x26\xe6\x58\x03\xdc\x0d\xdc\x08\xcc\x56\xd5\x6a\x8c\xf9\x3b\x8d\x88\x6c\x0c\x1c\x04\x7c\x0c\x38\x04\xd8\xb1\xe6\xe3\x5e\x60\x26\x30\x55\x55\x5f\x8e\x7d\x2d\xb1\x14\xfc\x53\xe0\x5f\xdb\x1c\xb6\x01\x98\x07\x5c\x0e\x5c\xaf\xaa\x6b\x62\x5c\x4b\x99\x88\xc8\xbb\x81\xc9\xc0\x91\xc0\x96\x6d\x0e\xbf\x03\xf8\xa0\xaa\x6e\x88\x79\x4d\xc1\x15\xec\xfe\xc8\x85\x19\x4f\x7b\x11\xb8\x14\xb8\x50\x55\x9f\x0c\x7d\x4d\x31\x11\x91\xcd\x81\x63\x81\xa9\xc0\x3f\x65\x3c\xfd\x28\x55\x9d\x15\xfe\xaa\xfe\x46\x4f\x04\x99\x87\xe5\x38\x67\x2b\xe0\x34\x60\xb9\x88\xcc\x10\x91\xac\x5f\x54\xe9\x88\xc8\x1b\x44\xe4\x4c\xe0\x29\xe0\x22\xb2\x2b\x17\x60\x62\xd0\x8b\xf2\xb0\x51\x04\x99\x3b\x14\x38\x77\x38\x70\x3c\x70\x9c\x88\xcc\x04\xce\x28\x73\x41\x92\x06\x11\x19\x09\x7c\x16\x38\x9d\xf6\x8f\xe1\x76\xfc\x7d\xf1\x2b\x6a\x4d\x0c\x05\x17\xfd\xa3\xc1\x5e\x1d\xc7\x03\x93\x44\xe4\x7f\x81\x73\xf2\xac\xbe\x45\x64\x13\x60\x3c\xb0\x8f\x1b\xfa\x25\x70\x83\xaa\xae\xcd\x73\x51\x22\x72\x34\xf0\x2d\xe0\x4d\x79\xce\xf7\x30\x2a\x90\x9c\xa6\xc4\x78\x07\xdf\x0e\x1c\x1c\x58\xec\x13\xc0\x14\x55\xbd\x3d\xc3\x75\xec\x0d\x5c\x07\xec\x9c\xf8\xe8\x29\xe0\x63\xaa\xba\x38\x83\xac\xdd\x81\x8b\x81\x03\xd3\x9e\x93\x92\x15\xaa\xfa\x0f\x81\x65\xd6\x11\xe3\x1d\xbc\x49\x04\x99\xbb\x00\xb7\x89\xc8\x74\x11\x69\xfb\xab\x17\x91\x31\xc0\x9d\x34\x2a\x17\x6c\xcb\x32\xcf\xfd\x00\xda\xc9\x19\x26\x22\x53\x81\x87\x09\xaf\xdc\x52\x88\xa1\xe0\x98\xfc\x3b\xb0\xd0\xed\x33\xbd\x88\xc8\x0e\xc0\x6d\xc0\x1b\x5a\xc8\x19\x0d\xdc\x2a\x22\xbb\xb5\x99\xef\x27\xc0\x34\x60\x64\xd6\x0b\x1d\x28\xc4\x50\xf0\x5f\x22\xc8\xac\x65\x4f\xe0\x00\xdf\x07\xee\x9d\x7b\x3d\xf0\xe6\x14\x72\xb6\xc5\x94\xec\xfd\x21\x88\xc8\x2e\xb4\xdf\xcb\x17\x65\x7d\x64\xf9\x51\x14\xfc\x4a\x04\x99\x49\x9a\x5d\xf7\x34\xe0\x1d\x19\xe4\xec\x0a\x5c\x2e\x22\xbe\xb5\x48\x19\x77\x6d\xec\x9b\xa1\x2b\xef\xe0\xc7\x80\xbb\x92\x83\x22\x32\x1e\xf8\x8f\x1c\xf2\x26\x62\xdb\x9e\x24\x8f\x00\x4b\x72\xc8\xcb\x42\x57\x2a\xf8\xf9\x08\x32\x6b\x39\x45\x55\xd7\xd5\x0e\x88\xc8\xb6\xc0\x65\x05\x64\x9e\xe3\x56\xca\xfd\xa8\x6a\x2f\x70\x4a\x01\x99\x69\x88\x6e\x8b\x8f\xa1\xe0\x3f\x46\x90\xd9\xc7\xcd\xaa\xfa\x73\xcf\xf8\xf9\xc0\x36\x05\xe4\x8e\x00\xa6\x27\x1f\xd5\xaa\x7a\x0f\x70\x75\x01\xb9\xed\xe8\x4a\x05\xc7\xb4\x3c\x7d\x29\x39\x20\x22\x63\x81\xe3\x02\xc8\x7e\x3f\x30\xc9\x33\xfe\x15\xe2\x2d\x86\xa2\x5b\xe9\x62\x28\x78\x79\x04\x99\x60\x16\xa8\x5f\xd5\x0e\xb8\x3b\xee\xfc\x80\x73\x9c\x2d\x22\x75\xd6\x3d\x55\x5d\x0e\x5c\x15\x70\x8e\x5a\x1e\x8b\x24\xb7\x9f\x58\x0a\x8e\xe1\x02\x3b\xcf\x33\x36\x91\x6c\xab\xe6\x76\xec\x8a\xb9\xfb\x92\x9c\x1b\x70\x8e\x5a\x62\xdd\x0c\xfd\x04\x57\xb0\xf3\xeb\x86\xfe\x65\x2e\x51\xd5\x07\x3c\xe3\x67\x04\x9e\x07\xe0\x34\xcf\xbb\xf8\x11\x2c\x50\x21\x24\xeb\xb1\x95\x7a\x54\x62\x59\xb2\x96\x06\x96\xd7\xb0\x42\x16\x91\x83\x80\xb6\xe6\xc6\x1c\xec\x8e\xdf\x96\xfe\xa3\xc0\xf3\xfc\xb6\x8c\xf0\xa5\x58\x0a\xfe\xbf\x80\xb2\x5e\xc3\x4c\x86\x49\x4e\x0e\x38\x47\x92\x29\x9e\xb1\xeb\x80\xd5\x01\xe7\x58\x14\x50\x56\x53\x62\x29\xf8\x9e\x80\xb2\xe6\xab\xea\xaa\xda\x01\x11\xd9\x0e\xf8\x70\xc0\x39\x92\x1c\x2a\x22\x75\x6e\x4f\xf7\xea\x49\xed\xcd\x4a\xc1\xbd\x01\x65\x35\x25\xe6\x23\x3a\x54\x40\xd9\xcd\x9e\xb1\xa3\x89\xe3\xcb\xee\x63\x13\xe0\x50\xcf\xf8\xdc\x80\x73\xcc\x0f\x28\xab\x29\x51\x14\xac\xaa\xaf\x63\x41\x65\x45\xe9\xc5\x9c\x07\x49\x0e\x0f\x20\xbb\x1d\x1f\xf5\x8c\xdd\x04\xac\xf3\x8c\x67\xe5\x71\x55\x7d\x3c\x80\x9c\xb6\xc4\x74\x17\xfa\xee\xbc\x2c\xf4\x02\x67\xab\xea\x8a\xda\x41\x11\x79\x23\xb0\x5f\x41\xd9\x69\x78\x6f\x72\x40\x55\xff\x84\xad\xdc\x8b\x1a\x3e\x6e\x29\x78\x7e\x6a\xa2\x05\xbe\x3b\xc7\xfc\x62\x60\x8f\x9a\xe1\xb5\x98\xf3\xfc\xb7\x58\x94\xc6\xe3\xc0\x2a\xec\x71\xde\xf7\x48\x1f\x85\xc5\x66\xfd\x5e\x55\x9f\xf2\xc8\xdd\xdb\xc9\x2d\x83\xdd\x7c\x77\x9a\x88\xbc\x09\xdb\x33\xc3\xdf\xae\x7b\x0b\xcc\xcf\xbc\x25\x16\xa0\xb0\x2b\xb0\x1b\xb6\xd2\xdf\xac\xe6\xf4\x97\x81\x7d\x55\xf5\xd1\x58\x17\x5d\x4b\xec\xcc\x86\x2d\xb0\x47\xdd\x08\x4c\xb1\x4b\x93\x8e\x82\x1c\x32\x47\x60\x3f\x8e\x22\xc1\x7d\x69\x39\x56\x55\xaf\x2c\x22\xc0\x59\xc6\xf6\xc4\xe2\xc2\x36\xc6\x2c\x72\xdd\x9d\xd9\x10\x1b\x17\x56\x7b\x29\xf0\xee\xc8\x53\x9d\xa5\xaa\x5f\x8d\x3c\x47\x54\xba\x2d\x64\x07\x00\x55\xfd\x8d\xaa\xbe\x07\x33\x55\xfe\x3e\xe2\x54\xbb\xb6\x3f\x64\x60\xd3\x95\x0a\xee\x43\x55\x6f\x00\x04\xb8\x20\xd2\x14\xed\x62\xb6\x06\x3c\xa5\x3e\xa2\x5d\x52\xda\x3f\x62\x4a\xd9\x09\x78\x23\x16\x1b\x55\x1b\x1e\xb3\x06\x78\x16\xf3\x95\xae\x00\x96\x61\x66\xbd\xd7\xda\xc8\xfe\x20\xf0\x53\x2c\x4b\x22\x14\xf3\x55\xf5\x00\xcf\x5c\x93\xb1\xc4\xba\xcd\x6b\x86\xfb\x16\x8a\x2b\x81\x3f\x60\xf6\xf8\x65\xc0\x63\x6e\xdb\xd8\x11\x62\x2f\xb2\x36\xc5\xfc\xac\x07\x61\x61\xa7\x6f\x27\xdf\x53\xe3\x75\x2c\xdf\xe9\x32\x60\x56\xb3\x85\x9a\x8b\x92\xbc\x95\x70\x8f\xd6\x39\xaa\x5a\xb7\x1f\x16\x91\x43\xc9\xb6\x05\x5c\x03\xdc\x8f\x59\xf7\x6e\x05\x16\xc5\x4e\x38\xab\x25\x46\xe0\xfb\x30\x4c\x99\xc7\x60\x06\x89\xd1\x81\xa7\xf8\x03\x70\x26\x30\xc3\xf7\x45\x89\x48\x05\x8b\x89\x96\x00\x73\x5d\xa0\xaa\x75\xf1\x5a\x22\x72\x19\x70\x62\x01\x99\xcf\x01\xb3\x81\x2b\x54\x35\xa4\xcd\xde\x4b\x30\x05\xbb\xed\xcb\xb1\xc0\xa9\xd8\x63\x38\x36\xf7\x02\x93\x9d\x43\x3e\x79\x2d\xdb\x62\x77\x4d\xd1\x3b\xf9\x78\x55\x9d\x99\x90\xbd\x98\x70\x5e\xac\x47\xb0\x48\xd0\x1f\xc7\x4a\x9f\x0d\xb2\xc8\x12\x91\x8f\x60\x7b\xd3\x1f\x52\x8e\x72\x01\xf6\x07\x16\xbb\xb9\xeb\x50\xd5\xe7\xb1\xc4\xeb\x3f\x17\x9c\xa3\xce\x69\xe2\x12\xcf\xde\x56\x50\x66\x2d\x63\x80\xe9\xc0\x53\x22\xe2\x0b\x17\x2a\x4c\x61\x05\x8b\xc8\x87\x81\x39\x94\x63\x78\x48\x32\x1a\x98\x23\x22\xff\x96\xfc\xc0\x59\xa0\x8e\xc2\x4c\x9e\x79\x78\x44\x55\x93\x5b\xb0\x77\x61\xc6\x8a\xd0\x6c\x03\x5c\x2d\x22\xc1\x03\xed\x0b\x29\xd8\x59\x69\x2e\x2a\x2a\xa7\x20\x3d\xc0\x25\x22\x72\x54\xf2\x03\x55\xbd\x83\xfc\xe1\x36\x3e\x1f\x74\xc3\xd3\x22\x30\xdf\x77\x4f\x89\x60\x14\x55\xcc\x7e\x94\x90\xe3\x9a\x82\x1e\x60\x86\x88\xf8\xe2\xb3\xce\xc0\xee\xe4\x8b\x81\x9f\x01\xbf\xa6\xfd\x5d\xfd\x2a\xf6\xba\xe9\x47\x44\x7a\xb0\x9a\x1b\x31\xd9\x1a\x18\x17\x52\x60\x51\x9f\xea\x40\xb2\xf4\x8c\xc0\x92\xd3\xea\x22\x25\x5c\x00\xfb\x2c\xf7\x0f\xb0\xec\x7c\x2c\x6f\x78\x0a\xf6\xd8\x4d\x72\xb1\x7b\x8f\xd7\x72\x20\xb6\x77\x8f\x4d\xd0\xef\xb4\xe8\x1d\x1c\x3b\x8b\x21\x0b\x7f\xc2\x0a\xba\xb4\x45\x55\x57\xa9\xea\x4c\x55\xdd\x0f\x8b\x0c\x79\x22\x21\xe7\x2c\xcf\x69\x53\x8b\x5f\x62\x2a\x82\x06\xc3\x17\x55\xf0\x02\xca\x49\x36\x6b\xc7\x02\xe0\xad\xaa\x9a\xb5\xf8\x0b\xaa\x7a\x0b\x66\x80\x99\x89\xfd\x60\x3f\xad\xaa\x75\xab\x6f\x97\x6f\x9c\xa7\xf6\x48\x56\x5e\x03\x7e\x11\x52\x60\xe1\x7d\xb0\x88\x7c\x1d\xe8\xa4\xc7\x65\x2e\x70\x44\x51\x37\x64\x2b\x44\xe4\x46\xe2\x2f\xb0\x00\x7e\xa0\xaa\x9f\x09\x29\x30\xc4\xea\xf7\x9b\x98\x75\xa9\x13\x2c\x02\x26\x45\x56\xee\xc1\x94\xa3\xdc\x55\xc0\xd7\x42\x0b\x2d\xac\x60\x55\x7d\x85\xf2\xde\x4f\xb5\xbc\x82\xd5\x99\x8a\x56\x40\xcd\x45\xa5\x5c\x1c\x4b\x7e\x82\x33\x55\xf5\x85\xd0\x42\x83\xec\x5f\x55\x75\x0e\xe6\xc9\x29\x93\x6f\x78\x0c\x11\xa1\x99\x86\x85\xdf\xc4\xe6\x5e\xe0\x7b\x31\x04\x87\x34\x50\x9c\x0c\x3c\x19\x50\x5e\x2b\x5e\xc2\x6a\x61\x46\x43\x44\xde\x49\x31\xa7\x42\x5a\x56\x03\xc7\xc5\xf2\x30\x05\x53\xb0\x5b\x79\x4e\xc2\x56\x82\xb1\xb9\x4c\x55\x43\x66\x19\xf8\x28\xcb\xa6\xfe\xa9\x98\x4f\xa2\xa0\x26\x46\x55\x5d\x04\xfc\x67\x48\x99\x09\xd6\x01\x33\xb0\x9c\xdd\xd8\xfc\xae\x84\x39\xce\x55\xd5\x98\x09\xe6\x51\xb2\x0b\x7f\x88\x55\x83\x0b\xc9\x7c\xe0\x13\xc0\x36\xaa\x3a\xd9\x2d\xec\x62\xf3\x10\x71\x9f\x46\xd7\x13\x27\x3b\xb2\x8e\x58\xe5\x84\x87\x61\x6e\xb0\x4f\x15\x10\xd3\x0b\x5c\x83\x2d\xa6\x96\x05\xb9\xb0\x8c\x88\xc8\x93\xc4\x31\x4f\x46\xdf\xbb\xf7\x91\xcb\x16\xed\x14\x78\x02\x56\xcd\xfd\x77\xc0\xb4\xda\xbb\x4a\x55\x7b\x45\x64\x0a\x16\xb3\x74\x74\x8e\x29\x16\x02\x27\xab\x6a\xec\x2a\x37\xed\x58\x45\x78\x05\x7b\x95\xeb\x8a\xbb\x9d\x80\x55\xad\x9d\xef\x02\x0a\x0b\x93\xf9\x0e\x76\x59\x77\x57\x00\x13\x6a\x86\xef\xc2\x8a\x5b\x27\x2f\xba\x07\xdb\x6a\xa4\xb5\xce\xbc\x0a\x7c\x1e\xab\x1b\x9d\xd7\x8f\x1b\x0c\x11\x59\x46\x98\xd0\x9f\x3e\x2e\x01\x4e\x52\xd5\xba\xd4\x17\x11\x19\x8e\x79\xba\x6a\xbf\xd3\x19\xee\xd8\x42\xfb\xfc\x4c\x0a\x16\x91\xb7\x60\xbf\xc0\xdd\x3d\x1f\x5f\x8b\x59\x95\x1a\x14\x23\x22\x5f\x04\xbe\xd1\x66\xbe\x47\x81\xc3\x55\x55\xb3\x5c\x53\x4c\x44\xe4\x45\x5a\x97\x44\x4c\xcb\x7a\xe0\x0b\xaa\xea\xad\x27\x22\x22\xd3\x31\x4f\x58\x92\x25\xc0\x04\x55\xcd\x6d\x29\x4c\xad\x60\x11\x79\x1f\xb6\x30\x68\x15\x96\xfa\x7d\xac\x17\x81\x4f\xc9\x87\x61\x4e\x74\x5f\x10\xde\x02\x60\xa2\xaa\xbe\xd8\x64\xee\xed\xb1\x7d\xf6\x89\x98\x05\x6b\x9f\xa4\x43\x20\x34\x2e\xae\x2b\x84\x67\x67\x05\x70\xb4\xaa\xde\xd7\x64\x9e\x76\xb6\xfc\x67\x80\xc3\x54\xf5\x97\x79\x26\x4f\xb5\x8a\x16\x91\x09\x58\x3a\x68\xbb\x98\xe3\xcf\x00\x17\xfa\x4a\x03\xaa\xea\x4d\xc0\x3f\x03\xc9\x5a\x1b\x73\x81\x0f\xf9\x94\x2b\x22\x5b\x8a\xc8\xb7\x31\x03\xca\x17\xb1\x38\xea\x9d\x29\xa1\x52\x3a\x30\x36\x80\x8c\xcb\x81\xb7\xb7\x50\xee\x79\xb4\x77\xd4\x6c\x0f\xdc\x23\x22\xb9\xaa\xdd\xb6\xbd\x83\x45\xe4\x18\xcc\x95\x96\x65\x4b\xf5\x13\xe0\x44\xdf\x2a\xd1\x85\xf9\x7c\x1a\xd8\x17\x7b\x04\x5d\xd4\xe4\xb8\x83\xb1\xf7\x90\x2f\xd6\xeb\x17\xaa\x1a\xba\x26\x75\x72\xfe\xab\xb0\x48\x90\x3c\x2c\xc5\xde\x9f\xf7\x37\x91\x3d\x1c\xb3\xc4\x9d\x94\x41\xe6\x3a\xe0\x48\x55\xbd\x31\xcb\x85\xb4\x54\x70\x4e\xe5\xf6\xb1\x10\x7b\xa7\x3e\x97\xf5\x44\xf7\xce\x3e\xbb\xc5\xbc\xbd\x80\xb8\xea\x37\x51\x10\x91\x05\x64\xbf\x8b\x1f\xc6\xca\x3d\x5d\xd3\xcc\xf4\x28\x22\x5b\x61\x75\xb7\x0e\xc9\x71\x59\xaf\x61\x2b\xf0\xd4\x4a\x1e\xde\xec\x03\xf7\xce\x9c\xd5\xea\x98\x36\xec\x08\x4c\xaa\x54\x2a\x0f\x54\xab\xd5\xd4\xe9\x92\x22\x72\x01\xf0\x65\x5a\xff\xf8\x86\x01\x3b\x57\xab\xd5\x68\x0e\x8e\x4a\xa5\xb2\x00\xfb\x42\x37\x06\xfe\x0e\xff\x96\x72\x03\xd6\xf0\xeb\x7a\xec\x51\xfb\x79\x55\xd5\x6a\xb5\xea\xdd\x01\x88\xc8\x5e\x58\x9d\x8f\xbc\xb5\xbd\x86\x03\x1f\xad\x54\x2a\xf7\x55\xab\xd5\x27\xd3\x9c\xe0\xfd\x12\x9d\xa1\xfd\x2e\xc2\x94\xd4\xdd\x80\xf9\x8c\xbf\x96\x22\xbf\xe8\x2c\xb2\x59\x77\x4e\x50\xd5\x2b\x8a\x5c\x5c\x1a\xdc\x23\x75\x3b\x2c\x8f\x6a\x14\xb6\xd0\x5b\x05\xac\x4c\x63\xac\x70\xe7\x9f\x8e\x65\x64\x84\xa8\x88\xff\x32\x30\x36\x59\xf9\xcf\x47\x83\x82\x45\x64\x27\xe0\x41\xec\x8f\x09\xc9\x52\xe0\x60\x57\x06\xa1\x01\x11\xf9\x38\x35\x81\x71\x29\x59\x03\x1c\xd8\xa4\x48\xda\x80\xc0\x25\xc1\xdf\x4c\x98\x45\x5b\x2d\x4f\x63\x95\x02\x9e\x69\x75\x50\xdd\x3b\x4e\x44\x36\x03\x6e\x20\xbc\x72\xc1\x7a\xf7\x7d\xd9\xf7\x81\x6b\x2e\x35\x2d\x87\xcc\x91\x58\x2f\x87\xfd\x8b\x5c\x58\x64\x4e\x21\xbc\x72\xc1\x3a\xbf\xcc\x76\x55\xee\x9b\x92\x7c\xaf\x5c\x84\x05\xa0\xc5\xc2\xd7\x24\x03\xec\x4b\xd8\x2e\xa7\xcc\xd1\xc0\x9d\x22\x32\x5e\x55\x6f\xcb\x7a\xb2\xdb\xd2\x1d\x85\x39\x33\x5e\xc0\xee\xb6\x5b\x54\x35\x54\xb1\xee\x98\x01\x03\xef\x02\xbe\x43\x0b\x0f\x5e\xbf\x82\xdd\x8a\x39\x44\x59\xde\x56\x34\x6c\x1b\x44\x64\x34\xf6\x7e\x2a\xc2\x26\x98\xa5\x2c\x93\x82\x45\xe4\xbd\xd8\x6a\xbd\xf6\x0e\x3b\x16\x58\x2f\x22\x0f\x61\x15\xfb\x7e\x85\x55\x11\x58\x89\xbd\xfb\x5e\xc5\x5e\x6d\x5b\x63\x29\x27\xbb\x60\x3f\xce\x67\x80\x6b\x93\x66\x48\xe0\x3e\xfc\x05\x4e\x43\x71\x92\x88\xdc\xe1\xa2\x6a\x1a\xd8\x08\x40\x44\x76\xc4\xee\xde\xd8\xf8\xca\xf2\x4e\x26\x4c\x33\x2d\x6f\x41\x70\xb7\xc0\x19\x85\xe5\x18\x6f\x83\x39\xf2\xdf\x83\xa5\xb6\x8e\x69\x22\x6b\x38\xf0\x4e\xf7\x2f\x0b\x87\x63\x8d\x29\x6b\x99\x0d\xfc\x80\x38\xed\x86\xfa\xf8\x91\x88\x2c\x52\xd5\x86\x62\xec\x3d\xee\x11\x75\x29\x56\x06\x28\x26\xf7\x26\xcb\x22\x39\x67\x44\xa8\x30\xd1\x86\x3d\xb3\x33\x37\xae\xc4\x56\xbc\xab\x31\x8b\xd8\xad\x58\xc0\x40\x33\xe5\x16\xe1\x08\x11\xa9\xcb\x3e\x74\x26\xd5\xcc\xaf\x8e\x8c\x6c\x05\x5c\xe8\xfb\xa0\x07\x73\xe7\x45\xb5\x0a\x39\x66\x7b\xc6\x0e\x20\x5c\x1d\x8c\xad\x3d\x63\x63\xc8\xff\x6e\xcf\xcb\xc7\x3d\x63\xbe\xbf\x3d\x34\x13\x44\xe4\x88\xe4\x60\x0f\xe5\x85\xbc\xde\xe9\x19\xf3\x7d\x19\x79\xd9\xdc\xb3\xa2\x8c\xea\x90\x68\x82\xcf\x4e\x1e\x34\x5b\xa1\x05\x0d\x6b\x99\x1e\xe2\xd4\x5c\x4e\xf2\x3c\x56\x90\xa4\x1f\xf7\x6e\x0c\x9d\xad\x97\x74\xce\x77\x22\x20\x5f\x9c\xf7\xab\x1f\x57\xf8\xac\x8c\xca\x76\xfb\x24\x07\x7a\x08\x53\x5c\xb3\x1d\xf7\x79\x5c\x88\xef\x20\xfc\x7e\xfb\x2d\xb5\xff\x71\x65\x88\x5b\x1a\x02\x22\xe1\xf3\xfc\x64\xce\x9b\x0a\x41\x0f\x9e\xad\x4b\x04\x7c\x26\xb5\x18\x9b\x7f\xdf\xd3\xa8\x8c\xbf\x2f\x89\xaf\x58\x6a\x5b\xb3\x62\x00\x1a\x2a\xed\xf7\x60\xa9\x92\xb1\xcb\xfa\xf8\xfe\xb8\x18\xd6\x27\x9f\x4c\x5f\x9f\xa5\xd8\x34\x3c\x2a\x31\x4f\x53\x6c\x1a\x22\x46\x7a\x54\x75\x3e\xd6\x12\x2e\x66\x88\xa8\xaf\xbb\xc8\xbf\x44\x98\x67\x7f\x4f\x09\x84\x39\x94\x13\x8c\x5f\x8b\xaf\x50\x4b\xec\x16\x3a\xe7\xab\x6a\x83\x77\xad\x07\xfa\x63\x99\xc7\x60\xf9\x31\xc1\x13\xa0\x48\xbc\x07\x5d\x52\x57\x8c\xa2\x2d\x23\x49\x54\x6a\x77\xce\x8d\x9f\x45\x98\xab\x15\x9b\x25\x17\x5a\x58\x7d\xac\xd0\xac\xc7\x22\x62\x0e\x52\xd5\xd3\x7c\x07\xf4\x1b\x07\x54\x75\xb9\xaa\x4e\xc5\xbe\xf8\xf1\xc0\x95\x84\x29\xcb\xff\x3a\x8d\xb1\x4d\xbe\xa0\xbd\x50\xf8\xc2\x74\x43\x07\xe2\xa7\xa1\xce\xee\xee\x5c\xa5\x21\x2a\x22\xf4\x62\xc9\x6a\xff\x05\xbc\x59\x55\xc7\xab\xea\xbc\x66\x07\x37\x38\xb1\x9d\x7f\x73\x2e\x30\xd7\xc5\xea\xee\x87\x19\x42\xfa\xda\xd8\x8c\xc8\x78\x41\xea\x59\x41\xc7\x2c\xdc\x32\x5e\x44\xb6\xaf\x75\xa3\xa9\xea\x12\x11\xf9\x31\x66\x67\x2e\x8b\xe4\x1d\x0c\x16\x1c\x90\x67\xe7\xf0\x34\xe6\x9f\xbf\x03\xb8\x5d\x55\x9f\x4d\x7b\x62\xcb\xc0\x77\xf7\xab\x5b\xe0\xfe\x7d\xc5\x19\x12\xf6\xc2\x3c\x4e\x6f\xc3\xaa\xb9\xef\x82\xed\x3f\x7d\xb6\xd6\xd5\xc0\x7f\x7b\xc6\x43\x84\xa2\x36\x63\x23\xcc\x3b\xf5\x85\xc4\xf8\xa9\x58\x3d\x0e\x9f\xc5\x2b\x06\x3e\xdb\xf8\xd9\xc0\x8d\xc0\xa6\x4d\xce\xf9\x2b\x66\x4e\x7d\x14\xb3\x1b\x2c\x03\x1e\x28\x52\x40\x3c\x64\x29\xc3\x2d\xb0\xa8\xc7\x51\x58\x09\xfb\x61\xd8\xdd\xfb\x92\xe7\xd8\xa9\xe4\xf3\xff\xa6\xe5\xaf\xc0\x0e\xaa\x5a\xf7\x8a\x11\x91\x03\xb0\x7e\x09\x65\x34\x7f\xfe\xac\xaa\x36\x94\x39\x16\x6b\x41\xbf\x2f\xf6\xfd\xac\xc3\x52\x61\x5f\x00\xaa\x31\x42\x81\x83\xb5\xa6\x71\xfe\xd3\xb4\x3e\xd4\xbc\x71\x5e\x69\xd9\x1c\xf3\x18\xd5\x6d\x91\x54\xf5\x6e\x17\x6b\x76\x0b\xd9\x5f\x35\x59\xf1\x7a\x8f\x9c\xc7\x27\x48\x5a\x4a\x1a\x3a\x55\xa1\xae\x8c\xb4\x14\x6f\xe3\x47\xb7\x20\x99\x40\xfc\xee\xdb\xb1\x7f\x40\xa9\xe8\x94\x82\x63\xee\x4b\x7b\x81\xaf\xaa\x6a\xd3\x7d\xa7\x8b\xfc\x18\x8b\x2d\x5e\x62\x11\xbd\x7d\x7b\x1a\x3a\xa5\xe0\x55\xed\x0f\xc9\x45\x15\x4b\x82\xf3\x15\x32\xab\x43\x55\x1f\xc6\xec\xe1\x21\xdb\xf0\xd5\x32\x10\xea\x87\x75\x4c\xc1\x31\xda\xc0\x5f\x8d\x05\xc3\xa7\xee\x2f\xe8\xde\x87\xef\x07\xbe\x4e\x78\x73\x6d\x27\x5c\x95\x0d\xc4\xec\xff\xd7\x8a\x90\x7d\x83\x1e\x05\x3e\xa7\xaa\xde\x32\xfb\x2e\x6a\x64\x7f\x6c\x61\x77\x8f\x26\xfa\x27\xb8\x18\xaa\x33\x45\xe4\x26\x2c\x6c\xc9\x67\x47\xce\x43\x69\xbd\x91\x5a\xd1\xa9\x3b\x78\x05\xd6\x05\xad\x08\xcf\x62\xfb\x5d\x69\xa1\xdc\x9d\x30\x37\xdd\x7c\x60\x1e\xf0\x90\x88\xec\xe1\x3b\x56\x55\x1f\xc2\x62\xb0\xa6\x38\xd9\x45\x89\x5d\xe2\x29\x15\x1d\x6b\x8c\xe5\xee\x98\x3c\x2d\x62\x9f\xc0\x12\xb7\x2e\x69\x95\x1c\xed\x9a\x67\x5c\x49\x63\x46\xe4\x6a\x2c\x31\xee\xda\x16\xe7\x8e\xc4\x12\xe4\x4e\xc7\x6f\x91\x6a\xc7\x83\xaa\x1a\xb2\xf5\x7c\x6e\x3a\xa9\xe0\x3d\xb1\x52\x84\x69\xb6\x13\x6b\xb1\x78\xe5\x4b\x81\xdb\x5a\xd5\x94\x72\x61\xb8\xe7\xd0\xbe\xda\xcf\x15\xc0\xa9\xad\xaa\xcb\x39\x53\xed\x78\xac\x85\xce\x21\xa4\xfb\xbe\x36\x60\xc6\xff\xbb\x53\x1c\x1b\x9d\x8e\xb6\xb6\x13\x91\x71\x58\xaa\x69\xc5\xf3\xf1\x0b\x58\x34\xe2\xcf\x81\xb9\x3e\x8b\x98\x47\xde\x04\xcc\x23\x96\xd6\xd6\xfd\x1c\x66\xb4\x9f\xd5\xae\x64\x84\xf3\x0e\x1d\x86\x3d\x75\xc6\x51\xdf\x33\xa9\x8f\x97\x81\x4f\xb6\x7a\x3a\x94\x4d\xc7\x7b\x17\x3a\x13\xe7\x91\x58\x03\xc7\xf5\x58\x45\xf6\x07\xb0\x66\x58\xa9\x56\xb6\x2e\x59\xee\x5b\x78\x5a\xc2\xa6\x64\x11\x56\x62\xe1\xae\x94\xf3\x0d\xc7\xe2\xab\xf7\xc5\x6a\x78\x8c\xc4\xae\xfb\x9a\x66\xb9\x57\x9d\xa2\xe3\x0a\xce\x8b\x8b\xe7\x1e\x87\xdd\x81\xbe\x6e\xdd\x79\x98\x87\xb5\xc9\xbb\x39\x56\x69\xc1\xb2\xe9\x4a\x05\x8b\xc8\x44\xcc\x33\xf3\xd6\x48\x53\x2c\xc7\xee\xe8\xb2\x03\x05\x82\xd3\x75\x0a\x16\x91\x7d\xb0\x9c\xa1\xd8\x5b\xbc\x5e\x2c\x3d\xb3\xac\x66\xd4\x51\xe8\xc6\xee\xa3\xe3\x28\xe7\xba\xfb\x5a\xf4\x75\x35\xdd\xa8\xe0\x86\xb6\xef\x11\x19\x10\xc6\x8a\x22\x74\xa3\x82\xe7\x62\x29\x9c\xb1\xf9\x0b\xd9\xba\x8c\x0e\x48\xba\x4e\xc1\x2e\xb0\xc0\x9b\x0b\x1b\x98\xeb\x62\xb6\x0b\x28\x8b\xae\x53\xb0\x63\x7a\x09\x73\x5c\x52\xc2\x1c\xd1\xe9\x56\x05\xcf\xc7\x22\x14\x63\xb1\x64\x20\x17\x76\xc9\x42\x57\x2a\xd8\x99\x15\x1b\x02\xda\x02\xf2\x9d\x88\xb2\x4b\xa5\x2b\x15\xec\x98\x41\x18\xb7\x5e\x92\x15\xf8\x4b\x4d\x74\x25\x5d\xab\x60\x17\xa0\xff\xcd\x08\xa2\xcf\x4b\x06\x05\x74\x33\x5d\xab\x60\xc7\x74\xc2\x26\x79\x3f\x8e\xb9\x24\x07\x0d\xb1\xe3\x93\xa3\x52\xad\x56\x5f\xaf\x54\x2a\x2f\x51\x5f\x29\xbd\x08\x53\x3a\xd5\x1f\x22\x16\xdd\x7e\x07\x83\xbd\x8b\x1f\x0c\x20\x67\x01\x56\xb5\x7e\x50\xd1\x75\xce\x06\x1f\xce\x1f\x7c\x3f\xf9\xff\x9e\xf5\xc0\xde\x69\x8a\x7b\x76\x1b\x5d\xfd\x88\xee\xa3\x5a\xad\x3e\x5d\xa9\x54\xb6\xc2\xdf\xcd\x3b\x0d\xe7\xa9\xea\xa0\x59\x39\xd7\x32\x18\x1e\xd1\x7d\x7c\x89\xfa\x4e\xde\x69\xf9\x35\xf0\x3f\x81\xaf\x65\xc0\x30\x68\x14\xec\xfa\x36\x1d\x83\x25\x9c\xa7\x65\x2d\x70\x8c\xaa\x16\x0d\xe1\x1d\xb0\x0c\x8a\x47\x74\x1f\xd5\x6a\x75\x65\xa5\x52\x59\x8f\x25\xab\xa7\xe1\x73\x59\x7b\x20\x74\x1b\x83\xe6\x0e\xae\xe1\x5c\xcc\xa5\xd8\x8e\xab\x54\x35\x4a\xcf\xde\x81\xc4\xa0\x53\xb0\xb3\x53\x7f\x82\xd6\xdd\x43\x97\x62\xb1\xce\x83\x9e\x41\xa7\x60\x00\x97\xd9\x3f\x16\x8b\x92\x4c\x72\x13\xf0\x81\x92\x3a\x98\x76\x9c\x41\xb1\x0f\x6e\x85\xeb\x74\xd2\x57\xf7\x79\xe1\x40\x6a\x9d\x37\xc4\x10\x43\x0c\x31\xc4\x10\x43\x0c\x5e\xfe\x1f\xe0\xcb\x5a\x6a\xa5\xea\x90\xc3\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xb2\xf3\xb0\x85\x70\x11\x00\x00")

func sourcedataShapesShape10ShapePngBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataShapesShape10ShapePng,
		"sourcedata/shapes/shape-10/shape.png",
	)
}

func sourcedataShapesShape10ShapePng() (*asset, error) {
	bytes, err := sourcedataShapesShape10ShapePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/shapes/shape-10/shape.png", size: 4464, mode: os.FileMode(420), modTime: time.Unix(1715607023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/shapes/shape-10/shape.png": sourcedataShapesShape10ShapePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"shapes": &bintree{nil, map[string]*bintree{
			"shape-10": &bintree{nil, map[string]*bintree{
				"shape.png": &bintree{sourcedataShapesShape10ShapePng, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
