// Code generated for package shape_11 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/shapes/shape-11/shape.png
package shape_11

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataShapesShape11ShapePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x9a\x0b\x65\xf4\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x74\x00\x00\x00\x74\x08\x06\x00\x00\x00\x54\x9a\x16\x27\x00\x00\x0b\x61\x49\x44\x41\x54\x78\x9c\xed\x9d\x69\xac\x9d\x45\x19\xc7\x7f\xf7\xb0\x53\x68\x0a\xc2\x61\x31\x45\xb0\x7e\x40\x7c\x4a\x0b\x94\x28\xd6\x22\x9b\x41\x91\x42\x4b\xc2\x12\x16\x13\x53\xd4\x18\x54\xdc\x2a\x4b\x24\xa0\x08\xa5\x16\x6c\x62\x44\x34\x52\x57\x28\x9b\x16\x0a\x05\x21\x6d\x64\x29\x94\xa0\x6c\xad\xff\x20\x89\x96\x5a\xa9\x2c\x07\x28\x0d\x6d\xb9\x20\xa5\xc7\x0f\x33\x6d\x6f\x6f\xdb\x7b\xcf\x99\x99\xf7\x9d\xf3\xb6\xe7\x97\xf4\x43\x73\xcf\x3c\xcf\xcc\xf9\x9f\x77\x99\x99\xe7\x79\xa6\x87\xad\x0c\x33\xdb\x1d\x38\x15\x38\x01\x38\x0c\x18\x01\x0c\xf1\x7f\x5e\x0d\x2c\x06\x9e\x01\xe6\x01\xb3\x25\xad\xcc\xd1\xcf\xa2\xe8\xc9\xdd\x81\x54\x98\xd9\x7e\xc0\xa5\xc0\x24\x60\x97\x16\x9b\xf5\x02\x33\x80\xab\x25\xbd\x5c\x54\xdf\xca\x64\xab\x10\xd4\xcc\xbe\x02\x4c\x03\x76\x0f\x34\xb1\x12\x98\x2c\xe9\x97\xe9\x7a\x95\x87\x4a\x0b\x6a\x66\x3b\xe2\xae\xb0\x73\x13\x99\xbc\x09\x98\x24\xe9\x7f\x89\xec\x95\x4e\x65\x05\x35\xb3\xed\x80\x3b\x80\x89\x89\x4d\xdf\x09\x9c\x2e\xe9\xfd\xc4\x76\x4b\xa1\x96\xbb\x03\x11\x4c\x21\xbd\x98\x78\x9b\x53\x0a\xb0\x5b\x0a\x95\xbc\x42\xcd\xec\x68\xe0\xe1\x82\xdd\x7c\x5a\xd2\x23\x05\xfb\x48\x4e\xe5\x04\x35\xb3\x1e\x60\x11\x60\x05\xbb\x12\x70\xa8\xa4\x66\xc1\x7e\x92\x52\xc5\x5b\xee\x78\x8a\x17\x13\xef\x63\x7c\x09\x7e\x92\x52\x45\x41\x27\x6d\xa5\xbe\x92\x50\xa9\x5b\xae\x99\xed\x0c\xac\x00\x76\x2a\xc9\xe5\xbb\xc0\x30\x49\xef\x94\xe4\x2f\x9a\xaa\x5d\xa1\x63\x28\x4f\x4c\xbc\xaf\x31\x25\xfa\x8b\xa6\x6a\x82\x1e\xbc\x8d\xf8\x0c\x66\xfb\xa2\x0c\x9b\xd9\xc1\xc0\x04\x60\x1c\xee\x4b\xd9\x0b\xd8\x19\x78\x0b\x58\x02\x3c\x09\xdc\x0f\xdc\xdf\xc6\xca\xcc\x7e\x05\x74\x35\x99\x4f\x3f\xe6\xf1\xc0\x58\xdc\x98\xf7\x05\x76\x03\x56\x01\xaf\x01\xcf\x03\x8f\x00\xb7\x4b\x5a\x9a\xbe\xab\x05\x3c\x43\xcd\xec\x73\xc0\x65\xc0\x51\x2d\x36\x79\x1d\xb8\x0e\xf8\xa9\xa4\xb7\x07\xb1\x3d\x15\xf8\x5e\x5c\x0f\xdb\xe6\x5a\x49\x93\x07\xfa\x80\x99\x4d\x04\x2e\x02\x3e\xde\xa2\xcd\x26\x70\x3b\x70\x85\xa4\xe7\x23\xfb\xb7\x11\xc9\x6e\xb9\x66\xb6\xbf\x99\xcd\x01\xee\xa3\x75\x31\xc1\x5d\xb9\x53\x00\x99\xd9\xd8\x41\x3e\xbb\x73\x68\xff\x22\x38\x74\x4b\x7f\x30\xb3\x11\x66\xf6\x10\x30\x8b\xd6\xc5\x04\x77\x21\x9d\x09\x3c\x6b\x66\xdf\x8e\xeb\xde\xa6\x86\xa3\x31\xb3\x4f\x02\x77\x01\x7b\x47\x9a\x7a\x0f\xf8\xa2\xa4\x9b\xb7\xe0\x67\x01\xed\xfd\x58\x52\xd0\xc4\x2d\x30\xa8\x5f\x5f\x4e\x02\x6e\x01\x86\x26\xf0\x91\x6c\x53\x20\x5a\x50\x33\x3b\x0e\x98\x43\xeb\x7b\x90\x83\xb1\x16\xb8\x12\x98\x2a\xa9\xd7\xfb\xd8\x1e\xf8\x21\x70\x49\x22\x1f\xed\xb2\x18\x38\x43\xd2\xd3\x66\x56\x03\x2e\x00\xa6\x03\xdb\x25\xf4\x71\x37\x70\x5a\xec\xa6\x40\x94\xa0\x66\x36\x12\x78\x94\x34\xbf\xd2\xfe\xbc\x86\xbb\xea\xdf\x00\xce\x00\x3e\x5c\x80\x8f\x76\x79\x15\xd8\x01\xd8\xb3\x20\xfb\xbf\x96\x14\xb5\x98\x11\x2c\xa8\x99\xed\x82\x7b\x53\x3d\x24\xa6\x03\x5d\x36\xe1\x1c\x49\x33\x43\x1b\xc7\xbc\x14\x5d\x44\x57\xcc\x22\xb8\xce\x5f\x2c\x41\x04\x09\x6a\x66\x7b\x02\xdf\x0d\x75\xda\x65\x40\xf6\x05\xce\x0e\x6d\x1c\x7a\x85\x4e\x62\x43\x24\x5d\x97\xf4\x7c\x21\xb4\x61\xa8\xa0\x67\x86\x3a\xec\xd2\x12\x63\xcd\x2c\xe8\x45\xb3\x6d\x41\xfd\xed\xf6\xf0\x10\x67\x5d\x5a\x66\x3b\xe0\x88\x90\x86\x21\x57\xe8\x48\x2a\xb6\xed\x56\x51\x82\x36\x05\x42\x04\x1d\x1e\xe2\xa8\x4b\xdb\xec\x13\xd2\x28\x44\xd0\xc2\x76\x68\xba\x6c\xc4\xb0\x90\x46\x21\x82\x56\x36\x08\xb9\x62\x04\x45\x49\x84\x08\xfa\x52\x88\xa3\x2e\x6d\xb3\x22\xa4\x51\x88\xa0\xcf\xe2\x76\x20\xba\x14\xcb\xe2\x90\x46\x6d\x0b\x2a\x69\x05\xf0\x54\x88\xb3\x2e\x6d\xf1\x6c\x48\xa3\xd0\x17\x9c\xdf\xd3\xb9\xc1\x53\x4b\x71\xf9\x9f\xcf\x03\x2f\x00\x6f\xe2\xb2\xcb\xc0\x85\x83\xec\x81\xdb\xb9\x39\x18\x18\x0d\x1c\x94\xa1\x8f\x83\xb1\x4c\xd2\x3f\x43\x1a\x86\x0a\xfa\x5b\xe0\x72\xe0\x03\x81\xed\x53\xd2\xc4\xa5\x45\xdc\x02\xcc\x93\xf4\x42\x3b\x8d\xcd\xec\x40\xe0\x33\xc0\x59\xc0\xb1\x74\xc6\x1c\xfb\x4f\xa1\x0d\x63\xb6\xcf\xbe\x0a\xfc\x3c\xb4\x7d\x02\x56\x03\x3f\x03\x6e\x48\x15\x70\x65\x66\xc3\x71\x9b\xd7\x5f\x23\xef\x5a\xf5\x21\x92\xfe\x11\xd2\x30\x46\xd0\x1e\xe0\x01\xdc\xaf\xbb\x4c\xd6\xe0\xa2\x05\xa6\x4a\x7a\xa3\x08\x07\x7e\x79\xf3\x62\xe0\x5b\x94\x3f\xef\x9e\x29\xe9\x9c\xd0\xc6\xb1\x11\x0b\xc3\x80\xf9\x94\x93\x6b\x02\xb0\x00\xf8\x92\xa4\xe7\xca\x70\x66\x66\x87\x00\x37\x52\x5e\x1c\xd3\x72\x60\xa4\xa4\xe0\xa9\x61\x54\xd4\x9f\x7f\xe3\x3d\x0e\xf7\x12\x52\x24\x4d\xe0\x2a\xe0\xe8\xb2\xc4\x04\xf0\xbe\x8e\x06\xa6\x52\xfc\x54\x6d\x0d\x70\x76\x8c\x98\x90\x2e\xea\x6f\x04\xf0\xaf\x14\xb6\x36\x43\x2f\x6e\xa0\x77\x15\x64\xbf\x25\xcc\x6c\x02\x30\x93\x74\xc1\x70\xfd\xf9\xb2\xa4\x5f\xc5\x1a\x49\xf6\x46\x67\x66\xcb\x80\x0f\xa6\xb2\xe7\x79\x0b\x38\x59\xd2\xfc\xc4\x76\x83\x30\xb3\x71\xb8\x08\xc7\xd4\x41\x71\x4f\x4b\x0a\xda\x2e\xeb\x4f\xca\xdc\x96\x1d\x13\xda\x02\x77\x65\x76\x8c\x98\x00\xbe\x2f\x27\xe3\xfa\x96\x92\x79\xa9\x0c\x25\x11\xd4\xcc\x0e\x27\x3e\xc8\xba\x2f\x4d\xdc\x6d\xb6\x63\xc4\x5c\x87\xef\xd3\xd9\xa4\x7d\xa6\x26\xbb\x8d\x47\x0b\x6a\x66\x86\xcb\xd3\x48\xc9\xd5\xb9\x9f\x99\x03\xe1\xfb\xf6\xe3\x84\x26\x27\xf8\x12\x3d\xd1\xb4\xfc\x0c\xf5\xc9\xb6\x63\x70\x4b\x66\xfb\xe1\x8a\x3c\x8d\xc2\xcd\x43\x53\xae\xae\x2c\xc0\xbd\xcd\x76\x74\x59\x19\x1f\xcd\xff\x08\xe9\xa6\x34\xcb\x81\xc7\x70\xcb\x95\xef\xe2\x32\xd6\x5e\xc6\x2d\x61\x3e\xd9\x6a\xd2\xf1\x80\x42\xf8\xc5\x83\xf1\xb8\x28\xbf\x13\x29\x3e\xd9\x76\x0d\x30\xaa\xcc\xa9\x49\x0c\x7e\x9e\xba\x90\xe2\x17\x1f\xde\xc5\x2d\xe2\xcc\x00\xee\x19\xa8\x90\xc7\x16\x6f\xb9\xbe\x74\xcc\x22\x60\x36\x70\x0a\xe5\x64\x4e\x4f\xaf\x8a\x98\xb0\x7e\x9e\x3a\xbd\x04\x57\x3b\xe1\x34\x98\x0d\x2c\xf2\xda\x6c\x96\x4d\xae\x50\x5f\xa1\x6b\x0a\x30\x60\x4e\x64\x01\xac\x06\x3e\x54\xd4\x72\x5e\x51\xf8\x65\xc2\xff\x50\xfe\xda\xef\x34\xe0\x92\xfe\x8f\xa6\x8d\xb2\xa7\xfc\x83\xf9\x76\xf2\x54\xff\x98\x2e\xe9\x9e\x0c\x7e\xa3\x68\x34\x1a\xbd\xf5\x7a\x7d\x28\xf0\xa9\x92\x5d\x8f\x05\x46\xd6\xeb\xf5\x3b\x1b\x8d\xc6\x7a\x51\xfb\xdf\x72\x67\x50\x4c\xb9\xb5\xc1\x68\x02\x37\x64\xf0\x9b\x8a\xeb\xc9\x13\xc5\x31\x11\xa7\xd9\x7a\xd6\x0b\xea\x4b\x94\xa6\xaa\x6a\xd9\x2e\x0f\x17\x55\x73\xa0\x0c\x24\xbd\x08\x3c\x98\xc9\xfd\xb9\x5e\x3b\xc0\x0b\xea\x8b\x07\x4f\xcb\xd4\x21\x70\x9b\xd3\x55\xe7\xd6\x8c\xbe\xa7\x79\x0d\xd7\x5f\xa1\x97\x12\x5e\x3c\x38\x05\xc9\x96\xbe\x32\x32\x37\xa3\xef\xdd\x71\x1a\xd2\xe3\x6b\xb4\xbf\x4a\x71\xbb\x08\x83\xb1\x54\xd2\x81\x99\x7c\x27\xc5\xcc\x5e\x20\x5f\x8c\x52\x2f\xb0\x4f\x0d\x57\x70\x3f\x97\x98\x50\xfc\x5e\x6a\x99\x04\x45\xea\x25\x62\x17\xe0\xd4\x1a\xee\xf4\x84\x9c\x24\xad\xd3\x93\x99\xdc\x63\x39\xa1\x86\x3b\x0a\x23\x27\x6d\x45\xe9\x75\x38\xb9\xc7\x72\x58\x0d\x77\xae\x49\x4e\xde\xcc\xec\x3f\x25\xb9\xc7\x32\xa2\x46\xfe\xd4\xfa\xad\xe9\x20\x9c\x55\x99\xfd\x0f\xa9\x5a\x35\xce\x2e\x83\x50\xc3\x2d\x8a\xe7\x64\xb7\xcc\xfe\x53\x92\x7b\x2c\xab\x6b\x04\x66\x39\x25\x64\x8f\xcc\xfe\x53\x92\x7b\x2c\x8b\x6b\xe4\x9f\x07\x76\x42\xc9\xb7\x54\xe4\x1e\xcb\x33\x35\xf2\x2f\xbb\x55\xaa\x62\xf4\x20\xe4\x1e\xcb\xbc\x1a\x6e\x17\x3c\x75\x58\x62\x3b\x8c\xce\xe8\x3b\x35\x39\xc7\xd2\x0b\xcc\xae\xf9\xf3\x33\x67\x0c\xf6\xe9\x02\x39\xc8\xa7\xf4\x55\x1a\x3f\x86\x9c\xb9\xa6\x33\x24\xad\x5c\x37\x6d\xb9\x9a\xbc\xf3\xc1\xb2\x33\xd8\x8a\x20\xe7\x18\x56\xe2\x34\x74\xdb\x67\xfe\x30\xd4\xb2\x63\x88\xfa\x72\x56\x46\xdf\xa9\xc8\x39\x86\xc9\xeb\x0e\xb4\xdd\x28\x48\xcc\xcc\xfe\x40\x9e\xa8\x85\x26\x2e\x40\xec\xc5\x0c\xbe\xa3\xf1\x89\xc2\x4b\xc9\x93\xfd\x7d\x93\xa4\xf3\xd6\xfd\xa7\xff\x4a\xd1\x24\xdc\xf9\x99\x65\xd3\x83\xcb\x9c\xae\x2a\x17\x90\x47\xcc\x3b\xe9\x17\xd0\xd7\x69\x61\x9c\x07\x48\x5a\x5e\xb2\xdf\x28\x3a\x3a\x8c\x13\xa0\xd1\x68\x34\x1b\x8d\xc6\xdc\x7a\xbd\xfe\x20\x70\x24\x50\x2f\xa9\x83\x3b\x02\xb5\x46\xa3\x91\x33\x94\xa3\x6d\xea\xf5\xfa\x0f\x80\x63\x4a\x74\x29\xdc\x09\xc4\x37\x36\x1a\x8d\x4d\x22\x0d\xbb\xa9\x10\x11\x74\x62\x2a\x44\x4c\xb2\xd2\x6e\xc0\xae\xb8\xba\xae\x29\x6b\x10\x3c\x8e\x4b\x56\x5a\x93\xd0\x66\x72\x0a\x48\x56\x02\xf7\x72\x38\x17\xf7\x23\x59\x49\xea\x64\xa5\x56\x31\xb3\xf3\x81\xe8\x74\xf2\x3e\x4c\x95\x74\x71\x42\x7b\xc9\x31\xb3\x6b\x70\x07\x29\xa4\x62\x31\x30\xa1\xff\x81\x3f\xed\x92\x32\x25\x7f\x0e\xf0\xf9\x44\xe6\x9a\xb8\x43\x69\x3a\x32\x47\xd4\xd7\x5b\x98\x45\xda\x37\xdb\xd1\x92\x16\xc6\x1a\x49\xb9\xc1\x1d\xdd\x99\x3e\xf4\x00\x33\x7d\x4d\x83\x8e\xc2\xf7\x69\x26\x69\xc5\x5c\x96\x42\x4c\x48\x2b\xe8\x01\x09\x6d\x81\x0b\x4b\x9c\xd3\x49\xa2\xf6\x29\x9a\x91\x3a\xec\x75\xa8\x99\xed\x90\xc2\x50\xaa\x1a\x0b\xc3\x81\xd3\x52\xd8\xea\xc7\x50\xe0\x01\x7f\x8b\xcb\x8a\xef\xc3\x03\x14\x73\x2c\xd8\x50\xe0\xeb\x29\x0c\xa5\x38\xcc\x6e\x6f\xdc\x40\x8b\x0c\x07\x6d\xe2\x6a\x1a\x7c\xbf\xec\xb7\x5f\xff\x36\xfb\x23\xdc\xb9\xa5\x45\xae\x06\xbd\x0f\x9c\x2a\xe9\xde\x18\x23\xb1\xa5\xe1\x86\xe0\xea\x02\x8c\x8a\xb1\xd3\x06\x8f\x03\xe7\x6f\xc5\xa5\xe1\x56\x01\x87\x49\x0a\x2e\xe2\x15\x2b\xe8\xef\x88\x38\x05\x28\x90\x75\xc5\x1b\xaf\x29\x6a\x99\x30\x73\xf1\xc6\xc7\x80\x71\x03\x2d\x1e\x0c\x44\x4c\x35\xce\x63\xc8\x97\x13\x09\x1b\xca\xab\x5e\x9f\x6a\x97\xa6\x83\xca\xab\x9e\x25\xe9\xb6\x90\x86\x31\x82\x3e\x48\xb9\x6b\x98\x5b\xa2\x89\xfb\x61\xdd\x0a\xcc\x95\xf4\xef\x76\x1a\x77\x68\x01\xe4\x45\x92\x82\x1e\x63\x41\x9d\x37\xb3\x8f\x00\x41\x25\xb4\x4b\x60\x09\x2e\x0b\xac\x6f\x89\xf2\x75\x11\xed\x55\x29\x51\x0e\x70\xa4\xa4\x27\xdb\x6d\x14\xfa\x7c\xc8\x3e\x8d\x18\x80\x83\xe8\x5c\x91\xda\x61\x02\xee\xc0\xdd\xb6\x08\x9d\x87\x96\x5d\xf1\x63\x5b\x64\x6c\x48\xa3\x50\x41\x73\xc7\x9f\x6e\x0b\x94\x76\x98\x1d\xb8\x53\x68\xbb\x14\x4b\xd0\x77\x1c\x2a\x68\xee\xa4\x9c\x6d\x82\x90\xb3\xb8\x43\x05\xcd\x9d\x07\xb9\x2d\xd0\x94\xd4\x76\x46\x43\xa8\xa0\xaf\x04\xb6\xeb\xd2\x3a\x41\x87\x09\x84\x0a\xfa\xf7\xc0\x76\x5d\x5a\x27\x68\xbd\x3a\x54\xd0\x87\x03\xdb\x75\x69\x9d\x47\x43\x1a\x85\x0a\x3a\x0b\xb7\xdd\xd3\xa5\x38\x82\x02\xde\x83\x04\xf5\x87\xc5\xa4\xae\x33\xdf\x65\x03\x4f\x48\x0a\x7a\xac\xc5\x44\x2c\x5c\x0e\xbc\x17\xd1\xbe\xcb\x96\xb9\x2a\xb4\xe1\x26\x91\xf3\xad\xd2\x68\x34\x96\xd7\xeb\xf5\x35\xc0\xf1\xa1\x36\xba\x6c\x96\xb9\x92\x2e\x0b\x6d\x1c\x2c\x28\x40\xbd\x5e\x5f\x00\x8c\x04\x3e\x1a\x63\x67\x00\x56\xe3\x82\x8d\x87\x10\xd9\xd7\x04\xbc\x04\xfc\x06\x77\x78\xdf\x10\x8a\x59\x2d\x7b\x03\x38\xa9\xd1\x68\xbc\x15\x6a\x20\xf6\x30\xbb\xb5\xb8\xf4\xc3\xd4\x1b\xdd\x6b\x71\x41\x53\xc3\x7c\xa5\xce\x61\xb8\x04\xaa\x5c\x2c\x04\x3e\x26\xe9\x42\x49\x93\x25\x8d\x06\x2e\xc4\xf5\x33\x15\xbd\xc0\xc4\xd8\xcd\xfa\x54\x91\xf3\xbb\xe2\xc2\x1b\x8f\x4d\x60\x6e\x15\x6e\xc7\x7e\x93\x60\x29\x33\x9b\x45\x9e\x12\xea\xc7\x4b\xfa\xcb\x66\xfa\x73\x0e\xee\xaa\x8d\x0d\xc1\x7c\x0d\x17\x35\xbf\x20\xd2\x4e\x9a\x30\x4e\x49\x6f\x03\x27\x01\xd7\x12\x37\x9d\x59\x00\x1c\x3e\x40\xe4\xdb\x4f\x22\x6c\xc7\xb0\xd9\x2f\x5a\xd2\xcd\xb8\x1f\xf1\x92\x08\xdb\xf7\xe2\xa2\xe6\xa3\xc5\x84\x02\xc2\x2d\xfc\xd1\x59\x97\xe3\xae\xa4\x56\x9f\x7b\x0b\x81\x6b\x80\xdb\x06\x0a\x8e\xf2\xc1\x5b\xa5\x1f\x03\x22\x69\xb0\x2c\xbd\x5d\x81\x6f\x00\xdf\x01\xf6\x6a\xd1\xec\xe3\xc0\x95\x92\xfe\x1c\xd9\xbd\x8d\x28\x2c\x7e\xc6\xcc\xf6\xc7\xed\xba\x1f\x0b\x1c\x0a\x0c\xc7\x45\x9c\xaf\xc5\xad\x05\x3f\x87\x1b\xd4\x6c\x49\x4f\xb5\x61\xb7\xec\xd3\x17\xde\x91\xd4\xd2\xae\x87\x3f\x26\xe5\xb3\xfe\xdf\x18\x5c\xe4\xc4\x50\xe0\x1d\xe0\x75\x5c\x58\xcc\x7c\xe0\x2e\x49\x85\xd4\xd6\xed\x84\x80\xa8\xb6\x30\xb3\x57\x80\x7d\x4a\x74\xb9\x44\x52\xee\x0a\x61\x2d\x53\xc5\x6a\x9c\x65\x57\x8d\x8e\x4a\xef\x2b\x9b\x2a\x0a\x1a\xb4\x68\x1d\x41\xa5\x36\x22\xaa\x28\xe8\xdd\x25\xfb\x9b\x55\xb2\xbf\x28\x2a\x27\xa8\xa4\xbf\x52\xde\x6d\xf0\x7e\x49\x31\x53\x92\xd2\xa9\x9c\xa0\x9e\x2b\x4b\xf2\x73\x45\x49\x7e\x92\x51\x55\x41\xef\xc0\xbd\xfe\x17\xc9\x8d\x92\x9e\x28\xd8\x47\x72\x2a\x29\xa8\x5f\x7c\x38\x0f\x58\x51\x90\x8b\xe7\x80\x6f\x16\x64\xbb\x50\x2a\x29\x28\x80\x3f\xcd\xf0\x14\xd2\xd7\xfa\xfd\x2f\x70\xa2\xa4\xdc\xb5\xf8\x83\xa8\xac\xa0\x00\x92\xe6\xe3\x0a\x62\xa5\xba\x52\x05\x1c\x25\x69\x59\x22\x7b\xa5\x53\x69\x41\x61\xbd\xa8\xa3\x88\x9b\x2f\x36\x81\x5f\x00\x9f\xa8\x6a\x45\xd0\x75\x54\x6e\xe9\x6f\x4b\xf8\x32\x76\xa7\x03\x97\xd0\x5e\xa9\xf0\xfb\x80\x2b\x24\xfd\xad\x90\x8e\x95\xcc\x56\x23\x68\x5f\xcc\xec\x08\x5c\x8d\xc2\x71\x6c\x28\x65\xd7\x83\xdb\xda\x5b\x86\x8b\x2b\x7e\x08\xf8\x63\x95\x4f\x16\xde\x1c\xff\x07\x18\x54\x56\x6a\x11\xa7\x52\x28\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x4b\xe6\xa2\xb0\x9a\x0b\x00\x00")

func sourcedataShapesShape11ShapePngBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataShapesShape11ShapePng,
		"sourcedata/shapes/shape-11/shape.png",
	)
}

func sourcedataShapesShape11ShapePng() (*asset, error) {
	bytes, err := sourcedataShapesShape11ShapePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/shapes/shape-11/shape.png", size: 2970, mode: os.FileMode(420), modTime: time.Unix(1715607012, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/shapes/shape-11/shape.png": sourcedataShapesShape11ShapePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"shapes": &bintree{nil, map[string]*bintree{
			"shape-11": &bintree{nil, map[string]*bintree{
				"shape.png": &bintree{sourcedataShapesShape11ShapePng, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
