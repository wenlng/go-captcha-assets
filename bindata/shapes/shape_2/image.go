// Code generated for package shape_2 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/shapes/shape-2/shape.png
package shape_2

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataShapesShape2ShapePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xcc\x08\x33\xf7\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x78\x00\x00\x00\x78\x08\x06\x00\x00\x00\x39\x64\x36\xd2\x00\x00\x08\x93\x49\x44\x41\x54\x78\x9c\xed\x9d\x6b\x8c\x5d\x55\x15\xc7\x7f\x85\x76\x50\xec\xb4\x15\xf1\xd4\xd2\x42\x21\x82\xa6\xba\xa0\x06\xb5\x4a\x2c\x89\x35\x45\x05\x0d\x18\x6a\xf1\x83\x05\x14\x12\xaa\x04\x4c\x04\xb5\x4a\x23\x01\xd1\x18\x34\x1a\x12\x31\xd4\x27\x12\x8b\xd1\x52\xb5\x44\x6a\x78\x49\xaa\xf2\x48\x4a\x6d\x45\x97\x6d\x6d\x40\x23\xd6\xd0\x1e\xe4\xd1\x0e\x6d\xa5\x2d\xad\x1f\xf6\x1d\x1d\x66\xee\xcc\xdd\xe7\x9c\xbd\xcf\x3e\xf7\xce\xfa\x7d\x9b\x7b\xf7\x59\x6b\xdd\xf9\x67\x9d\xc7\x3e\x6b\xaf\x0d\x86\x61\x18\x86\x61\xa4\x60\x42\xea\x00\xea\x40\x44\xa6\x01\xf3\x80\xe3\x81\x29\xc0\x00\xf0\x4f\x60\x83\xaa\x3e\x93\x32\xb6\xd8\xf4\xb4\xc0\x22\xb2\x10\xb8\x1a\x58\x08\x4c\x6c\x33\xe4\x10\xf0\x00\x70\x93\xaa\xae\xad\x33\xb6\xba\xe8\x49\x81\x45\xe4\xb5\xc0\xf7\x80\xf3\x0a\x1c\x76\x1f\x70\xb1\xaa\x3e\x15\x27\xaa\x34\xf4\x9c\xc0\x22\xf2\x66\xe0\xd7\xc0\x09\x25\x0e\xdf\x01\x9c\xa3\xaa\x9b\xc2\x46\x95\x8e\x23\x52\x07\x10\x12\x11\x99\x0f\x3c\x48\x39\x71\x01\x5e\x07\xfc\x56\x44\xce\x0a\x17\x55\x5a\x7a\x46\x60\x11\x39\x1f\x77\x9a\x9d\x56\xd1\x54\x3f\xb0\x56\x44\x3e\x5a\x3d\xaa\xf4\x1c\x99\x3a\x80\x10\x88\xc8\xe5\xc0\xad\xc0\xa4\x40\x26\x8f\x04\xce\xcf\xb2\x6c\x4f\x9e\xe7\x0f\x07\xb2\x99\x84\xae\xbe\x06\x8b\xc8\x04\xe0\x06\x60\x79\x44\x37\x37\x01\x57\xa9\xea\xe1\x88\x3e\xa2\xd1\xb5\x19\x2c\x22\x7d\xc0\xf7\x81\x4f\x45\x76\xf5\x4e\x60\x4e\x96\x65\x77\xe5\x79\x7e\x30\xb2\xaf\xe0\x74\x65\x06\x8b\xc8\x49\xc0\x8f\x81\x77\xd5\xe8\x76\x03\x70\xa1\xaa\x6e\xad\xd1\x67\x65\xba\x4a\x60\x11\x39\x19\xb8\x02\x58\x0a\xbc\x22\x41\x08\x07\x70\xcf\xd7\x37\xab\xea\x96\x04\xfe\x0b\x53\xab\xc0\x22\x72\x1a\x70\x36\x70\x1a\x30\x03\x77\x17\xbf\x17\xd8\x0f\xbc\x00\x1c\x04\x76\xe3\x66\x98\x9e\x6f\x1d\x36\x11\x98\x85\x9b\x6a\x9c\x53\x67\xbc\x1d\xd8\x06\xac\x07\x9e\xc4\x09\x3f\x01\x98\x8a\xfb\x4d\x53\x70\x71\x4f\x06\xfa\x80\xa3\x71\xbf\x69\x27\xf0\x27\xe0\x1e\x55\xdd\x58\x47\x90\xb5\x08\x2c\x22\xe7\x00\xd7\x03\x6f\xab\xc3\x5f\x97\xf0\x47\xe0\x5a\x55\xfd\x55\x4c\x27\x51\x05\x16\x91\xa3\x81\x5b\x80\x8b\x62\xfa\xe9\x72\x56\x03\x97\xaa\xea\xee\x18\xc6\xa3\x09\x2c\x22\x93\x81\x7b\x81\x33\x62\xf9\xe8\x21\x36\x02\xef\x51\xd5\x5d\xa1\x0d\x47\x99\xc9\x6a\x3d\x9f\xfe\x14\x13\xd7\x97\xd3\x81\x5f\x8a\x48\xf0\xc7\xd6\x58\x53\x95\x97\x01\x1f\x88\x64\xbb\x57\x59\x00\x7c\x3a\xb4\xd1\xe0\xa7\xe8\xd6\x75\xf7\x6f\xc0\xf4\xd0\xb6\xc7\x01\xbb\x80\xd9\x21\x4f\xd5\x31\x32\x78\x31\x26\x6e\x59\xa6\x02\x4b\x42\x1a\x8c\x21\xf0\x87\x22\xd8\x1c\x4f\x14\x29\x52\xe8\x48\x0c\x81\xdf\x1e\xc1\xe6\x78\xe2\x1d\x21\x8d\x05\xbd\x06\x8b\x48\x3f\x6e\x26\xca\xa8\xc6\x0c\x55\xdd\x11\xc2\x50\xe8\x0c\x3e\x39\xb0\xbd\xf1\xca\x29\xa1\x0c\x99\xc0\xcd\x24\xd8\xff\x31\xb4\xc0\x6f\x08\x6c\x6f\xbc\xd2\x58\x81\x2d\x83\xc3\x10\x2c\x51\x4c\xe0\x66\xd2\xd8\x0c\x0e\x76\x73\x30\xce\x69\x9e\xc0\xad\x47\x24\x9b\xc1\x0a\xc3\x64\x11\x99\x11\xc2\x50\xc8\x0c\x9e\x1b\xd0\x96\x11\xe8\xff\x19\x52\xe0\xf7\x05\xb4\x65\xc0\x7b\x43\x18\x09\x32\x93\x25\x22\x13\x81\x27\x28\xbf\x64\xc4\x18\xc9\x4e\xe0\x04\x55\xdd\x5f\xc5\x48\xa8\x0c\xbe\x18\x13\x37\x34\xd3\x81\x4f\x56\x35\x52\x39\x83\x45\x64\x26\xae\x52\xf0\x98\xaa\xb6\x8c\x11\x0c\x00\x73\x55\xf5\xef\x65\x0d\x54\xca\xe0\xd6\x9d\xf3\x1a\x4c\xdc\x58\xf4\x03\x77\x8a\xc8\xd4\xb2\x06\x4a\x0b\x2c\x22\xd3\x81\xfb\xb1\x52\xd8\xd8\x9c\x0a\xac\x13\x91\x59\x65\x0e\x2e\x25\xb0\x88\x9c\x81\xab\x04\x9c\x57\xe6\x78\xa3\x30\x6f\x01\xfe\x20\x22\x0b\x8a\x1e\x58\xb8\x8a\x4f\x44\xae\xc0\x55\x4c\x56\x5d\x87\x6b\x14\xe3\x55\xc0\x92\x2c\xcb\xf6\x66\x59\xf6\x48\x9e\xe7\x5e\x07\x79\xdf\x64\xb5\x8a\xe9\x56\x00\x17\x96\x8b\xcf\x08\xc8\x6a\xe0\x12\x55\x1d\xe8\x34\xd0\x4b\x60\x11\x79\x3d\xf0\x0b\xdc\x9a\x22\xa3\x19\x6c\x01\x16\x75\x5a\x04\xd7\xf1\x1a\xdc\x5a\x57\xb4\x01\x13\xb7\x69\xcc\x01\xd6\xb7\x5a\x57\x8c\xca\x98\xd7\x60\x11\x59\x0a\xdc\x0e\xbc\x32\x60\x60\x46\x38\xfa\x80\x8f\x64\x59\xf6\x6c\x9e\xe7\xeb\xdb\x0d\x18\x55\x60\x11\x39\x17\x58\x49\x0f\x35\x6a\xe9\x61\xce\xce\xb2\x6c\x5b\x9e\xe7\x3a\xfc\x8b\xb6\xd7\xe0\xd6\x33\xee\x66\x6c\x02\xa3\x9b\x18\x00\x44\x55\x9f\x1c\xfa\xe1\x68\xd9\x79\x2d\x26\x6e\xb7\xd1\x0f\x7c\x69\xf8\x87\x23\x32\x58\x44\xa6\xe0\x3a\xbe\xd9\x75\xb7\xfb\x38\x00\xcc\x54\xd5\xa7\x07\x3f\x68\x97\xc1\x0b\x30\x71\xbb\x95\x49\x0c\x7b\x8f\xdc\x4e\xe0\x77\xd7\x12\x8a\x11\x8b\x33\x87\xfe\xd1\x4e\xe0\xe3\x6a\x0a\xc4\x88\xc3\xcb\xde\xcb\xb7\x13\xd8\xe6\x98\xbb\x9b\xfe\xa1\x7f\xb4\x13\xf8\xd9\x9a\x02\x31\xe2\xf0\xdc\xd0\x3f\xda\x09\xfc\x8f\x9a\x02\x31\xe2\xd0\xf1\x39\xf8\x91\x9a\x02\x31\xe2\xf0\xb2\xee\xb8\xed\x04\xbe\x9b\x61\x69\x6e\x74\x0d\x7b\x80\xbb\x86\x7e\x30\x42\x60\x55\x7d\x11\xf8\x56\x5d\x11\x19\x41\x59\x31\xbc\xa1\xda\x68\x53\x95\x5f\x07\xb6\xc7\x8f\xc7\x08\xc8\xd3\xc0\x57\x86\x7f\xd8\x56\x60\x55\x7d\x01\xb8\x32\x76\x44\x46\x50\xae\x52\xd5\x11\x97\xd6\x31\x2b\x3a\x44\x64\x0d\x81\xbb\xbe\x18\x51\xf8\x8d\xaa\x2e\x6c\xf7\x45\xa7\x77\xbd\x57\xe2\xda\xfc\x1a\xcd\xe5\x45\xe0\x13\xa3\x7d\x39\x66\x45\x47\x9e\xe7\xbb\xb3\x2c\xdb\x07\xbc\x3f\x74\x54\x46\x30\xae\x57\xd5\x35\xa3\x7d\xe9\x53\xad\x71\x33\xd0\x33\x1b\x45\xf5\x18\x5b\x80\xaf\x8d\x35\xa0\xa3\xc0\xaa\x7a\x10\xd7\x42\xff\x50\xa0\xa0\x8c\x70\x2c\xed\xb4\xfa\xd0\xab\xde\x4a\x55\x1f\xc5\xed\x55\x60\x34\x87\x9f\xa8\xea\xef\x3b\x0d\x2a\x52\x50\xf7\x65\xe0\xa5\xf2\xf1\x18\x01\x39\x8c\xdb\x22\xa1\x23\xde\x02\xab\xea\x76\xdc\x62\x33\x23\x3d\x0f\xa9\xea\x36\x9f\x81\x45\x4b\x62\xef\x2e\x11\x8c\x11\x1e\x6f\x1d\x8a\x0a\xfc\xe7\x82\xe3\x8d\x38\x78\xeb\x50\x54\xe0\x9e\xde\x0e\xbd\x8b\xf8\xb7\xef\xc0\xa2\x02\x77\xd5\x4e\x69\x3d\x8c\xb7\x6e\x45\x05\x9e\x59\x70\xbc\x11\x07\xef\xd5\xfe\x45\x05\x3e\xb5\xe0\x78\x23\x0e\xde\x3a\x14\x15\x38\x68\xbb\x79\xa3\x34\xde\xad\x33\x8a\x0a\x6c\x3d\x39\x9a\xc1\xbc\xd6\xe6\x63\x1d\xf1\x16\xb8\xd5\x0f\x2b\x48\x83\x4c\xa3\x32\x53\x80\x37\xfa\x0c\x2c\x92\xc1\x76\x7a\x6e\x16\x5e\xbb\xdb\x14\x11\xd8\x4e\xcf\xcd\xc2\x2b\xe1\x4c\xe0\xee\xc5\x2b\x83\x7d\xbb\xec\x1c\x81\xdb\x57\x6f\x72\x95\x88\x8c\xa0\xec\x07\xfa\x83\xbc\x0f\x06\x4e\xc2\xc4\x6d\x1a\x7d\x78\x6c\x79\xef\x2b\xf0\xec\x6a\xb1\x18\x91\x38\xbe\xd3\x00\x5f\x81\x27\x55\x0c\xc4\x88\xc3\xc4\x4e\x03\x7c\x05\x0e\xbe\xf5\xb8\x11\x84\x8e\xad\x0c\x7d\x05\xde\x8c\x15\xdd\x35\x91\x11\x7d\xb1\x86\xe3\x5b\x74\xb7\x1b\x78\xb4\x72\x38\x46\x48\xfe\xa2\xaa\x3b\x3b\x0d\x2a\xf2\x1c\x7c\x47\x85\x60\x8c\xf0\x78\xe9\x51\x44\xe0\xef\x52\xa0\x92\xc0\x88\xca\x00\xf0\x6d\x9f\x81\x45\xaa\x2a\x07\x80\xcf\x94\x8d\xc8\x08\xca\xe7\x55\xd5\x2b\xd9\x0a\x75\x7c\xcf\xf3\xfc\xb1\x2c\xcb\x8e\x03\xde\x5a\x2a\x2c\x23\x04\x2b\x55\xf5\x1a\xdf\xc1\x65\x3a\xc9\x5e\x8e\xad\x72\x48\xc5\xed\xc0\xa5\x45\x0e\x28\x5d\x44\x27\x22\x1f\x03\xbe\x09\xbc\xba\xac\x0d\xc3\x9b\xdd\xc0\x32\x55\x5d\x51\xf4\xc0\x4a\x55\x92\x22\x32\x0d\xb7\x30\xed\xe3\x78\xbe\x80\x36\x0a\xf1\x38\x70\x1b\xae\xf7\x46\xa9\x1b\xdc\x60\x65\xb0\x22\xf2\x26\x60\x11\x70\x01\x20\xa1\xec\x8e\x43\xb6\x00\x3f\x07\x56\xa9\x6a\xe5\x85\x06\x51\xea\x9c\x45\xe4\x14\x9c\xd8\x8b\x81\xd3\x63\xf8\xe8\x31\x1e\xc3\x89\x7a\x87\xaa\x6e\x0d\x69\x38\x7a\x21\xbb\x88\xcc\x06\x96\xe0\x6e\xce\xac\xd1\xe9\xff\xd9\x81\xdb\xa6\x68\xa5\xaa\x3e\x11\xcb\x49\x6d\x2b\x15\x44\xe4\x28\x60\x19\xf0\x45\x3c\xde\x82\xf4\x30\x87\x80\x1b\x81\x1b\x54\x75\x5f\x6c\x67\xb5\x2f\x45\x11\x91\xf9\xb8\x6e\x6c\xa5\x37\x5c\xec\x62\x06\x80\x0f\xab\xea\xbd\x75\x39\x4c\xb2\xd6\x48\x44\xe6\x01\xeb\x18\x5f\x9d\xe5\xf7\x03\x67\xa9\xea\xef\xea\x74\x5a\x78\xef\xc2\x10\xe4\x79\xfe\xaf\x2c\xcb\x76\x00\xe7\xa6\xf0\x9f\x88\xab\x55\x75\x55\xdd\x4e\x53\xee\x89\xf4\x43\xe0\xa1\x84\xfe\xeb\x64\x13\x89\xfa\x7f\x26\x13\x58\x55\x0f\x03\x9f\x4b\xe5\xbf\x66\x96\xa9\x6a\x92\x82\x89\xa4\xbb\x9a\xa9\xea\xc3\xc0\x9d\x29\x63\xa8\x81\x07\x54\xf5\xbe\x54\xce\x9b\xb0\x6d\xdd\x35\xf4\x76\x39\xd0\xb2\x94\xce\x93\x0b\xac\xaa\x9b\x71\xf3\xad\xbd\xc8\x6a\x55\xdd\x90\x32\x80\xe4\x02\xb7\xb8\x0e\xf8\x4f\xea\x20\x02\xf3\x12\xb0\x3c\x75\x10\x8d\x10\xb8\xb5\xa1\xa2\x57\x09\x4a\x17\xf1\x03\xdf\x5e\x56\x31\x69\x84\xc0\x2d\xbe\x0a\x3c\x9f\x3a\x88\x40\xec\xc5\x9d\x95\x92\x93\x64\xa2\xa3\x1d\x79\x9e\xef\xcb\xb2\x6c\x17\xf0\xc1\x88\x6e\xf6\x00\x4f\xe1\x7e\xf7\x51\x11\xfd\x2c\x57\xd5\x7b\x22\xda\xf7\xa6\x69\x93\xfe\xdf\xc1\x6d\x8e\x79\x41\x20\x7b\xfb\x81\x35\xc0\xcf\x80\x07\x55\x35\x1f\xfc\x42\x44\x8e\x05\xe6\xe3\x5e\x69\x2e\x22\x9c\xe0\x6b\x81\x6f\x04\xb2\x55\x99\xc6\xf5\xbd\x12\x91\x3e\x60\x15\xd5\xb6\x12\xd8\x86\x2b\xf3\xbd\xcd\xa7\x12\x42\x44\x8e\x01\x2e\x02\x2e\xc3\x63\xc5\xde\x18\xdc\x0f\x9c\xa7\xaa\x7b\x2b\xd8\x08\x4a\xe3\x04\x86\xff\xad\x47\xfe\x02\x6e\xa3\xea\x3e\xcf\xc3\x0e\xe0\xb2\xf5\x16\x60\x5d\x6b\xa6\xac\x8c\xef\x33\x71\x42\x2f\xc6\x3f\xab\x0f\xe2\x5e\x01\x5e\xd7\xea\xaf\xdd\x18\x1a\x29\xf0\x20\x22\x72\x22\xf0\x59\xdc\x29\xfb\xd8\x51\x86\x6d\x05\x6e\x05\x7e\x34\xf4\x14\x1c\xc0\xf7\x60\x56\x5f\xc2\xe8\x7d\xa9\x9e\xc3\x55\x62\xdc\xa8\xaa\x8f\x87\xf2\x1d\x92\x46\x0b\x3c\x48\x2b\xa3\xe7\xe2\x4e\x9f\xaf\xc1\xdd\x24\x6d\x07\x36\xc5\xac\x86\x18\xe2\xff\x44\x5c\x2d\xf8\x2c\x5c\xaf\xe6\x67\x80\xbf\x02\x1b\x53\xcd\x31\x1b\x86\x61\x18\x86\xd1\x6c\xfe\x0b\xb6\x9e\xf6\x21\xb2\x7a\x14\x57\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x2a\x73\x2f\x8b\xcc\x08\x00\x00")

func sourcedataShapesShape2ShapePngBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataShapesShape2ShapePng,
		"sourcedata/shapes/shape-2/shape.png",
	)
}

func sourcedataShapesShape2ShapePng() (*asset, error) {
	bytes, err := sourcedataShapesShape2ShapePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/shapes/shape-2/shape.png", size: 2252, mode: os.FileMode(420), modTime: time.Unix(1715607122, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/shapes/shape-2/shape.png": sourcedataShapesShape2ShapePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"shapes": &bintree{nil, map[string]*bintree{
			"shape-2": &bintree{nil, map[string]*bintree{
				"shape.png": &bintree{sourcedataShapesShape2ShapePng, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
