// Code generated for package shape_9 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/shapes/shape-9/shape.png
package shape_9

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataShapesShape9ShapePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x0c\x0b\xf3\xf4\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x75\x00\x00\x00\x75\x08\x06\x00\x00\x00\x70\x04\xae\xbc\x00\x00\x0a\xd3\x49\x44\x41\x54\x78\x9c\xed\x9d\x6d\x8c\x54\xd5\x19\xc7\x7f\x8c\x08\x2d\x05\x35\xb1\x19\xa0\xad\x84\xb8\x76\x89\xe6\x81\x04\x12\x42\xba\x80\x22\xa4\xa9\x0d\xa1\x09\x85\x22\x91\xf2\x81\xb6\x88\x34\x91\xf8\xa1\x0d\x8d\x69\x89\x69\xd5\x94\xd2\x0f\x14\x6d\x14\x31\xe5\x03\x15\xd1\x16\x49\x20\x68\x49\x2c\x2e\x41\xd6\x17\x12\x48\xe0\x49\xdb\xb5\x2c\x12\x68\xeb\x32\x56\x23\x2c\xa5\xbc\xac\xb5\x1f\xce\x61\x5f\x67\x99\x99\x3b\xf7\x39\xf7\xde\x99\xf9\x25\x13\x02\x99\x39\xcf\xb9\xe7\xcf\xb9\xf7\xdc\x73\x9e\xf3\x3f\xc3\xc8\x30\x22\x32\x1c\x98\x04\x08\xd0\x04\x4c\xf4\x9f\x5b\x81\x3c\x30\x06\xb8\xb9\xc8\x4f\xcf\x01\x5d\x40\x01\xf8\x08\x38\xe5\x3f\x1d\x80\x02\xed\xaa\xda\x6d\x59\x77\x4b\x86\x25\x5d\x81\x4a\x10\x91\xb1\xc0\x1c\x60\x26\xd0\x02\x4c\x06\x46\x18\x84\xba\x02\x1c\x07\xda\x80\x43\x40\xab\xaa\x9e\x35\x88\x63\x42\xea\x45\x15\x91\xe9\xc0\x42\xe0\x3e\x60\x6a\x82\x55\x39\x0a\xfc\x09\xd8\xa5\xaa\x87\x13\xac\x47\x49\x52\x29\xaa\x88\x34\x03\x2b\x80\x25\xc0\xed\x09\x57\xa7\x18\x27\x81\x97\x81\xad\xaa\xfa\x5e\xd2\x95\x19\x48\x6a\x44\xf5\xcf\xc7\x45\xc0\x6a\xe0\x9e\x84\xab\x53\x09\x07\x80\x67\x80\x9d\x69\x79\x0e\x27\x2e\xaa\x88\x8c\x06\x56\x02\x8f\x00\x13\x12\xae\x4e\x35\x9c\x06\x36\x02\x5b\x54\xf5\x42\x92\x15\x49\x4c\x54\x11\xf9\x3c\xb0\x0a\x58\x0b\x8c\x4b\xaa\x1e\x06\x74\x02\xeb\x81\xcd\xaa\xfa\xdf\x24\x2a\x10\x5c\x54\x11\x19\x06\x2c\xc5\x5d\xf8\x6d\xa1\xe3\x07\xe4\x0c\xee\x3f\xec\x0e\x55\xfd\x2c\x64\xe0\xa0\xa2\x8a\xc8\x64\xe0\x59\xdc\xeb\x48\xbd\xd0\x06\x3c\xa4\xaa\xc7\x43\x05\x0c\x22\xaa\x88\x8c\x04\x7e\x0a\xfc\x04\x18\x1e\x22\x66\xca\xe8\x06\x7e\x09\x3c\xae\xaa\x97\xad\x83\x99\x8b\x2a\x22\x53\x80\xdf\xe3\x26\x0a\xea\x9d\xe3\xc0\x32\xeb\x5e\x7b\x83\x65\xe1\x22\xf2\x30\xf0\x07\xe0\x4b\x96\x71\x32\xc4\x58\xe0\x7b\xf9\x7c\xfe\x5c\xa1\x50\x78\xd7\x2a\x88\x49\x4f\x15\x91\x2f\x00\xcf\x01\x0f\x58\x94\x5f\x23\x6c\x07\x1e\x54\xd5\xff\xc4\x5d\x70\xec\xa2\x8a\xc8\x04\x60\x0f\x30\x25\xee\xb2\x6b\x90\x63\xc0\x02\x55\x3d\x1d\x67\xa1\xb1\x8a\x2a\x22\xd3\x80\xbd\xd4\xd6\x7b\xa7\x35\x9d\xc0\x7c\x55\x3d\x12\x57\x81\xb9\xb8\x0a\x12\x91\xb9\xc0\x41\x1a\x82\x56\xca\x38\xe0\xa0\x6f\xbf\x58\x88\x45\x54\x11\xf9\x16\xae\x87\x8e\x8a\xa3\xbc\x3a\x64\x14\xb0\xd7\xb7\x63\xd5\x54\x7d\xfb\xf5\x15\xf9\x23\x70\x63\xf5\xd5\xa9\x7b\xae\x02\x8b\x55\x75\x77\x35\x85\x54\x25\xaa\xbf\x65\xec\x05\x3e\x57\x4d\x39\x0d\xfa\x71\x09\xf7\x8c\xdd\x1f\xb5\x80\xc8\xa2\xfa\x41\xd1\x41\x1a\xb7\x5c\x0b\x2e\x02\xb3\xa3\x0e\x9e\x22\x89\xea\x5f\x5b\xde\xa1\x31\x28\xb2\xa4\x13\x98\x11\xe5\x75\xa7\xe2\x81\x92\x9f\x58\xd8\x43\x43\x50\x6b\xc6\x01\x7b\x7c\x7b\x57\x44\x94\xd1\xef\x73\x34\x26\x16\x42\x31\x05\xd7\xde\x15\x51\xd1\xed\xd7\xcf\xe5\x6e\xaa\x34\x48\x60\xae\x02\x27\x80\x76\xe0\x03\x5c\x2a\xe8\x05\xff\xe7\x18\x60\xb4\xff\x8c\x07\x9a\xfd\x27\xed\x23\xf7\x35\xaa\xfa\x54\xb9\x5f\x2e\x5b\x54\xbf\xda\xf2\x2e\x30\x32\x4a\xad\x0c\xf9\x10\xd8\xef\x3f\x07\x80\x8e\x4a\x72\x85\x44\xe4\x06\xe0\x0e\x60\x36\x70\x2f\x30\x0f\x37\xf1\x9e\x26\x2e\x03\xd3\xcb\x5d\xdd\x29\x4b\x54\xbf\x1e\x7a\x98\xf4\x2c\x9f\x9d\x07\x5e\x02\xb6\x01\x6f\xc6\x99\x59\xe0\x33\x33\xbe\x06\x2c\xc7\x65\x68\xdc\x12\x57\xd9\x55\x72\x1c\x27\x6c\xc9\xf5\xd8\x72\x45\xfd\x05\x6e\x91\x3b\x69\x3a\x80\x27\x80\x17\x55\xf5\x92\x75\x30\xff\x9f\x79\x29\x2e\x2d\xe5\x4e\xeb\x78\x65\xf0\xb8\xaa\xfe\xac\xd4\x97\x4a\x8a\xea\x53\x50\x8e\x90\x6c\xc6\x42\x3b\xf0\x18\xf0\xb2\xaa\xfe\x2f\x74\x70\x11\xc9\xe1\xd2\x57\xd7\xe1\xb6\x78\x24\x45\x37\x30\xad\xd4\x6d\xf8\xba\xa2\xfa\x5b\xd1\x9b\x24\x97\x53\xd4\x85\x6b\xc8\xa7\xd3\x90\x53\xeb\x73\x93\x57\x01\x4f\x02\x37\x25\x54\x8d\x36\x60\xd6\xf5\x1e\x39\xa5\x5e\x69\x96\x92\x9c\xa0\xaf\x03\xa2\xaa\x1b\xd3\x20\x28\x80\xaa\x76\xab\xea\x6f\x81\xbb\x70\x5b\x30\x92\xa0\x05\xa7\xcb\x90\x0c\xd9\x53\x7d\x5e\x6e\x3b\xe1\xd3\x38\x3f\x05\x1e\x05\x36\x84\x4e\xad\xac\x04\x7f\x17\x5b\x03\xfc\x9a\xf0\x8f\xa6\x33\xc0\xa4\xa1\xf2\x8a\xaf\xd7\x53\x57\x11\x5e\xd0\x8f\x81\xaf\xab\xea\xaf\xd2\x2c\x28\x80\xaa\x7e\xa6\xaa\xbf\x01\xe6\x02\xff\x0e\x1c\xfe\x36\x9c\x3e\x45\x29\xda\x53\xfd\x56\x88\xbf\x13\x76\x2a\xf0\x7d\xe0\x9b\xaa\xda\x1e\x30\x66\x2c\x88\x48\x13\xb0\x0f\xb7\x47\x36\x14\x9d\xc0\x57\x8b\x6d\xf1\x18\xaa\xa7\xae\x24\xac\xa0\x1d\xc0\xdd\x59\x14\x14\x40\x55\x3b\x70\xfb\x66\x35\x60\xd8\x71\x38\x9d\x06\x31\xa8\xa7\xfa\x11\x5e\x07\xe1\x36\x2b\xbd\x8f\x13\xf4\x1f\x81\xe2\x99\x21\x22\x5f\x01\x5a\x09\xd7\x63\x4f\x03\x4d\x03\x07\x92\xc5\x7a\xea\x22\xc2\x09\xfa\x31\xee\x96\x9b\x79\x41\x01\xfc\x75\x7c\x83\x70\xcf\xd8\x09\x38\xbd\xfa\x51\x4c\xd4\xd5\xf6\x75\x01\xdc\x28\x77\x71\x56\x6f\xb9\x43\xe1\x6f\xc5\xdf\xc6\x4d\x14\x84\x60\x90\x5e\xfd\x44\xf5\x3b\xb8\x43\x6d\xf8\x7d\x54\x55\xdf\x08\x14\x2b\x28\xaa\x7a\x10\xf8\x51\xa0\x70\xf7\x78\xdd\x7a\x18\xd8\x53\x57\x04\xaa\xc8\xeb\xc0\x86\x40\xb1\x92\x62\x13\xe1\x26\x28\xfa\xe9\x36\x50\xd4\x25\x01\x2a\xd0\x05\x7c\x3f\xed\xef\xa1\xd5\xe2\xaf\xef\x07\xb8\x15\x25\x6b\xfa\xe9\xd6\x23\xaa\x77\x41\x09\x61\x9a\xb1\x2e\xee\x6d\x06\x69\x45\x55\xff\x89\x9b\x1d\xb3\xe6\x76\xaf\x1f\xd0\xbf\xa7\x2e\x0c\x10\xbc\x1d\x78\x3a\x40\x9c\x34\xb1\x99\x30\xef\xaf\x3d\xfa\xf5\x15\xf5\xbe\x00\x81\x1f\x4b\xcb\xe4\x7c\x28\xfc\xf5\xfe\x3c\x40\xa8\x1e\xfd\x72\xd0\xe3\x24\x66\x6d\x3c\xd5\x81\xf3\x1e\xaa\x47\x76\x02\x7f\x35\x8e\x31\xd5\xeb\xd8\xd3\x53\xe7\x18\x07\x04\x78\x22\x89\x05\xee\x34\xe0\xaf\x7b\x7d\x80\x50\x73\xa0\x57\xd4\x99\xc6\xc1\xce\x03\x2f\x1a\xc7\x48\x3b\x3b\x80\x4f\x8c\x63\xcc\x84\x5e\x51\xad\x17\xc2\x5f\x0a\x91\x53\x94\x66\x7c\xc2\xd8\x0e\xe3\x30\x2d\x00\x39\x3f\x81\x6f\x9d\x25\xb8\xcd\xb8\xfc\xac\x60\xdd\x0e\x93\x45\x64\x78\x0e\xe7\x97\x6b\x61\xaf\x7a\x8d\x0f\x71\x79\x4e\x0d\xe0\x2d\xc0\xd2\x62\x76\x04\x30\x29\x87\x7d\x76\xdc\xfe\x5a\x9f\x3d\x2a\x17\xdf\x0e\x7f\x36\x0e\x23\x39\xec\xd7\xfe\x22\xef\xb3\xac\x51\xac\x17\x31\x9a\x72\x38\x7b\x72\x4b\x0e\x18\x97\x9f\x35\x0e\x1a\x97\x3f\xd1\x5a\xd4\xab\xb8\x49\x87\x06\xbd\x9c\xc0\xb5\x8b\x15\x13\x73\xb8\x43\x04\xac\x38\x51\x6f\xd3\x82\xa5\x50\xd5\x4f\x01\x4b\x37\xef\x5b\x73\xb8\x53\x21\xac\xa8\xa9\xac\x86\x18\xb1\x14\x35\x9f\xc3\xed\xd9\xb4\xe2\x03\xc3\xb2\xb3\x8c\x65\xbb\x8c\xc9\x51\xfc\xdc\x96\xb8\xe8\x32\x2c\x3b\xcb\x58\xda\xb1\xdf\x1c\x9b\xe3\xd9\x10\x24\xea\x25\x9f\x62\x4c\xdb\xc5\x5a\xd4\x46\x4f\x2d\x8e\x69\xbb\x58\x8b\x6a\xf9\xbc\xce\x32\xa6\xed\x62\x2d\xea\x68\xe3\xf2\xb3\x8a\x69\xbb\xe4\x70\x87\xd9\x59\xd1\x10\xb5\x38\x96\xed\x72\x2e\x87\xed\xfd\x7d\xbc\x61\xd9\x59\xc6\xb2\x5d\xba\x72\xb8\xe3\x26\xad\x68\x2e\xfd\x95\xba\xc4\xb2\x5d\x0a\x39\xdc\xf9\xa1\x56\x34\x7b\x9f\xa2\x06\x1e\xdf\x1e\x96\xa2\x7e\x94\xc3\x1d\x06\x6b\xc5\x8d\x38\xe3\xa9\x06\xbd\xdc\x81\xad\xc3\xda\x29\x6b\x51\xc1\x39\x89\x35\xe8\xc5\xba\x3d\x4e\xe5\xb0\x5f\x1a\xbb\xd7\xb8\xfc\xac\x61\xdd\x1e\x1d\x39\xec\xb7\x04\xcc\xf3\x4e\x26\x75\x8f\x6f\x87\x79\xc6\x61\x34\x87\x5b\x1e\xbb\x62\x18\x64\x2c\xce\xeb\xaf\x81\x6b\x07\x4b\x33\xcb\x2b\x40\x7b\xce\x2f\x62\x5b\x9f\x18\xb8\xdc\xb8\xfc\xac\x60\xdd\x0e\xc7\x55\xb5\xfb\xda\x34\x61\x9b\x71\xb0\xa5\xde\xbc\xb1\x6e\xe9\x63\x5e\x69\x49\x1b\xf4\xce\xfd\x1e\x32\x0e\x76\x0b\xf6\x17\x94\x76\x42\xd8\xcc\x1e\x82\x5e\x51\x5b\x8d\x83\x01\xac\xf5\x6e\x9c\x75\x87\xbf\xee\xb5\x01\x42\xb5\x82\x17\x55\x55\xcf\x02\x47\x8d\x03\xde\x49\x11\x7b\x98\x3a\x61\x11\xf6\x7e\xc1\x47\xbd\x8e\xfd\x96\xde\x42\x98\x4e\xac\xf3\x7b\x77\xea\x06\x7f\xbd\xeb\x02\x84\xea\xd1\xaf\xaf\xa8\xbb\x02\x04\x16\xae\x63\x94\x58\xa3\xac\x22\x8c\xf1\x73\x8f\x7e\xfd\x26\x05\x44\xa4\x03\x7b\x33\x8f\xf3\xc0\x5d\xde\xe4\xa2\xa6\x11\x91\x2f\x03\x7f\xc1\xde\xf0\xf9\xa4\xaa\xf6\x6c\x9f\x19\x38\x70\x09\xb1\x7d\xff\x26\xe0\xf9\x5a\x9f\x65\xf2\xd7\xf7\x3c\x61\x1c\xbc\xfb\xe9\x36\x50\xd4\xad\x01\x2a\x00\xce\x74\x62\x4d\xa0\x58\x49\xb1\x86\x30\xe6\x28\x30\x40\xb7\x62\x2e\xa2\xad\x84\xb1\xb2\xeb\x06\xe6\x7a\xcb\xb7\x9a\x42\x44\x66\xe3\x76\xfb\x85\x18\x14\x1e\x50\xd5\x39\x7d\xff\xa1\xd8\x7b\xe3\x33\x01\x2a\x02\xee\x82\x5f\xf1\x06\xc8\x35\x83\xbf\x9e\x57\x08\x67\xc1\x3e\x48\xaf\x62\xa2\xee\xc4\xf9\xc8\x86\xe0\x8b\xc0\x3e\xef\x93\x9b\x79\xfc\x75\xec\xc3\x5d\x57\x08\x4e\xe3\xf4\xea\xc7\x20\x51\xfd\x04\xff\xc6\x10\x35\xf2\x34\x01\xaf\x65\x5d\x58\x5f\xff\xd7\x08\x6b\xb9\x5e\xf4\x24\x90\xa1\xa6\xed\xb6\xe0\x3c\xda\x43\x21\x40\x6b\x56\x6f\xc5\xbe\xde\xad\x84\x3d\x88\xa8\x13\xa7\xd3\x20\x8a\x8a\xea\xcd\xf6\x43\x98\x39\xf5\xa5\x09\x78\xdb\x0f\x32\x32\x83\xaf\xef\xdb\x84\xed\xa1\x00\xeb\x8b\x1d\x8a\x00\xe9\x3c\x97\xa6\x1b\x67\x80\xbc\x29\xcd\x06\x20\x99\x3c\x97\xc6\xff\x20\xc4\xca\xc2\x40\x86\xe3\x9e\xe9\xaf\xfa\x19\x99\xd4\xe1\xeb\xf5\x2a\xae\x9e\x49\xcc\x65\xaf\x1d\x4a\x50\x48\xff\x59\x6f\xe7\x71\x7e\xb9\x9b\xd3\x60\x33\x90\x95\xb3\xde\xb2\x72\x2a\xa3\xe2\xec\x55\x77\x36\x4e\x65\x2c\x7d\x2a\x63\xc9\xec\xf9\x42\xa1\x50\xc8\xe7\xf3\x23\x80\xbb\xe3\xaa\x59\x04\xf2\xc0\x77\x80\x25\xf9\x7c\xfe\x42\x3e\x9f\xff\x5b\xa1\x50\xf8\xd4\x3a\xa8\x88\x8c\xcc\xe7\xf3\xdf\x05\xb6\x03\x3f\xc4\xd6\x1f\xa3\x1c\x9e\x54\xd5\x92\xfe\x86\x59\x3d\xe9\xf8\x13\x9c\x79\xe3\x36\xe0\xad\xc6\x49\xc7\xfd\xa9\x85\x33\xc9\xcf\xe2\xac\xe1\xde\xc0\x19\x4f\x9d\xf0\xb6\x36\x65\x51\xb7\x67\x92\x5f\x43\x44\x1e\xc6\x1d\xcd\x91\x66\xae\xe2\x2c\x6d\xde\xc3\xb9\xa0\x5c\xf0\x9f\x2e\xdc\x0e\xee\xd1\xfe\x33\x1e\xb7\x51\xa9\x19\xdb\xbd\x2d\x71\xb0\x46\x55\x9f\x2a\xf7\xcb\x15\xaf\x69\x8a\xc8\x0b\xc0\x03\x95\xfe\xae\x41\x64\xb6\xab\xea\xb2\x4a\x7e\x10\x25\xbb\xef\x41\xe0\x58\x84\xdf\x35\xa8\x9c\x63\xb8\xf6\xae\x88\x48\xd9\x07\x22\x32\x01\x78\x87\xb0\xc7\x71\xd6\x1b\x9d\xc0\x8c\x28\x67\xf8\x44\xca\xc3\xf5\x81\xe6\x03\x17\xa3\xfc\xbe\x41\x49\x2e\x02\xf3\xa3\x1e\xca\x14\x39\xb9\x5a\x55\x8f\x00\x0b\x80\xba\xf6\xc6\x37\xe0\x12\xb0\xc0\xb7\x6f\x24\xaa\xca\x98\x57\xd5\xfd\xc0\xfd\xd8\x5a\x9d\xd6\x13\x57\x81\xfb\x7d\xbb\x46\xa6\xea\x6d\x10\xaa\xba\x1b\x58\x4c\xa3\xc7\x56\xcb\x25\xdc\x79\xb2\xbb\xab\x2d\x28\xb6\x34\x4d\x11\x99\x0b\xec\x01\x46\xc5\x55\x66\x1d\x71\x11\x77\xcb\x8d\xc5\x9a\x3e\xd6\xdc\x5b\x11\x99\x06\xec\xa5\x31\x2a\xae\x84\x4e\xdc\xa0\x28\xf2\x33\x74\x20\xb1\xee\x42\xf3\x15\x9b\x41\xe3\x3d\xb6\x5c\x8e\xe1\x5e\x5b\x62\x13\x14\x0c\xbc\x09\xfd\x30\xbc\x05\xb7\xb2\xd1\x60\x68\xb6\x03\x2d\x16\x67\xc9\x9a\x6e\x7d\xf0\x73\xc5\x1b\x48\xdf\x22\x40\x92\x5c\x06\x7e\x5c\xc9\x5c\x6e\xa5\x98\xef\x67\xf1\x8b\xec\x2f\x90\x9e\x65\xbb\x24\x39\x0e\x2c\x2b\x77\xb5\x25\x2a\xe6\x16\x73\x7e\x91\xfd\x77\xfe\xaf\x2d\xd8\xdb\xd1\xa6\x91\x6e\x5c\x0a\xcc\x72\x55\xfd\x97\x75\xb0\xa0\x3b\xcf\x7c\xaf\x7d\x96\xe4\x72\x9e\x92\xa0\x0d\x78\xc8\xba\x77\xf6\x25\x68\xaf\xf1\x17\x36\x0b\xb7\x74\x77\x26\x64\xec\x04\x38\x83\xbb\xce\x59\x21\x05\x85\xc0\x3d\xb5\x2f\x3e\xaf\x78\x15\x2e\x0d\xb5\x96\xde\x6b\x3b\x71\x89\xf0\x9b\xaf\x97\xc6\x69\x49\xe2\x1b\x7f\x45\x64\x34\xb0\x12\x78\x04\x98\x90\x70\x75\xaa\xe1\x34\x2e\x0f\x78\xcb\x50\x99\xf3\xa1\x48\x5c\xd4\x6b\xf8\x9c\xda\x45\xc0\x6a\xc2\xec\x8f\x8d\x8b\x03\xb8\xed\x84\x3b\xd3\x90\x9b\x0c\x29\x12\xb5\x2f\x22\xd2\x0c\xac\x00\x96\x60\xef\x41\x11\x85\x93\xb8\x2d\xf9\x5b\x55\xd5\xf2\x88\xaf\x48\xa4\x52\xd4\xbe\x88\xc8\x74\x60\x21\x6e\xab\xfd\xd4\x04\xab\x72\x14\x67\x6b\xb3\x4b\x55\x0f\x27\x58\x8f\x92\xa4\x5e\xd4\xbe\x88\xc8\x58\x60\x0e\x30\x13\xf7\x5a\x34\x19\x9b\xa3\xb7\xaf\xe0\x26\x0a\xda\x70\xd6\x70\xad\xd7\x8c\xa7\xb2\x40\xa6\x44\x1d\x88\x7f\x0e\x4f\xc2\x6d\x85\x68\xc2\x9d\x05\x3b\x11\x77\x7c\x68\x1e\x97\x12\x5a\xec\x2c\xbb\x73\xb8\x94\xd1\x02\xee\x0c\x81\x53\xfe\xd3\x81\xdb\xe2\xd1\x9e\x96\xe7\x63\x14\xfe\x0f\xe4\x85\x47\x04\x1d\x89\x28\x8c\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x03\x37\xab\xa1\x0c\x0b\x00\x00")

func sourcedataShapesShape9ShapePngBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataShapesShape9ShapePng,
		"sourcedata/shapes/shape-9/shape.png",
	)
}

func sourcedataShapesShape9ShapePng() (*asset, error) {
	bytes, err := sourcedataShapesShape9ShapePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/shapes/shape-9/shape.png", size: 2828, mode: os.FileMode(420), modTime: time.Unix(1715607030, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/shapes/shape-9/shape.png": sourcedataShapesShape9ShapePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"shapes": &bintree{nil, map[string]*bintree{
			"shape-9": &bintree{nil, map[string]*bintree{
				"shape.png": &bintree{sourcedataShapesShape9ShapePng, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
