// Code generated for package shape_8 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/shapes/shape-8/shape.png
package shape_8

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataShapesShape8ShapePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xdd\x10\x22\xef\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x74\x00\x00\x00\x74\x08\x06\x00\x00\x00\x54\x9a\x16\x27\x00\x00\x10\xa4\x49\x44\x41\x54\x78\x9c\xed\x9d\x79\xb8\x1c\x55\x95\xc0\x7f\xef\x21\x90\xc9\x00\x91\xf9\x42\x0d\x64\xc2\xa2\x04\x41\x3d\x6c\x82\x11\x04\x05\x0c\x84\x0c\xfb\x22\x4a\x88\x12\x97\x21\x2a\xa0\x02\xc2\x00\x32\xb2\x08\xa2\x06\x66\x80\x61\x1d\x81\x81\x91\x40\x94\x21\x03\x11\x22\x9b\x2c\x19\x0c\x48\x22\x6b\x8e\x61\x99\x30\x04\x1e\x09\x7c\x95\xb0\xc4\x90\x40\xc0\x24\xf3\xc7\xb9\xfd\xd2\xaf\xbb\xba\xbb\x96\x7b\xab\xbb\xc3\xfc\xbe\xef\x7d\xdf\x7b\xd5\x55\xf7\xdc\xd7\xa7\xea\xd6\xbd\xf7\x6c\x3d\xfc\x3f\x2d\x11\x91\xf5\x80\xdd\x81\xcf\x02\x5b\x03\x23\x80\xcd\x80\xc1\xee\x67\x11\xb0\xbb\xaa\x3e\xd7\xb6\x4e\x3a\x7a\xda\x29\x5c\x44\x36\x01\x4e\x00\x5e\x05\xde\x06\xde\x01\x5e\x07\x5e\x04\xe6\xa9\xea\xf2\x36\xf6\x6d\x28\xf0\x45\x60\x1c\xb0\x2b\xb0\x56\x8b\x4b\xe6\x01\x9f\x56\xd5\x45\x81\xbb\xd6\x94\xb6\x29\x54\x44\xd6\x05\xfe\x1b\x18\xd9\xe4\xb4\xe7\x81\x99\xc0\x23\xc0\x9d\xaa\xfa\x62\x09\xfd\xfa\x04\x70\x32\xf0\x15\x60\xed\x8c\x97\xdf\x07\xec\xa3\xaa\xab\xbc\x77\x2c\x25\xed\x54\xe8\xb5\xc0\x37\x32\x5e\x36\x1b\x98\x02\x5c\xab\xaa\xaf\x78\xee\xcf\xe6\xc0\x44\xe0\x4b\x05\x9b\x3a\x45\x55\x2f\xf4\xd0\xa5\x5c\xb4\x45\xa1\x22\x72\x08\x70\x6b\x81\x26\x56\x00\xb7\x03\x17\xa8\xea\xc3\x05\xfb\xb2\x36\x70\xba\xfb\x19\x54\xa4\x2d\xc7\x7b\xc0\x48\x55\x7d\xca\x43\x5b\x99\x29\x5d\xa1\x22\xb2\x11\x30\x07\x18\xea\xa9\xc9\x69\xc0\x19\x79\xbe\x40\x11\xd9\x1a\xb8\x11\xd8\xc9\x53\x5f\x2a\xfc\x1e\xf8\x7c\x3b\x86\xde\xde\xb2\x05\x62\xc3\x9a\x2f\x65\x02\xec\x0f\x3c\x2e\x22\xff\x22\x22\x83\xd3\x5e\x24\x22\x63\x81\x27\xf0\xaf\x4c\xb0\x19\xf1\x91\x01\xda\x6d\x49\xa9\x4f\xa8\x88\xec\x00\x3c\x1e\x50\xee\x5c\x60\x7c\xb3\x61\x58\x44\x7a\x80\x9f\x60\x43\x6c\x48\x5e\x02\x46\xa8\xea\x5f\x02\xcb\x19\x40\xd9\x4f\xe8\x05\x84\xbd\x89\x46\x00\xd3\x45\xe4\x84\x26\xe7\x0c\x07\x26\x04\xec\x43\x85\xcd\x81\x2f\x97\x20\x67\x00\xa5\x3d\xa1\x22\xb2\x33\x30\xab\x2c\x79\xc0\x95\xc0\x77\x55\x75\x45\x42\x5f\x76\x03\x1e\x20\xfb\xb2\x24\x2b\x4f\xab\xea\xf6\x81\x65\x0c\xa0\xcc\x27\xf4\xc4\x12\x65\x01\x7c\x07\x98\x2c\x22\xeb\xd4\x7e\xa0\xaa\x33\x80\x1f\x94\xd0\x87\xed\x44\x64\x97\x12\xe4\xf4\x53\x8a\x42\x45\x24\xa2\xf8\xfa\x2e\x0f\x47\x00\x93\x44\x24\x69\x97\xe7\x32\x6c\x86\x1c\x9a\x71\x25\xc8\xe8\xa7\xac\x27\xf4\x30\xe0\x43\x25\xc9\xaa\xe5\x08\xe0\x8a\xda\x83\x6e\x49\x31\x01\x58\x12\x58\xfe\x97\x1a\xdc\x50\x41\x28\x4b\xa1\xa5\xde\xa5\x09\x4c\x48\x9a\x28\xa9\xea\x02\xe0\xdc\xc0\xb2\x23\x60\xe7\xc0\x32\xfa\x09\xae\x50\x11\xd9\x10\xd8\x2d\xb4\x9c\x14\x5c\x20\x22\x9f\x4d\x38\x7e\x19\xf0\x5a\x60\xd9\x9f\x0b\xdc\x7e\x3f\x65\x3c\xa1\xbb\xd1\x66\xab\x8e\xe3\x43\xc0\x8d\xce\x14\xd6\x8f\xaa\xbe\x03\xfc\x34\xb0\xec\x3d\x03\xb7\xdf\x4f\x19\x0a\x2d\xed\xee\x4c\xc1\x16\xc0\xcf\x13\x8e\x5f\x43\xd8\x77\xe9\x8e\x01\xdb\x1e\x40\x19\x0a\x2d\xed\xfd\x91\x92\x6f\x8b\xc8\x80\x2f\x58\x55\x97\x01\x37\x05\x94\x39\x4c\x44\xfe\x3a\x60\xfb\xfd\x94\xa1\xd0\x11\x25\xc8\xc8\x42\x2f\xb6\x63\x55\xcb\xb5\x81\xe5\x7e\x2c\x70\xfb\x40\x60\x85\x3a\x23\xf6\xa6\x21\x65\xe4\x64\x94\x88\x7c\xbe\xe6\xd8\x1f\x31\xcf\x89\x50\xfc\x5d\xc0\xb6\xfb\x09\xfd\x84\x6e\x42\x67\x4c\x88\x92\x38\xad\xfa\x0f\xb7\x2e\xbd\x2b\xa0\xbc\x35\x62\xc8\x2d\xe5\x9f\xc8\xc9\x18\x11\xf9\x68\xcd\xb1\x7b\x03\xca\x5b\xaf\xf5\x29\xc5\xf9\x20\x2b\xb4\x07\xf8\x5a\xcd\xb1\xc7\x02\xca\x5b\x3f\x60\xdb\xfd\x84\xde\x8e\x5b\x00\x9c\x04\x0c\x01\x36\xc0\xee\xd2\xe1\x98\x2b\xe4\x16\xb4\xc7\xc0\x5e\xcd\x38\xe0\xcc\xaa\xbf\xe7\x02\x4b\x09\x73\x23\xbe\x15\xa0\xcd\x3a\xda\xe9\x24\xb6\x0e\xb0\x3d\x30\x0a\x5b\x78\xef\x81\x1f\x9f\x9e\xac\x6c\xad\xaa\xcf\x57\xf5\x6b\x26\xf0\xe9\x00\x72\xbe\xa2\xaa\x37\x06\x68\x77\x00\xed\xda\x30\x47\x55\xdf\xc3\xec\xa3\xb3\x80\x9f\x89\xc8\xfa\xc0\xe1\xc0\x57\x81\xbd\x28\xef\x66\xfb\x02\xe6\x2e\x5a\xa1\x8f\x30\x0a\x8d\x03\xb4\x59\x47\xbb\x87\xbc\x7e\x54\x75\x89\xaa\x5e\xaf\xaa\xa3\x80\x6d\x80\xeb\x81\xf7\x4b\x10\xbd\x77\xcd\xdf\xf3\x03\xc9\x09\xd5\xee\x00\x3a\x46\xa1\xd5\xa8\xea\xf3\xaa\xfa\x75\x6c\x53\x22\xe4\x0e\x0e\xd4\x3b\x7a\x87\x78\x92\x56\x02\xff\x1b\xa0\xdd\x3a\xbc\x0d\x6b\xce\xf9\xea\x13\xd8\x17\xb4\x19\x36\xf9\xd9\x18\x9b\xdd\x0d\x71\xb2\x96\x03\x8b\x31\xeb\xc6\xcb\xc0\x33\xc0\x53\xc0\x1c\x55\x5d\xd9\xa4\xed\x3d\x80\xcb\x81\x4f\xfa\xea\x6f\x0d\xeb\xa9\xea\x52\x27\xeb\x04\xe0\x22\xcf\xed\xcf\x55\xd5\xad\x6a\x0f\x3a\x9f\xe0\xbb\x31\xb7\xcf\xa9\xaa\x5a\x78\x96\x5d\xe8\x1d\x2a\x22\x7f\x03\x1c\x0a\x1c\x8c\xb9\x2e\x6e\x98\xb3\xa9\xc5\x22\xf2\x10\xe6\x3c\x7d\x87\xb3\x53\xf6\xa3\xaa\xd3\x45\x64\x27\xe0\x9f\x81\xe3\x0a\x74\xb9\x11\x1f\xc3\x5c\x3a\xc1\x1c\xa5\x7d\xd3\x48\x51\x3b\x60\xf3\x85\xbd\x80\x1f\x89\x48\x1f\x30\x09\xb8\x46\x55\x73\x3d\xd1\x99\x15\xea\x9e\xc4\x7d\x81\x63\x81\xbf\xcf\xd3\x46\x02\x43\x80\x03\xdc\xcf\x4a\x11\xb9\x1b\xb3\x80\xdc\x56\x79\x72\x5d\xe0\xd2\xf1\x22\x72\x1f\xf6\x7e\xdd\xc0\x83\xdc\x0a\x5b\xb2\x5a\xa1\xcb\x3c\xb6\x5b\xe1\xa1\x06\xc7\x6b\x27\x5f\x9b\x62\xee\xa5\xa7\x89\xc8\xbd\xc0\x4f\x55\xf5\xc1\x2c\x82\x52\xbf\x43\x45\xa4\x57\x44\xc6\x63\xf1\x25\x77\x02\x07\x12\x66\x96\xdc\x8b\xdd\x28\x53\x80\xff\x11\x91\x6f\x89\x48\xbf\x1c\x55\xbd\x15\x0b\xeb\xf3\x39\xc9\xa8\xbd\x39\x96\x62\x4f\xd5\x5d\xc0\x64\x2c\x6c\x63\x3a\xb6\xae\xce\xc3\xef\x1a\x1c\x1f\xd5\xe0\x78\x0f\x30\x1a\x78\x40\x44\x1e\x74\x5e\x8a\xa9\x48\xf5\x0e\x75\x1b\xd9\x97\x60\x43\x44\xd9\xac\xc2\x2c\x21\xc7\xb9\xa5\x4e\xa5\x4f\xc3\xb1\x2f\x7b\x2b\xcc\xcd\xa3\xc8\x7c\xe0\x44\x55\xbd\xd8\xb5\x3b\x08\x78\xaf\xd1\x3b\xdd\x85\x40\xee\x07\x1c\x85\x2d\x79\x5a\xf1\xac\xaa\x7e\x3c\xa1\x9d\xb5\xb0\xd0\xc9\x21\x29\xfb\x78\x13\x70\xb2\xaa\x36\x35\x20\x34\xfd\x12\x44\x64\x08\x70\x29\xb6\x36\x2c\x9b\xa5\x98\x7b\xc8\xe5\xaa\xda\xd7\xec\x44\xd7\xcf\x5d\xb0\x21\xfb\x48\xb2\x87\x5a\x9c\xa5\xaa\x3f\xce\xda\x41\x11\xf9\x14\xe6\xed\x30\xba\xc9\x69\xe7\xa8\xea\xd9\x09\xd7\x8e\xa2\xf1\x93\xdb\x88\x25\xc0\xf1\xaa\xfa\xcb\x46\x27\x34\x54\xa8\x88\xec\x8e\xbd\xa0\x37\xcf\x28\xd4\x07\xb7\x00\xdf\x6b\x75\x37\x26\xe1\x76\xa0\x26\x00\xff\x04\xfc\x6d\xca\xcb\xce\x50\xd5\xf3\xb3\xca\xaa\x92\x39\x0e\xb8\x8a\xfa\x0d\xf8\x55\xc0\x47\x54\xf5\xa5\x84\x6b\xae\x01\xbe\x99\x53\xe4\xaf\x81\x6f\xa9\xea\xe2\xda\x0f\x12\x15\x2a\x22\xdf\xc1\x9e\x8e\xb2\xd7\xa9\xef\x63\xde\xee\xff\x56\xb4\x21\x37\x03\xbf\x0a\x73\xe3\x6c\xc4\x32\xe0\x54\xe0\x8a\x66\xcb\xa6\x94\xf2\xb6\x05\x7e\x8b\x2d\xd7\x2a\x4c\x55\xd5\x43\x12\xce\x1d\x8c\xcd\x01\x3e\x5c\x40\xe4\xb3\xc0\xfe\xb5\xb3\xe1\x01\x0a\x75\xe3\xfa\x44\x6c\x43\xbd\x6c\xde\x07\xbe\xa8\xaa\xbf\xf1\xd9\xa8\x88\x9c\x0a\xfc\x2c\xe1\xa3\xf9\xc0\x7e\xaa\xfa\xb4\x47\x59\x23\x80\x19\xd8\x3b\x1d\x60\x57\x55\xfd\x43\xc2\x79\xc7\x00\xbf\xf0\x20\xf2\x75\x4c\xa9\x8f\x56\x0e\xf4\x2b\xd4\x29\xf3\x97\xd8\xcb\xbe\x1d\x8c\x53\xd5\x20\xbb\x42\x22\x72\x26\x70\x4e\xd5\xa1\x45\xd8\x97\x3d\x37\x80\xac\x9d\x81\x87\x81\x7b\x54\xf5\x80\x84\xcf\x7b\xb0\xcd\x94\x6d\x3d\x89\xfc\x33\x30\xba\xa2\xd4\xde\x2a\x21\x57\xd3\x3e\x65\x5e\x11\x4a\x99\x8e\x73\x81\x9b\xdd\xef\x2b\xb1\x91\xc0\xbb\x32\x01\x54\xf5\x8f\xc0\x0f\x69\x1c\x3b\x73\x30\xfe\x94\x09\xb6\xe4\xba\x47\x44\x46\x82\x7b\x42\x45\xe4\x1c\x06\xda\x05\xcb\xe4\x15\x60\x9b\xca\xd6\x5b\x28\x9c\xc3\xf7\xb3\xc0\x0d\xaa\x7a\x72\x48\x59\x4d\xfa\xb0\x16\xb6\x81\xe1\x53\xa1\x15\x62\x60\x64\xaf\x88\x1c\x4e\xfb\x94\x09\x70\x5e\x68\x65\x02\xa8\xea\x9b\xd8\xec\x37\xf3\xf2\xc4\x23\xdf\x26\x8c\x32\xc1\xde\xdb\x77\xf4\x88\xc8\x5b\xa4\x5f\xdc\xfa\x66\x21\x30\xbc\x7a\xc3\x60\x4d\xc5\x6d\x48\xcc\xa1\xd8\xcc\xb6\x15\x7d\xbd\x0c\x34\xee\x96\xcd\xe4\x0f\x88\x32\x7b\x80\x7f\x27\xac\x32\x01\x1e\xeb\x05\xea\xa6\xd5\x25\x32\xb5\x8d\xb2\xcb\xe4\x44\x60\x4c\x09\x72\x1e\xeb\xa5\xb1\x25\x20\x34\x2b\x80\x47\x5b\x9e\xd5\xe5\x88\xc8\xbe\x24\x7b\xea\x87\xe0\xde\x5e\xcc\x72\xd2\x8e\x61\x6f\x6e\x19\x93\xa1\x0e\xe0\x28\xca\xd9\x71\x5b\x08\xcc\xea\x55\xd5\xb7\x81\x7b\x4a\x10\x58\xcb\xbc\x36\xc8\x6c\x07\x5e\x53\xd8\x35\xe1\x0e\x55\x5d\x59\xb9\x73\x26\x97\x24\xb4\x9a\x37\xdb\x20\xb3\x1d\x84\x0e\xf9\xaf\x70\x1d\xac\x1e\x0a\x6e\xa1\x24\x37\xc3\x2a\xda\x96\x3a\xb5\x64\xca\xf8\x3f\x9f\x55\xd5\x87\xc0\x29\xd4\x2d\x1d\x0a\x5b\x38\x32\x30\x1f\xcb\x28\xf6\x41\x20\xf4\x52\x05\x2c\x27\x13\x30\xd0\x85\xe4\x52\xcc\xca\x12\x2a\x1e\xe5\x0f\x98\xd5\xfd\xb7\xaa\xfa\x42\x20\x19\x9d\x48\x68\x85\xf6\x51\x65\xb9\xa9\xf6\xd5\x59\x28\x22\x17\x02\x67\x79\x14\xb6\x14\x73\x1f\xb9\xb8\x8c\xe4\xc5\x1d\x4a\x5a\x23\x7b\x5e\xce\x57\xd5\x77\x2b\x7f\xd4\x3a\x79\x5d\x88\xed\x37\x16\xed\xc4\x72\xcc\xb7\x75\xa2\xdb\x43\xfd\x20\x23\x01\xdb\x9e\x43\x4d\xe4\x79\x9d\xc7\x82\x88\x1c\xc1\x6a\x53\x53\x1e\x6e\x03\x4e\x6a\xf5\x44\x8a\x88\x60\xee\x19\xb7\x17\x90\xd5\xd1\x38\x87\xb3\xb7\x69\x9d\xaf\x3e\x0f\xab\xb0\xc2\x05\x03\x32\x8f\xd6\x2d\x78\x55\xf5\x3f\xb1\x59\x6f\x56\x96\x00\x5f\x53\xd5\x43\x9b\x29\x53\x44\xc6\x88\xc8\x03\x98\x3b\xe8\xd9\x39\xe4\x74\x13\xbb\x10\x46\x99\x00\x57\x26\xa5\x91\x6d\xb4\x83\x71\x2c\xd9\x16\xc4\x0a\xec\xa0\xaa\xff\xd1\xe8\x04\x11\xd9\x45\x44\xa6\x63\x3b\x53\x7b\xba\xc3\x3b\xba\x3c\x80\x6b\x2a\x07\x07\x6a\x77\x0e\x56\xe8\xa0\x8e\x44\x85\xaa\xea\x42\x2c\x3f\x5f\x9a\x35\xd4\xdd\xc0\x6e\x8d\x5c\xf7\x45\x64\x88\x88\x5c\x8d\x55\x76\xa8\x4d\x54\xd1\x43\x73\x27\xae\xae\xc5\x59\x58\x42\x28\xf4\x2d\xe0\x50\x97\x30\xab\x8e\x86\x7b\x8c\xaa\x3a\x8b\xd6\x89\x82\x6f\xc2\x9c\x94\xfe\x9c\xf4\xa1\x88\xec\x83\xdd\x4d\xff\xd0\xa4\x8d\xaf\xb7\x90\xd1\xad\xec\x0d\x7c\xc4\x73\x9b\xef\x03\x87\x57\x07\x28\xd7\xd2\x74\x7c\x8f\xe3\xf8\xa9\x28\x8a\xde\x01\xf6\x49\xf8\xf8\x66\x2c\x2a\x39\x29\xc1\x70\x4f\x14\x45\x67\x60\x33\xb0\x56\x31\x28\xc3\xa2\x28\xba\x3f\x8e\xe3\x97\x5b\x9c\xd7\x55\x44\x51\x74\x11\x96\x7a\xc0\x17\x15\xaf\xc8\xa6\x99\x5a\x5a\xbe\xb0\xe3\x38\x9e\x11\x45\xd1\x72\x06\x06\xc6\x4e\x07\x0e\x4b\xca\xa7\xee\x1c\x9d\x7f\x0d\x1c\x4f\xfa\xf0\x84\xe1\x71\x1c\xdf\x90\xf2\xdc\x8e\xc7\x15\xf3\xb9\x04\x7f\xe1\x9a\xcb\x81\x23\xd2\xb8\xb8\xa6\x9a\x81\xc5\x71\xfc\xfb\x28\x8a\xfa\xb0\x98\x8e\x57\x31\xb7\xc1\xba\x61\xd6\x39\x10\xdf\x81\x55\x6a\xc8\xc2\x96\x51\x14\xcd\x88\xe3\xb8\x94\xa0\xd8\xd0\x44\x51\x74\x0d\x16\x85\xee\x83\x37\x80\x03\x54\x35\x95\x45\x2c\xd3\x1d\x24\x22\xa3\x81\x37\xdd\xfb\xb5\xf6\xb3\xc1\x58\xb4\x56\xde\x64\x8d\xcf\x00\x3b\xb6\xb3\xde\x99\x0f\x44\xe4\x73\x58\x09\x30\x1f\x3c\x8e\xbd\x33\xe7\xa5\xbd\x20\xd3\x1a\x29\x8e\xe3\x17\xe2\x38\xae\x0b\xa9\x73\xee\x89\x93\x29\xe6\x66\xb1\x11\xd0\x13\xc7\xf1\xfd\x05\xda\x68\x2b\x2e\x15\xde\x34\xfc\xd4\xa5\xb9\x18\x38\x52\x55\x5f\xcf\x72\x91\x2f\x4b\xfa\x85\xd8\x32\xa7\x28\xa7\xbb\xf0\xfb\x6e\xe5\x47\x14\x1f\x6a\x9f\xc3\x0a\xe2\x9d\x98\xc7\x81\xae\xf0\x4b\xdb\x43\x1d\xb3\x5a\x16\x00\x3b\xa9\x6a\xe8\x2c\xd3\x5e\x71\x37\xe2\xfd\xe4\x7f\x48\x5e\xc7\x72\xf9\x5e\x52\xc4\x13\xb2\x90\x42\x5d\xd0\xed\xd3\xe4\xcf\xad\xd0\x88\x59\xc0\x9e\x2e\x8f\x6d\xc7\xe3\x76\xbb\x9e\xc4\x92\x55\x66\xe5\x25\x6c\x46\x7c\xb5\x73\x07\x2a\x44\x51\x85\x4e\xc3\x66\xbe\x21\xb8\x1d\x5b\x77\x75\xb4\xdf\xae\x7b\x6f\xde\x47\xb6\xbc\xfa\x0b\xb1\x77\xed\x0d\xc0\x83\x45\x43\x19\xab\xc9\x9d\x23\x41\x44\xf6\x27\x9c\x32\xc1\x72\x38\x9c\xce\xc0\xa8\xb1\x8e\xc2\x6d\xef\x5d\x47\x73\x65\xbe\x0b\xbc\x80\x45\x9c\x3d\x86\xcd\x80\x1f\xf7\xa9\xc4\x6a\x72\x29\xd4\x6d\x1e\x5c\xe2\xb9\x2f\xb5\xbc\x8b\x95\x82\xec\x74\x4e\xc2\x62\x6a\xab\x3d\x13\x96\x62\xfd\x7f\xcd\xed\x8b\x67\xc2\x55\x63\x1a\x0f\x1c\x9b\xb5\x64\x65\xde\x27\x74\x1c\x96\x0a\x26\x24\xe7\x86\x0a\xf9\xf3\x85\xfb\xb2\x5f\xc3\x53\x99\x10\x11\xd9\x13\x0b\x43\xac\xc4\x95\x4e\x25\x63\x52\xe6\xbc\x79\x8a\x4e\x6b\x79\x62\x31\xfa\xf0\x9f\xcd\xcb\x0b\xae\x64\xe6\xec\xa4\x3d\xec\x9c\xed\x6d\x0c\x8c\xc5\x72\xf7\x6e\x57\xf3\xf1\x0f\xc8\xa8\xd0\xcc\x93\xa2\x9c\xd9\x3b\xb2\xf2\x0d\x55\xbd\xae\x4a\xe6\x26\xc0\x77\xb1\xe4\x16\x6d\x29\x58\xee\x36\x4f\x2e\x72\xfd\x58\x88\x79\x66\x3c\x00\x3c\x9c\x94\x14\xa3\x49\x3b\xeb\x63\xe9\xf3\x76\xc7\xf2\x31\x8d\xa4\xb9\x1e\xb6\xca\x32\x52\xe5\x19\x72\x9b\x99\xc2\x7c\xf0\x22\x96\x1a\xa0\x9a\x53\x81\xef\x03\x23\x44\xe4\xe8\x6a\xa7\xa8\x32\x70\xc5\x7b\x26\xb1\xda\xbe\xb9\x11\x70\x8c\xfb\x41\x44\xde\xc0\x92\x27\xbf\x80\xf9\x37\x2f\x65\x75\x26\xd1\xc1\x98\x8f\xd6\x30\x2c\x05\xdd\x66\x19\xc5\x8f\x25\x43\x39\xaf\xac\x7b\xb9\x7f\x85\xdd\x9d\x21\x53\x8f\x7f\x4f\x55\x2f\xad\x92\x39\x04\xf3\xe3\xad\xc8\x7c\x14\x38\xa4\xac\x8d\x07\x97\x08\xe3\x36\xc2\x25\x8e\x6c\xc5\x6c\x55\xad\x1d\x8a\x1b\x92\x75\x57\x63\x6f\xc2\x2a\xf3\x6d\x9c\x4b\x7f\x15\xe3\x6b\x64\x7e\x06\x98\x25\x22\x9f\x09\xd8\x0f\x00\x44\xe4\x50\x6c\x93\xa3\x5d\xca\x04\xd8\xd6\x6d\xe0\xa4\x22\xab\x42\x93\x0c\xdd\x3e\x99\x92\xb0\x5b\x92\x94\xc8\x63\x38\xf0\x90\x88\x1c\x1f\xa2\x13\x22\x32\x48\x44\x2e\x03\xfe\x8b\x72\x3c\xdf\x5b\x91\x26\x05\x1d\x90\x5d\xa1\xb5\x3e\x41\xbe\x19\x60\xe4\x16\x91\xcd\xb1\x27\x32\x89\xb5\x81\x4b\x45\xe4\x56\x97\x64\xca\x0b\x2e\x2d\xcd\x13\x84\x49\xe3\x9a\x97\xd4\xa3\x51\x96\x6c\x9c\x83\x09\xeb\x34\xbc\x18\xf3\x84\xa8\x66\xdf\x14\xd7\x1d\x02\xcc\x16\x91\x03\x8b\x08\x17\x91\xc1\x22\x32\x11\x0b\xd9\xf0\x65\x9c\xf6\xc5\xa7\xd2\x9e\x98\xe5\x09\xdd\x9a\x70\x3e\xa6\x00\xbf\x4b\x70\x69\x49\x3b\xd4\x0c\x03\x7e\x23\x22\x37\x89\xc8\x46\x59\x05\x8b\xc8\x18\xcc\x99\xed\x14\xc2\xfe\x8f\x79\x49\x7d\x83\x65\x51\x68\x5d\x8a\x6d\xcf\x24\x19\xb6\x6b\xf3\xc1\xb7\x62\x2c\x30\x47\x44\xc6\xb9\x0d\x90\xa6\x88\xc8\x47\x45\x64\x0a\xe6\x2b\xdc\x8e\x24\x95\x69\xf9\xb0\x88\xa4\x7a\x97\x67\x51\x68\xe8\xa2\x74\x03\xdc\x5a\xdc\x72\x25\x8f\x1b\xe4\x50\x6c\xcd\x38\x43\x9a\x54\xa8\x17\x91\x1f\x63\x6e\x2f\x3e\x0c\xf3\x65\xb0\x71\x9a\x93\xb2\x28\x34\xf3\x50\x96\x81\xbf\x60\x76\xd5\x6a\x8a\x96\xa9\xdc\x15\x78\x44\x44\x7e\x25\x22\x5b\x24\x7c\xfe\x16\xb0\x4e\x41\x19\x65\x92\xca\xad\x25\x8b\x42\x43\x56\x3d\x9a\x9f\xe0\x1c\xe6\xcb\x49\xf9\xcb\xc0\x93\x6e\xcb\xad\x9a\x8b\xb1\xad\xbb\x6e\x21\xd5\xae\x5e\x16\x85\x86\xac\xae\x37\x2f\xe1\x98\xcf\x11\x61\x08\x35\x51\x00\xce\x1e\x79\x34\xe1\x0b\xaa\xfb\x22\x55\xd1\x84\x2c\x0a\x0d\x99\x82\x26\xe9\x4b\xf5\xb6\xb6\x74\x7c\xdf\xd5\x49\xe9\x47\x55\x5f\x01\x0e\x02\x12\xe3\x44\x3a\x8c\xc4\x70\x93\x5a\xb2\x28\xb4\xce\x4b\xde\x23\x49\x9b\xed\x6b\x27\x1c\x2b\xc2\xa6\x98\x37\xff\x00\x9c\x8f\xf1\x78\x2c\xed\x6a\x27\x93\xca\xca\x94\x45\xa1\x99\x2d\xef\x19\x48\x2a\xc5\x18\xc2\x4c\x76\x76\x52\xf8\xa2\x8b\x89\x3d\x9a\xce\x56\x6a\x2a\xff\xdc\x2c\x0a\xcd\x5b\xb3\x24\x0d\x83\x13\x8e\xd5\x25\xc8\xf7\xc0\x06\x98\xbb\x48\x1d\xae\x14\xe4\x58\xca\x29\xa0\x97\x87\x37\xd2\x9c\x94\x45\xa1\x21\xa3\xc3\xd6\x4d\x38\x16\x2a\x61\xd3\x78\x11\x39\x28\xe9\x03\x55\xbd\x19\x2b\x8e\xb3\x28\x90\xec\xbc\x2c\x27\x65\xc1\xf7\x2c\x0a\xfd\x53\xbe\xbe\xa4\x22\x29\x49\x47\xc8\x8a\xb8\xd7\x37\x58\x9b\xe2\x12\x38\xed\x88\x15\x98\xeb\x14\xe6\xa6\xf5\xd4\x48\xad\x50\xe7\xbd\x16\x6a\x8a\x3f\x2c\xe1\x58\xc8\x3c\xbe\x1b\x02\xb7\x39\x4f\x84\x3a\xdc\xec\x77\x0f\x2c\x2d\x6a\x27\xcc\x80\x9f\x68\x7d\x8a\x91\xd5\x7c\x56\x97\xa4\xc1\x13\x5b\x24\x1c\x7b\x9e\xb0\x93\x94\xed\x81\x29\xce\x25\xb5\x0e\x55\x5d\xe9\xca\x67\x6d\x87\xdf\x50\x8f\xac\xac\xc0\xea\xc1\xa4\x22\xab\x42\x2f\x27\xcc\xbb\x74\x7d\x11\x19\xb0\x57\xec\x76\x8e\x42\x27\xab\x1a\x0d\xdc\xd2\x48\xa9\xae\x1f\x73\x55\xf5\x30\xcc\x26\x19\xda\x39\xae\x9a\xe5\x58\x16\xec\x6d\x54\x35\x75\x72\xcd\x4c\x0a\x55\xd5\xfb\x31\x33\xda\x09\x98\xab\xa5\x4f\x92\xdc\x3c\xca\x78\x8f\x1d\x08\x4c\x6d\x34\xfc\x56\x50\xd5\x99\xaa\xba\x0f\x56\xf4\xf6\x5f\x09\x33\x0b\x07\xcb\x28\xf3\x8f\xc0\xa6\xaa\xfa\xcd\xac\xbe\xc9\xb9\x63\x5b\x5c\x09\xc8\x83\x30\x7f\xd2\x31\x14\xdf\x08\xa8\x2b\x28\x27\x22\x5f\xa5\xde\x03\x30\x14\x4f\x62\xce\x67\xa9\x5c\x32\x5d\x4c\xcb\x1e\x58\xb4\xfa\xfe\xe4\x77\x3c\x5f\x86\x39\xbe\xdd\x05\x4c\x53\xd5\x42\x93\x4f\x2f\x39\x00\x44\x64\x03\xcc\xdf\x68\x14\x66\xe5\xf8\x24\xe9\x15\xbc\x0a\x33\x2e\x5f\xa9\xaa\x97\xd7\xb4\x3b\x1c\xff\x23\x41\x33\xde\x00\x8e\x56\xd5\x69\x59\x2f\x74\x1b\x16\x23\xb1\x11\x6c\x04\x66\x1d\x19\x8a\x8d\x82\x83\xb0\xc9\xd5\x32\x6c\x3d\xbf\x00\x8b\x03\xfd\x13\xa0\x49\xb9\x2a\xf2\xe2\xad\x06\x77\x35\xee\xe9\xdd\x12\x33\x1a\x47\xd4\x9b\x7e\xde\xc4\xd6\x7a\x2f\x63\x53\xf2\x86\x33\x49\x11\x99\x49\x7d\x25\xdc\xd0\xfc\x02\x38\xa5\x51\xba\x9e\x4e\x26\x88\x42\x7d\x22\x22\xc7\x61\x95\x12\xcb\xe6\x55\x2c\xe4\x63\x52\xa8\x48\xb1\x10\x74\x83\x42\x87\x62\x43\x94\xef\xcd\xfa\xb4\x3c\x03\x9c\x0f\xfc\xca\xe7\xd0\x18\x8a\xb2\xeb\x83\x66\x46\x55\x17\x51\x2c\x3b\x68\x51\x3e\x8e\xb9\x97\x76\x45\x49\x92\x8e\x57\xa8\xe3\x6c\x6c\x81\xdd\x4e\xba\x22\x0d\x6c\x57\x28\xd4\xad\xc5\x26\xb5\xb1\x0b\x8b\x31\x97\x95\x8e\xa7\x2b\x14\xea\xf8\x21\xe5\x95\xcc\xa8\xe5\x3c\x55\x0d\x69\x2c\xf0\x46\xd7\x28\x54\x55\x17\x60\x61\x85\x65\xf3\x14\x5d\xf2\x74\x42\x17\x29\xd4\x71\x15\xe5\x9a\xb5\x56\x02\x13\xba\x61\x76\x5b\xa1\xab\x14\xea\x6c\x82\x47\x51\x9e\x01\xfa\x2c\x55\x9d\x59\x92\x2c\x2f\x74\x95\x42\x01\x54\xb5\x0f\xf3\xb5\x0d\xbd\xd8\xbf\x13\xf8\x49\x60\x19\xde\xe9\xc4\xc0\x9c\x96\xc4\x71\xfc\x62\x14\x45\x8b\x09\x57\x93\xf3\x39\x2c\x53\x77\x27\x18\xb7\x33\xd1\x95\x0a\x05\x88\xe3\xf8\xd1\x28\x8a\xd6\x25\x7f\x3a\xd7\x46\xcc\x07\x46\xa9\x6a\x2a\x1f\x9e\x4e\xa3\x6b\x15\x0a\x10\xc7\xf1\x7d\x51\x14\x0d\xc2\x32\x8a\xf8\xa0\x0f\xd8\xab\x51\x41\x84\x6e\xa0\xab\x15\x0a\xfd\x4a\x5d\x82\x79\x1f\x14\xd9\x9b\x56\xe0\x0b\x59\x92\x0d\x77\x22\x5d\xaf\x50\x80\x38\x8e\x1f\x89\xa2\xe8\x49\xec\x9d\x9a\x27\xa8\xea\x2e\x60\xbf\x3c\x69\xdc\x3a\x8d\xae\x9b\xe5\x36\x42\x55\xa7\x62\x8e\x5f\x33\x32\x5c\xb6\x02\x4b\x10\xb9\x9f\xaa\x86\x72\x29\x29\x95\x8e\x37\x9f\x65\xc5\x65\xfc\x3a\x09\x38\x93\xe6\x11\x73\xb3\x81\x63\x54\xb5\x2b\xac\x28\x69\x59\xe3\x14\x5a\xc1\xa5\x93\x9b\x88\x25\x9a\xac\xfe\x3f\x17\x03\xe7\x61\x25\x30\xbb\x66\x07\x28\x2d\x6b\xac\x42\x2b\x88\xc8\x56\x58\x32\x8c\xc3\xb1\xad\xc3\x0b\xba\x65\xa3\x3d\x0f\xff\x07\xae\x89\x0f\x80\x3a\x45\xac\x0b\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x14\x10\xdb\x07\xdd\x10\x00\x00")

func sourcedataShapesShape8ShapePngBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataShapesShape8ShapePng,
		"sourcedata/shapes/shape-8/shape.png",
	)
}

func sourcedataShapesShape8ShapePng() (*asset, error) {
	bytes, err := sourcedataShapesShape8ShapePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/shapes/shape-8/shape.png", size: 4317, mode: os.FileMode(420), modTime: time.Unix(1715607041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/shapes/shape-8/shape.png": sourcedataShapesShape8ShapePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"shapes": &bintree{nil, map[string]*bintree{
			"shape-8": &bintree{nil, map[string]*bintree{
				"shape.png": &bintree{sourcedataShapesShape8ShapePng, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
