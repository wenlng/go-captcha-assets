// Code generated for package thumb_4 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/thumbs/thumb-4/thumb.jpg
package thumb_4

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataThumbsThumb4ThumbJpg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x79\x54\x53\xf7\xb6\xc7\x4f\x06\x32\x11\x20\x61\xb0\x11\x82\x1c\x12\x64\x10\x43\x26\x13\x48\x18\x43\xc2\x54\x19\x23\x93\xf6\xd2\x12\x32\x48\x80\x0c\x84\x00\x01\x44\x19\x2a\x4e\x40\x11\xc5\x42\x2d\x0a\x95\x0a\x08\x45\x11\x41\x85\x5b\x2e\x38\xa1\xe0\x80\x22\x22\xa0\x82\x45\xae\x0a\x4e\xdc\xa2\xf8\x2a\x9a\xb7\xf4\x49\x75\xbd\x75\x57\xd7\xea\xf7\xaf\x73\xf6\xd9\x9f\xef\x3e\x7b\xff\xf6\x39\xfa\xdb\xfa\xfb\x00\xc1\x4f\x27\x97\x01\x40\x50\xd0\x2a\x00\x05\x7c\x92\xfe\x09\x80\x17\xa4\x8b\x93\xb3\x00\x08\x00\x07\x00\xc0\x03\x00\xf4\xf7\x61\x09\x89\x5a\xad\x9a\x4b\xa5\x2a\xd3\x5c\x44\x12\x55\x82\xd4\x45\xac\x52\x50\x75\x22\x35\x95\xee\x42\xa3\x02\x1e\xde\x3a\xb5\x48\x9c\x2c\xd5\x82\x09\xd2\x8d\x72\xa5\x27\xe9\x79\xd7\xbf\x48\xa0\x5c\xe2\x49\x8a\x61\x85\xd0\x42\xd4\x7c\x69\xa2\x3c\x30\x5b\x23\x5d\x97\x1d\x1a\x29\xce\x4e\x16\x73\x24\x24\x6f\x2f\xd0\x43\xc7\xd5\x29\xd4\x0a\xa9\x56\x04\xea\x14\x29\xca\x34\xae\xce\x93\xf4\xc1\x9c\xab\x4c\xe3\xbe\x0f\x53\x49\xe0\x87\x14\x6d\xb2\x27\x89\xf7\xfe\x01\x18\x1b\x12\x0e\xf2\x55\x1a\x29\xc8\x72\x61\x51\xc4\x34\xfa\x1a\xd0\x95\xe3\x42\x67\xd1\xd7\xb8\xd1\x57\x83\x0c\x1a\x9d\x49\xa5\x31\xa9\x74\x26\x85\xce\xe0\xd2\x38\x5c\x3a\x0b\xfc\x28\x92\x17\xe8\xa1\x91\xc8\xb8\x42\x81\xff\xc7\x5a\x1a\x89\xcc\x93\xf4\xb1\xa9\xcc\xcc\x4c\x97\x4c\xa6\x8b\x4a\xb3\x91\x4a\xe7\x70\x38\x54\x1a\x83\xca\x60\x50\x34\x12\x19\x25\x2d\x4b\xa9\x15\xe9\x28\xca\x34\xf2\x92\x83\x40\x9a\x26\xd6\xc8\xd5\x5a\xb9\x4a\x09\xbe\xbf\x17\x25\xa8\xd2\xb5\x9e\x24\xd2\x52\x0b\x0a\x75\x48\xc8\x9f\xc6\xff\x75\x5a\x0a\x05\x75\x29\x3b\x4d\x2b\x94\xca\xfe\x3a\x3b\x2d\x32\x4b\x2d\xa5\x0a\xa5\x69\xaa\x74\x8d\x58\x2a\x94\xca\xc8\x9f\x95\xfa\x6b\xf4\x7d\xa2\x3a\x24\x84\x1b\xa6\x91\x6f\x94\x2b\x45\x29\x02\x95\x38\x5d\x21\x55\x6a\x83\x04\x9e\x24\xa6\x1b\x53\xe0\xcb\xe6\xf8\x73\xfc\xdd\x68\x02\x9e\x2f\xcb\x8d\xc7\xa4\xd1\x79\x34\x3e\x7d\x8d\x2b\xdf\x9f\xcd\xe2\x2c\xb1\x9f\x33\x3a\x85\xda\x45\x22\x97\x70\x79\x0c\x3a\xcd\x9f\xef\xca\x67\xb9\xfa\xb9\xd2\xe9\x7e\x7c\x5f\x37\x01\x5f\xc0\x11\x08\xd8\x02\x01\x93\xc1\x66\xf0\x96\xd8\x20\x65\x9a\x56\xa4\x14\x4b\x97\x58\xf9\x27\xd6\xf7\x2f\x59\x2e\x5f\x23\x15\x69\x55\x9a\x48\x95\x2a\x65\xe9\xe4\xc3\x13\x55\x5a\x55\x5a\xa2\x4a\x0d\xf2\xf9\xa0\x63\x8c\x5c\x29\x51\x65\xa6\x39\xbd\x3f\x95\x8f\x2f\x2a\xd5\xc8\x33\xa4\x12\x7f\x8d\x4a\x01\x7e\x18\x2b\x57\xfe\x5f\xca\x8b\xe9\x22\xa6\x48\x26\x96\x51\x24\xae\x1c\x57\x8a\x98\xb3\x86\x4d\x11\xd1\x24\x34\x8a\x8c\x2e\x95\xb1\xc4\x74\x19\x3b\x81\xc6\x24\x7d\xe4\x25\x7f\x67\x5c\x54\x2f\xd0\x83\xfa\xff\xf6\x63\x29\x24\x14\xf8\xbf\xbf\xfc\x73\xdb\xbd\xc0\x4f\xdf\x8b\x54\x29\xf1\x24\x69\x48\xde\x5e\xfa\x67\x80\xf1\x87\x4e\x01\x49\x0f\x00\x00\x10\xfd\x38\xf0\x2d\x80\x80\xc3\xe1\x06\x70\x84\x81\x01\x02\x8d\x30\x40\xa0\x0d\x51\x08\x04\xca\x10\x8b\xc1\x18\x62\x30\x58\x1c\xf6\x83\x70\x58\x63\x13\x9c\x89\x31\xd6\xcc\xcc\xdc\xdc\xcc\x8c\x68\x65\x65\x45\xb4\xf9\x53\x10\x24\x12\x69\x84\x35\x22\xe0\x70\x04\x4b\x0b\xbc\x85\xa5\xcd\xdf\x95\xbe\x07\xc0\xa3\x00\x0f\x60\x1f\x0c\x82\x07\xa0\x78\x08\x0c\x0f\xd1\x9f\x03\x74\x00\x00\x85\x41\x20\x9f\xfd\x34\x60\x70\x00\x02\x35\x40\x41\xde\x0b\xf8\x5c\x10\x28\x0c\x07\x40\xa1\x10\x18\x0c\x0a\x37\x80\x19\x7c\x8c\xe1\x61\x80\xad\x29\x9c\xce\x33\x8b\x20\x89\x18\xe6\x06\xa9\xf9\xbe\x64\x66\x6d\xef\xdc\x8b\xd6\xeb\x05\x08\x3c\xe4\xff\x5c\x60\x9f\x3c\xf0\xb6\x3c\xa8\x28\xd5\x54\x3f\x06\x60\x61\x10\x00\x8a\x87\xe1\x01\x6f\x60\x5e\x0f\x10\xf7\xdb\xdf\x8f\x3f\xde\x65\x3c\x23\xca\x28\x6b\x1d\x8a\x0b\x3d\xbd\x0e\xeb\x53\x5a\xe5\xb4\xd1\xdc\x7f\xdb\x2d\x3a\x1a\x73\xbd\x95\x13\x33\xcc\x2a\x4a\x58\x8d\x2a\x4c\xe6\x27\xae\x7f\x63\x1a\x38\xbb\xf7\x6c\xe1\xdb\xe3\xa8\x40\x4b\x91\x02\x3a\x3e\x23\x70\x09\x6e\xb0\xcd\xad\x39\x61\x2a\xae\x39\xb0\x0d\x7b\xdf\x5d\x3e\x4d\x75\xd8\x15\x97\xf4\xea\x46\x87\x15\xe5\xd7\xbb\x9e\x9d\x84\x58\xb0\x2d\x29\x27\x60\xaa\xc2\xbd\x7e\xa6\xb3\xe9\x8b\xdc\x14\x6b\xc9\x0e\x84\xa0\x10\xbe\x39\x80\xac\x31\x74\x33\x4c\xa3\x38\xee\xac\xb5\xbe\x52\xec\xfc\xb6\xbb\xa9\xcb\xf7\xdc\xbb\xb2\xee\x53\x96\x53\xe1\x7b\x87\xe2\x02\xd7\x57\x98\x3b\xba\xac\xa5\x03\x82\xf2\x74\xbb\x49\x1b\x68\x7c\x30\x2a\x2c\x05\xae\xdb\x79\xf8\xde\xda\x22\xb8\x67\x7d\x94\x46\x0f\x38\x62\x78\x48\x3f\xf0\xd5\xf2\xf5\x05\xae\x84\x9a\xf6\xd7\xbd\xc9\xdd\x37\x0c\x39\xf0\x82\xb3\x41\x20\x9e\x2b\x91\xd7\x6a\xef\xdc\x3c\xab\x8c\x32\x3a\x55\x78\xe2\xd2\x76\x64\xdd\x22\xad\x64\x7f\xf2\xd7\xcd\x88\x72\x49\x69\xa1\x30\xdd\x13\x11\xb1\xf6\x52\x4d\x05\xf4\xbc\x7d\xaf\x23\x04\xa9\xb6\x0e\x34\x6b\xf1\x53\xc4\xc5\x9a\xd6\xe1\x6f\xf0\x76\x7b\xef\x83\x2e\xee\x32\xc8\x14\x5e\x49\xfc\xf2\xce\x0f\xfd\xf8\x95\xa3\xdd\xe1\x56\x0d\x05\xc6\x91\xed\x5d\x1c\xa7\x70\x53\xc3\x56\xf2\xed\xbc\x36\x1e\xa8\xcc\x6f\x80\xc1\x9b\x31\x2d\xed\x15\x4f\x13\xb6\x12\x2b\x36\xdc\x7e\x2a\x7d\xb2\xc2\xbf\x93\x58\x94\x78\xf3\x7a\x94\xaf\x73\x78\x5e\x79\x60\x04\xb0\xa7\xd1\x9e\xfb\xa3\xb3\x44\x4e\x80\x64\xaf\x2c\x6b\xda\x3b\x36\x5e\xe9\x88\x3b\x83\x02\x1f\xcf\x5d\xca\xfb\xc7\xe6\xdc\x8c\x0d\x37\x19\x3f\x1c\x5d\xef\xe5\xba\xc3\x11\x9b\x05\x37\x5b\x15\x9a\xbc\xfc\xdd\xf7\xdd\x4d\x9c\xf3\xd1\xaf\x26\x7c\xfd\x4e\x98\xec\xfd\x1f\x96\x70\x2c\x7d\xeb\x10\x39\x7c\xac\xd8\xb0\xa7\x12\xf7\x23\x30\x91\x9e\x1e\x9d\x92\x81\xfa\x09\x31\x45\x43\xd3\x1c\x7e\x77\x5b\x9b\x7a\x80\x15\x16\x07\x72\xd6\x89\x6e\x9d\x39\x94\xb8\x3a\xbb\xcc\x33\x14\x8d\x9c\xdd\x2a\x63\xc1\x16\xa5\x61\xbe\xa1\x36\xcb\x8e\x75\x73\x23\x32\xa0\x8d\x18\x3b\x58\x23\xf0\x0a\xc9\x3c\xcc\x76\x6a\xb6\xb0\x05\x56\xd9\x06\x42\x7d\x3c\xb7\x1d\x5e\x47\xd8\xfc\xc5\xf2\x41\x72\x24\x14\x61\x6c\x6e\x54\x43\x1b\xc9\xd8\xdd\x3c\x1d\x7e\xda\x42\x93\x71\xe7\xe5\x37\xad\x3b\x4b\x76\x4e\xb2\x12\xfd\x8f\xfb\x8c\x5d\xd8\x42\xa4\x27\xa8\x1b\x9b\xe2\xff\xb5\xe5\xc0\x80\x60\xff\x3c\xa3\x3e\x56\xe8\x1d\x3c\x4f\x58\x6f\x54\x5a\xcd\x60\x95\x60\xd1\xe4\x37\xf1\xc6\x03\xc9\x47\x3a\x72\x08\x2b\x13\x57\x56\x6f\x07\x20\x77\xf6\x0c\xc1\xaa\x07\xba\x76\xe9\x1c\xdb\xc7\xd3\x6e\x3d\xe2\x87\x63\x8e\xad\xe6\x61\x89\x15\xf0\x80\x58\x07\x67\xb6\x03\xe6\x5d\xae\xcf\x77\xa7\xa3\xdb\xab\x34\x1c\x34\x04\x8a\xf8\x76\xd9\x72\xdc\x03\x9b\xb3\x16\x92\xbe\x90\xe0\x85\x8b\xbf\x84\x56\x9a\x06\xb4\x20\x82\xf4\xc0\x37\x44\x5b\x6e\x0b\xb1\x63\x6d\xe3\x09\x57\x73\x55\x4c\x5c\x67\x1b\x14\xb0\x2d\x4e\xac\x23\xda\x3d\xee\x11\x98\x84\xde\x96\x6b\x68\x16\x99\x13\x03\x5f\x0e\x57\x6f\x12\xf7\x4f\x9a\x24\x43\x31\x5b\x29\x43\xbe\x32\xfa\x6f\xd9\x2a\x4c\xa5\x19\x8c\x02\xe7\x99\x71\x71\x39\x8b\xb4\x6f\x37\x0f\x8e\x18\xbb\x0f\xa7\x21\x8e\xef\x4f\x69\xc6\x45\xbe\xe1\x9b\x96\x2f\x83\x56\x7f\x2b\xff\xfe\xb9\xc5\xe0\x8f\x79\xc4\x96\x38\xe2\x86\xc5\x93\xec\xfe\x07\x46\x83\xa1\xcd\xf1\x00\x7c\x8f\x03\x10\xbd\x42\x7a\x78\x66\x10\x63\xde\x60\xa1\x81\x60\xc7\x4b\xeb\x9e\x90\x10\x13\xa5\x06\xdf\x9d\x1c\x8c\x3b\xd0\xa3\x68\x1d\x8c\x9e\xbe\x24\x05\xb3\x6b\x5f\xa1\x5f\x63\x11\x16\x62\xde\xa0\x16\x3f\xf4\xa2\xa7\x29\xa9\x65\x6c\xd4\x1a\x76\x08\x25\x89\x47\x91\x07\x0b\x6b\xcf\x08\x7f\x56\x4d\xd1\x25\x26\xb9\xca\x19\x03\x7e\xe2\x9c\x13\x60\x8a\x2e\xf0\x99\xef\x5f\xde\x72\xee\x98\x75\x33\xc1\x09\xac\x00\x7b\x2d\xf1\xf5\xa9\x7b\x8c\xa4\x89\xd0\x91\xb6\x1c\xd3\x49\x68\x5d\xf9\x4f\x6b\xca\x7e\x85\xb8\x09\x17\xd4\x0a\xe2\xb2\xa9\xa1\x4b\xed\x29\x0c\xe1\x6f\xe3\xcd\x55\x95\xe5\xc6\x95\xc5\xc3\xa9\xcd\xc4\x92\xa3\xa7\x6f\x5c\xe5\x38\x29\x92\x02\xe3\x5e\xac\x0c\xce\x3f\x85\x1e\xa2\x84\x55\x13\xe7\x62\x77\x05\xfc\xd0\x3b\xcd\xc0\xee\x08\x21\x8f\x1e\xae\xfc\xba\x7e\xe8\xb6\x35\xe1\x1f\x2f\x76\xf2\xf8\xb8\xbe\xe1\x13\x55\xbd\xda\xf2\xa8\xcb\x49\x07\x4b\xb3\x5c\x3a\x46\x12\x45\x99\x4f\x9f\x25\xed\x82\x59\x25\xb0\xfb\x4e\xd6\x3d\xae\x70\x2f\x3a\xf2\xe6\xe0\xb2\x31\x9b\xb2\x66\xbf\x28\xd3\xd5\xb2\x00\x21\x7b\x07\x97\x06\x2f\xbe\x1a\x3d\x4e\x7c\xe6\xb4\xe1\xbb\x0a\xe0\xc1\x16\x78\xe5\xbd\x84\x78\x18\xbc\xf2\x02\xcc\xb9\xb1\x0c\x65\x97\x5e\x80\xb5\xe1\x13\x7a\x65\xe4\xb8\x80\xd4\x3d\xb5\x5e\xae\x6d\xfb\xfb\x8f\x86\xa3\xbf\x42\x3e\xdd\x1a\x14\xcf\xdb\x66\x43\x5f\x99\x3e\x10\x4f\xb5\x1f\x9f\xf5\x91\x37\x5d\x3e\x9f\xe7\x6c\x1b\x1f\xbc\xcc\xee\x0f\x49\x41\x84\x5f\xb2\xb4\x83\x52\xfc\x54\x0c\x1d\xaf\x3c\x06\x47\x6d\xb5\xa9\x93\x22\xf3\xf3\x75\x5f\xe4\xd3\x18\x82\xc9\xd5\x8b\x32\xff\x75\x17\x9c\x83\x47\xbb\x27\x71\xd6\x53\x2f\xc3\x02\x1d\x46\x56\x7d\xed\xda\x37\x4d\x79\xe7\x73\xa4\x3f\x49\x53\x6c\xfd\x65\x95\xf5\xb9\x97\x48\x5b\xa4\x35\xed\x67\x6a\xf3\xcf\xb3\x17\x23\x4e\xf5\xac\x35\xe4\x84\x9b\x06\x95\x99\x9c\x28\x4b\x75\x29\xea\xe3\x3d\x26\xe0\x26\xed\x1f\x35\x5d\x6d\x19\x74\xfe\x86\x64\x2e\xe3\xc6\x5e\x3f\x92\x3f\x73\x68\x1d\x61\xce\xe8\xd2\x99\xc6\xeb\x1b\x5c\x01\x71\x5d\x09\xef\xb5\x64\xf0\x20\xf9\xbb\x57\xd3\x7b\x8f\x51\x42\x06\xd4\x68\x7f\xd6\xaf\xa5\x5c\xbe\x53\xb4\x1d\xe4\xfb\x9f\xae\x7d\xb1\xaf\xe5\x4a\x98\x5d\xc9\xf9\xc0\xb5\x91\x5c\xc7\x38\x54\xec\xd8\xbd\xe7\x7d\x8e\x96\x54\xea\x6c\x52\xce\x8c\x7d\x5f\xcc\x2f\x07\xea\xed\xf7\x86\xf3\x84\xfd\xe3\xa1\xff\xee\x51\xb6\xb0\xa2\xda\xf7\x91\xce\xde\xe1\xc7\x4a\xaa\x40\x9f\xc1\x4a\x1c\xc2\x87\x56\x70\xc0\x7f\x4c\x37\x25\x7d\x72\x2d\xf7\x88\x4f\x11\xc0\x23\x37\xde\x25\x18\xc1\x6a\x7a\xfe\x89\xce\xa7\xd9\x1b\x10\x7a\xf3\xfe\xa3\xfb\xed\x25\x2a\x6e\x10\x81\x35\x4a\x89\x7c\x24\x49\xe2\x16\x93\x9d\xd2\xef\x25\x9b\xf6\x77\x90\xfc\x07\x32\xa1\x84\x15\x9d\x46\xd1\x8c\xd5\xca\x99\xf2\x99\x51\x6b\xfe\xa1\x82\x66\xe3\x9a\xc2\x9b\x36\xf9\x03\x08\xdd\xbd\x88\x2f\xb3\xa2\x84\x17\xad\x76\x07\xad\x42\xdd\x80\x78\x63\x1b\xad\x8e\xcf\xcc\xf2\xa5\xa5\xa6\xed\xf0\x36\x53\x00\xc8\xb4\xbb\xaf\xed\x72\xdb\xec\xdb\xda\x60\x39\xb3\x82\x77\x29\x81\x9d\xd7\x73\xf5\xea\x5b\xee\x7d\x4f\x37\xed\xe5\x61\xf2\x95\x37\x3b\x07\x5f\x0e\x6e\x57\x3e\x88\xf3\xe2\xc6\x04\x45\xfc\xce\xa4\x5b\x45\x9a\xcc\xed\x13\x5c\x6f\xa8\xdd\xd6\x39\xf2\xbb\x9b\x4c\xa2\x39\x82\x29\x7a\x04\x37\xce\x93\xef\x8a\xcc\x3d\x0d\x3d\x98\xda\xbc\xf9\x7c\xb7\x3b\x25\xe9\x17\x61\x63\x44\xe1\x33\xf7\x20\x11\xc8\x68\x90\x5f\x41\x94\xe7\xe8\x81\xe0\xcb\xd0\xe9\xd4\xd9\x07\xc2\xf9\x31\xc3\xa8\xf8\x6d\xeb\xc1\xdd\x8f\x50\xe0\x34\x26\xb7\xeb\x59\x98\xf4\x64\x2a\xc7\x71\xd5\x74\xea\x18\x68\x93\x7c\xcb\x67\x3c\xc1\xac\x11\x21\x9e\x1b\xa2\xec\x68\x29\xe3\x90\x8e\x42\xe3\x83\x31\x0e\xc1\x40\xf4\x9d\x83\xac\x33\x3d\x05\x35\x01\x79\x8d\xee\xdb\xc9\x71\x3d\x7f\x10\x99\xbf\x8c\xfb\x65\x46\x0e\x6f\x80\x1d\x2a\x68\xa9\xaf\x45\x36\x9c\x8d\x4a\x8f\xae\xb8\xd5\x50\x80\xf7\x89\xb2\x9c\xb7\x84\xb4\x20\x99\x25\x0b\xc6\xb6\x5f\x1d\x99\xdc\xea\xba\xf2\xf9\x57\xeb\x92\xcd\xbd\x7c\xa4\x17\xab\xec\x78\xd5\xcc\xe8\x18\xce\xc2\x9a\x17\x53\x2d\x0b\x19\x19\xf1\x93\x26\x56\xb8\x08\xdf\x85\xf0\x80\x4d\x97\x55\x85\x0a\xbc\xcd\x50\x87\x6b\xfd\xb2\x8d\x1d\x61\xa3\xda\xa3\xc8\x07\x59\xff\xd9\xf4\x7c\xf1\x7a\xa7\x43\x60\x09\xbb\x6f\xe0\x07\xdb\x56\xb3\xdd\x31\x87\x43\x0d\xbc\x1e\x7a\xf3\x33\x26\x5c\x9e\x16\x79\xd8\x0c\xdc\xdc\xb4\x67\x62\x8d\x49\xf0\x93\xf5\x55\xf9\x23\x47\x79\x23\x53\x65\x29\x4f\x17\x5f\xe0\x1e\xa6\xfc\x51\xca\xbe\xf2\x2e\xf7\xdd\xdd\xdd\x56\xf1\xd7\xf6\x74\x5f\x7b\xbe\x5c\xd6\x16\x66\x74\xf7\x45\x5b\x6e\x32\xe9\x30\x22\xf8\x02\xc0\xf1\x8e\x42\x4f\x8e\x76\xa9\xef\x76\x8b\x55\xba\xd2\xb9\xed\x7d\xb7\x5e\xff\x5b\x0f\x3c\xf4\x6a\xda\xc8\x9c\xc9\xcc\xf2\xaa\x5d\x78\x5e\x32\x04\xcd\xce\x11\xdf\x60\xc6\xa0\x5b\xae\xca\xd8\x1b\x1e\x4f\x84\xea\x01\xbb\x67\xde\xe7\xdd\xed\xbd\xbf\x39\x8b\x1e\x9e\x98\x67\x74\x6f\x59\xf1\x36\x43\xb9\xe3\xf1\xb3\x71\xee\xfc\xfc\x95\xf4\x1d\x8b\xef\x30\x2e\x77\x37\x17\x6e\x7a\x8d\x2c\xc8\xcc\xf5\x08\xad\xd6\xde\x7d\x7b\x9c\x9d\xb3\xb0\x68\xfd\xcf\x37\x5b\x66\x3b\xbd\x1f\x3a\xb0\xb8\xfa\xd1\xff\x0d\x00\x00\xff\xff\x32\x42\x53\xcc\x76\x0c\x00\x00")

func sourcedataThumbsThumb4ThumbJpgBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataThumbsThumb4ThumbJpg,
		"sourcedata/thumbs/thumb-4/thumb.jpg",
	)
}

func sourcedataThumbsThumb4ThumbJpg() (*asset, error) {
	bytes, err := sourcedataThumbsThumb4ThumbJpgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/thumbs/thumb-4/thumb.jpg", size: 3190, mode: os.FileMode(420), modTime: time.Unix(1714893639, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/thumbs/thumb-4/thumb.jpg": sourcedataThumbsThumb4ThumbJpg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"thumbs": &bintree{nil, map[string]*bintree{
			"thumb-4": &bintree{nil, map[string]*bintree{
				"thumb.jpg": &bintree{sourcedataThumbsThumb4ThumbJpg, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
