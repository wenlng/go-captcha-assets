// Code generated for package thumb_1 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/thumbs/thumb-1/thumb.jpg
package thumb_1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataThumbsThumb1ThumbJpg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x7b\x54\x13\x77\x16\xc7\x7f\x93\xe7\x04\x22\x24\x82\x6c\x00\x8b\xc3\x80\x6d\x75\x09\xc9\x24\xe4\x69\x02\x09\x09\x01\xb6\xbc\xa4\x56\xf0\xa0\xc5\x98\x99\x40\x94\x3c\x4c\x82\x04\xdc\x56\x12\x69\x37\x54\xa9\x01\x8b\x95\x6a\xab\xa5\xad\x6b\xb5\xd5\x62\x59\x11\xec\xfa\x42\x01\x1f\xdd\x82\xd6\x2d\x28\x9e\x0a\x2a\xbe\xf0\x51\xb5\x8b\x45\x30\x7b\x70\xc5\x76\x77\x7b\x7a\x4e\xbf\x7f\xcd\xdc\xb9\x9f\x7b\x7f\xf7\x31\x3f\x7f\xaf\x7f\x00\x70\x52\x5c\x26\x23\x00\xe9\xe9\xb3\x01\x0c\x7e\x96\x7f\x18\xb0\xb5\xa5\x86\x65\xe5\x00\x02\x14\x00\x80\x02\x00\xff\x00\x79\x49\xb1\xd3\x69\x93\xf3\x78\x16\x47\xbc\x1e\xb7\x2e\x21\xe2\x0d\x56\x33\xcf\xa5\xb7\xf1\xb0\x78\x3e\x0f\x28\x92\x5c\x36\xbd\x61\x19\xe1\x44\x96\x10\x45\x26\x8b\x12\xbd\xb3\xff\x20\x8a\x98\x70\x25\x9a\x27\xca\xe4\x67\xda\x34\x44\xb1\x29\xad\xc2\x4e\xbc\x5c\x91\x35\xcf\x50\xb1\xcc\x20\xc3\xd1\xa4\x44\x44\xe1\x92\xbb\xcc\x36\x33\xe1\xd4\x23\x2e\x73\x89\xc5\x21\x77\x29\xd1\x27\xc1\xe5\x16\x87\x7c\xc2\xcc\x43\x91\x27\x2e\xce\x65\x4a\x54\x3d\xf1\x01\xc9\xcf\xcc\x41\x34\x56\x3b\x81\x88\xe2\x45\x5c\x03\x1f\x4b\x40\x24\xb2\x78\x4c\x84\x25\x48\xb1\x38\x44\xc0\xc7\x84\x3c\xbe\x90\x87\x09\xb9\x98\x40\xce\x97\xc9\x31\x11\xf2\x54\x68\x22\xa2\xb0\xe3\x46\x79\xae\x56\xf7\x34\x97\x1d\x37\x2a\xd1\xa7\x45\x95\x95\x95\xc5\x97\x09\xe3\xad\xf6\x22\x1e\x26\x93\xc9\x78\x7c\x01\x4f\x20\xe0\xda\x71\x23\xd7\x51\x6e\x71\xea\x5d\x5c\x8b\x23\x66\x32\x82\x96\x70\x18\xec\x26\x9b\xd3\x64\xb5\x20\x13\xef\xfa\x25\xd6\x52\xa7\x12\x45\x27\x4b\x30\xdb\x32\x33\x9f\x05\xfe\xd5\x6e\x99\xcd\xbc\x49\x6f\x87\x33\x97\x30\xfe\xb6\xb7\x63\x5e\xb9\x8d\xe0\xe5\x12\x0e\x6b\xa9\xdd\x40\xe4\x12\xc6\x98\x5f\xa4\xfa\x6d\x74\xc2\xd1\x96\x99\x29\xcf\xb6\x9b\x8a\x4c\x16\x7d\x89\xd6\x6a\x28\x35\x13\x16\x67\xba\x56\x89\x0a\xa5\x42\x6d\xb2\x58\xa6\x93\xe9\xa4\x7c\xad\x3a\x59\x24\x55\x0b\xf9\x98\x9a\xaf\xc1\x12\x24\x1a\x9d\x58\x24\x9b\x64\x7f\xc9\xb8\xcc\xb6\x78\xdc\x84\xcb\xa5\x32\x0d\x5f\x22\x15\xf3\x45\x92\x14\x09\x86\xa5\x68\xd4\x02\x29\xa6\x16\xf3\xc5\xd2\x04\xbe\x58\x94\x2c\x7c\xc6\xa6\x5b\x1c\x4e\xbd\xc5\x40\x4c\xb2\xa6\x67\xac\x48\xf7\x9b\xac\x5c\x63\x27\xf4\x4e\xab\x7d\x9e\xd5\x5a\x32\x39\xf9\x9c\x62\xab\xd3\xea\x28\xb6\xda\x10\x8d\x06\x79\x31\xcf\x64\xc1\xad\x65\x8e\x59\x13\x53\x79\x7a\x50\xc2\x6e\x5a\x41\xe0\x3a\xbb\xd5\x8c\x3c\x69\xab\xdc\xf4\x2b\xe9\x8d\x52\x99\x91\x6f\xd0\xf3\xb9\x02\x91\x44\xca\xc5\x8d\x09\x06\xae\x4c\x62\x14\x73\x31\x91\x58\x2a\xc6\xc4\x84\x41\x2c\x12\xa0\x4f\x79\xfc\xf7\xb4\x8b\x97\x88\x28\x78\xff\xb3\x1f\x93\xa6\x5c\xad\x6e\xe2\xf1\xd9\xb6\x27\x22\x3f\xff\x2f\x84\x05\x57\xa2\x76\x34\x29\xd1\x7f\x1b\x04\x3d\xa9\x14\xe0\x87\x00\x00\x90\xff\x3c\xa8\x02\x34\x0a\x85\x42\xa5\xd0\xa8\x54\x1a\x83\x46\xa5\x31\x02\x61\x1a\x0d\x0e\x64\x06\x04\x04\x06\x04\x30\x59\xcc\x27\x62\x31\x83\x82\x59\xc1\x41\xcc\x90\x90\xd0\xd0\x90\x90\xe9\x91\x91\x91\xd3\x67\x3c\x13\x44\xa7\xd3\xa7\x30\xa7\x70\x58\x2c\x4e\xc4\x34\xf6\xb4\x88\x19\xbf\x57\xfe\x43\x80\x0d\x03\x05\xd8\x40\x86\xd8\x80\xc4\x86\xc8\x6c\xc8\x7f\x14\xac\x04\x80\x44\x86\x20\xe8\x17\xb7\x06\x15\x22\x53\x48\x34\xf8\xbf\x8d\x13\x82\x58\x00\xa2\x40\x24\x0a\x89\x46\xa7\xd1\xff\x63\x01\x6c\x12\x99\x12\x4d\xc5\xd4\x53\x43\xe6\x86\xea\x97\xbb\x51\x01\xed\xc3\xa6\x64\xbb\x27\x66\x5a\x6d\xcf\x40\xae\x30\xec\xf0\x92\x3a\x43\xc2\x4c\x31\xfb\xff\x82\x41\x6c\xff\x39\xc0\x24\x43\x80\xc4\x26\xb3\x41\x12\x18\x5d\x59\xd2\xd1\xd5\xd1\xbe\x3b\xea\xd1\xca\x33\x9f\x0f\x72\x15\x19\x6a\x25\xef\xfa\x75\x3c\xa2\x8b\xfe\x56\xd0\x4c\xb8\x8e\x01\x6a\x0f\xf9\xae\x21\x3a\xcd\x40\xbc\x22\xf8\x4e\x4a\xfe\x8c\xf7\x10\x15\x02\x39\x43\x8d\x85\x72\xec\xaa\x73\x76\xfd\x7d\xaf\xeb\x6c\x41\x69\xda\xdd\xc5\xa3\xc8\xe1\x37\xfe\xb6\x48\xe1\xbd\x1d\x59\x1b\x36\x44\xbf\x35\x2f\xe9\x13\x95\x62\xab\x6c\x4b\x38\xb2\x54\x99\xe1\x49\x86\x00\x09\x02\x95\x2a\x84\x95\x1a\x04\x63\xe6\xd6\x33\x27\x37\x2c\x7e\x47\xab\x13\x6b\x3f\xad\x0e\xde\xee\xa5\x9e\xbc\x3f\xe2\xb3\xa8\x10\x16\x2c\xfb\xa2\x39\xfd\x2e\xfd\x86\xfa\xd8\xfc\xe4\x6c\x4e\x57\xb8\xba\xea\x90\xdc\xf3\xcd\xf6\x1f\x43\xc3\x7c\x01\x01\xb7\xf7\x4e\x7b\x65\x4e\x89\x92\x5f\x95\xf1\x57\x1e\x20\xd7\xb9\xe7\x7f\x6d\x7e\x9c\x55\xde\x17\x82\x2e\xb0\xcb\x68\x53\xe5\x79\x0b\xa6\x40\xbb\x69\x5e\xfb\x6a\x5d\x4f\x43\x7d\xc3\x2b\x0d\xf3\xb5\x9a\xa8\xbe\x03\xb1\xf9\xd5\x11\x6f\x7a\x8a\xee\x2c\x8f\xaa\x62\x2e\x9a\x38\xc0\x4e\x34\xaf\xa3\xe1\x84\x37\x90\x0b\x0d\x30\xa2\x7c\xd9\xee\xb8\x05\xa4\x9e\xfb\xd4\x7a\xd3\xfb\x2d\x97\x2f\xb5\x84\x1f\x41\x6f\x74\x0e\x7e\xd6\x35\x0e\xc7\xfe\xb9\xe7\x8b\x8d\xe1\xe5\x5d\x2b\xbf\x5a\x7c\x3a\xe4\xdb\x2f\x9d\x92\xc2\x6e\x77\x93\x6a\xfd\x95\x93\x94\x26\x6e\xd7\x74\x81\xdd\xce\xfd\x57\x24\x5c\xfd\x63\xc2\xdc\xac\xc3\x5a\x98\x42\x62\x6e\xda\x66\x49\x0c\x0b\xbd\x27\xc0\x0d\x19\x9c\x8c\xca\x74\x13\x4b\x3a\xa5\xbc\xb1\xa3\xf0\xdd\x1d\xcd\x8b\x37\x6f\x6a\x34\xac\x30\xd7\x1d\xdf\xf3\x82\xf7\x66\xe2\x70\xf6\x0e\x80\x46\x6c\xcd\xbe\xaf\x38\xb5\x77\xa0\x66\x6a\x67\xfc\x8d\xa6\xcb\xa9\xec\xc8\xe7\x29\x07\x4b\xd4\xea\x2d\xe8\xdc\x0b\x82\xac\xbe\xb7\xd3\x8e\x7c\xbc\x2e\xa9\x24\xb8\x4d\x35\xb0\x2e\x3c\x28\x76\x7c\x37\x70\x0f\x1b\x38\x47\x75\x08\x5c\x49\x51\x5d\x04\x17\xe9\x4d\xa4\xf1\xf6\x17\x6c\xed\x07\x64\xd8\x5f\x56\x59\xd9\x25\x6f\x5d\x4c\x12\x33\xd3\x6f\xa7\x1c\x40\xfa\x53\x43\x23\xb1\x7b\x3f\xdc\x69\x94\x9c\xc1\x8b\xe6\xb5\x77\x2c\xbe\xa6\x7a\x30\xca\x2a\x60\x30\xb4\x7f\x8a\xe5\xf8\xe0\x18\x37\x95\x9e\x46\x09\x5d\x10\xd5\x20\xed\xf9\x71\xf9\xa0\xe7\x23\x38\x7c\x0d\x33\x35\xff\xa1\xf1\x90\x6f\xa0\x59\x91\x53\xb8\x5c\xf9\x29\xec\x63\x50\xb4\x1f\x04\xe9\xbc\x7b\x14\x8f\xcf\xbb\x0f\x76\xd2\xd6\x22\x7f\x3c\xb4\x63\xa3\x37\xeb\x6a\x58\x1f\x2a\xdd\xa8\x4d\x40\xaf\x1e\x1b\x4f\x9b\x31\xd8\x8d\x5d\x7b\x63\x91\xa3\x65\xab\xc4\xde\x7e\x56\xd0\x7f\x7c\xc8\xdb\x0a\x2a\x55\x5b\x86\xa4\x1d\xe7\xee\x36\xe1\xd0\xdb\xba\x45\x73\x37\xbf\x84\xad\x7d\xd5\x1e\x31\x8a\x7c\x92\x6f\x66\x81\xc5\x80\xac\xa2\x83\x69\xa9\x29\xb4\x85\xa7\x14\x0b\xdb\x08\x5d\x06\xe5\x46\x2d\x75\xb3\xe7\x87\xf8\x40\x0f\x8c\x34\xb6\xb5\x1f\xed\x3c\xd6\x98\x70\xe9\x9f\xb3\x77\x24\x31\x51\x4e\xf0\xa0\xb7\xbb\x8b\x06\x4f\xbd\x32\xbc\xe1\x2c\x7e\x4f\xdc\x7a\xa4\xe1\xdc\xd0\x58\x01\x54\x1f\x56\xc7\xa9\xa3\x35\xbd\x70\x14\xad\x59\x4d\x17\xb2\x2e\xaf\xd1\x07\x60\xb7\x36\xd6\x73\xce\x9e\xea\xe3\x14\x57\x9c\x4a\x67\xeb\x67\x2d\xfd\xba\x91\x9e\xe6\xa6\x8b\xe9\xd5\xd3\x3b\x3e\xea\x75\xaf\xd0\xe1\xa6\xe3\xc7\x3e\xfc\xa0\x5c\xf8\x4e\xaa\x77\x2d\x82\x13\x8f\x54\x51\xdf\x32\x2b\x50\x9c\x11\xf1\x36\x3c\xd3\xc3\x98\xd8\xb9\x59\x2d\x51\xfb\xcd\xbb\x1c\x95\xb5\xdb\x1b\x54\xb5\xdb\x6b\x99\x97\x7a\xdf\xdc\x05\x53\x58\xaa\xb8\x81\xee\xb4\xb3\xa0\x52\xc5\xba\x26\xe5\x03\x4f\xe0\xd2\xab\x67\x4e\x8e\xe5\x38\xfd\xa0\xf3\x86\x3a\x1a\xe4\xc4\xed\x0e\xba\x7e\xe7\x5d\xe2\x02\x6b\xd6\x8e\x7d\x67\xab\x77\xb6\xd6\xde\xd8\x93\xd9\xb5\x8f\xdc\xeb\x6e\xe8\xa1\x65\xdc\x3a\x19\x4c\x62\x7f\xf0\xca\xfb\xfb\x32\x1e\x54\xb3\xd2\x56\xbc\x96\x46\xf5\x2d\xa8\xd9\xb4\xa6\xbe\xd0\x11\xd5\x5b\x10\x3c\x54\x55\xb5\xfa\x11\xeb\x55\x4f\xf0\x56\x39\x83\x3a\xb1\x93\x05\x07\x89\x0b\x35\x2d\x19\x39\x05\xb3\x7f\xd2\xad\x5d\xc5\x9e\x03\x7b\x63\x6e\x7b\xae\x49\x72\x07\xbf\x60\xae\xbd\xc2\x82\x6a\x8b\x62\x8b\xc7\x7c\xf9\x95\xaa\x50\x4e\xcb\x73\x27\x36\x47\x0c\x1a\xa7\x6c\xe8\xad\x28\x6e\x8c\xf8\xc7\x71\x3f\x88\x4b\xfd\xee\xa2\xe7\xf3\x96\x10\xb9\x38\x9b\x27\x1f\xb4\x36\xf3\x3b\xdd\x63\x3b\x1a\x03\xbd\xee\x53\x0f\x8f\x93\x63\x49\x30\x1e\xfe\x65\x93\xa5\x6b\x17\x7f\xe7\xf3\xa7\x96\x04\x36\xe4\x9d\x4e\x7f\x10\xf5\x61\x2c\x67\x55\xcb\xad\xf5\x23\x92\x8c\x3e\xf2\x51\xc6\x11\xc4\x0f\xb6\x45\x4f\x7b\xfd\x42\xd3\x45\xf3\xd0\xf1\x9c\xd8\x92\xd6\x9a\xbd\x59\xba\xdc\xf5\x73\x64\x89\xcd\xa2\x03\x7c\xb0\x7f\xcb\xd2\xb0\xd6\xbd\xfb\xfa\x16\xee\x5c\xff\xa0\x8b\x95\xef\xcb\x7f\xb3\xbb\x26\x39\x5a\x77\xa6\xde\x1c\x3e\x62\x9e\x5f\x30\xa4\xd7\xc6\x10\x92\xba\x99\x58\x48\x4c\xd4\x85\xaa\xd7\xb6\x8f\x47\x87\x0e\xff\x41\x0b\x53\x18\x65\x02\xcb\xf7\xe2\x61\xc7\xdd\x97\x03\xf7\xe0\xb2\x70\x10\x1d\x32\x2c\x4c\xc1\xaa\x46\x5f\xba\x37\xc4\x8e\x80\x6c\x97\xb6\x50\xa6\xae\x0e\xbb\xda\x9a\xb7\x5a\xd5\x50\xbd\xf7\x7a\x6d\xc0\xac\x75\xc7\xf0\x6f\xe0\xaa\xf0\xbd\x5f\xb7\xf5\x9e\x8f\x1b\xee\x0b\x14\x7e\xce\x4c\x7b\xb8\xac\xfa\xbb\x96\xc2\xad\xae\xfb\x29\x62\xa8\x96\x04\x0b\x80\xac\xdb\xf5\x4e\x78\x49\x3f\x16\xbd\x7e\x7e\xdc\x67\xcf\xdd\x5c\x78\x64\x86\xa9\x52\x30\x73\xdf\x97\x41\x2f\x8a\xb6\xb2\x60\x0a\x6b\xc1\x41\x3b\x73\x63\xd2\xb6\xd7\xcb\xea\x6e\x25\xd9\x46\x1e\x2d\xe2\xf5\xbf\x56\xb1\xe9\xbd\x29\xee\x4d\x5a\x12\xfc\xe2\xc7\x0d\x85\xa3\x8a\xac\x2d\x6b\x4e\x5c\x2e\x9b\xd1\xbe\x8b\xf9\x7d\x35\x39\xa6\xb3\xdb\x0f\x92\xd1\x73\xf2\xb6\xd2\x8b\xa3\x15\xbe\xb2\xc4\x6d\xdc\x63\xcd\x2a\xaf\x64\x24\x6e\xec\xfc\xc8\x1c\xcd\x83\xef\x06\x4e\xb7\x7f\xd5\xbf\x7f\xdd\x83\xe8\x6c\xc3\xe9\xc3\x07\xc2\x98\xfd\x91\x75\x41\xbe\xa2\x93\xf7\x6b\xf2\xea\xaf\x3d\xfe\x78\xe5\x05\xeb\xb8\xb2\xa2\xad\xe0\x16\x72\xf8\xef\xaf\x37\x5d\x39\x78\xb3\x6d\xce\x37\x77\x4a\x25\x2f\xaf\x6a\x7e\x7c\x69\xfc\x72\xee\xd8\xaa\x1e\x3f\x78\xe9\xc4\xf0\x4f\xeb\x94\xb7\x7f\xda\xe0\x07\x9b\xfa\x6f\x3e\xc7\x7b\x78\x7e\x6c\x7b\x92\xbf\xef\xdf\x01\x00\x00\xff\xff\xdf\x87\x1d\x46\x3d\x0a\x00\x00")

func sourcedataThumbsThumb1ThumbJpgBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataThumbsThumb1ThumbJpg,
		"sourcedata/thumbs/thumb-1/thumb.jpg",
	)
}

func sourcedataThumbsThumb1ThumbJpg() (*asset, error) {
	bytes, err := sourcedataThumbsThumb1ThumbJpgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/thumbs/thumb-1/thumb.jpg", size: 2621, mode: os.FileMode(420), modTime: time.Unix(1714893639, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/thumbs/thumb-1/thumb.jpg": sourcedataThumbsThumb1ThumbJpg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"thumbs": &bintree{nil, map[string]*bintree{
			"thumb-1": &bintree{nil, map[string]*bintree{
				"thumb.jpg": &bintree{sourcedataThumbsThumb1ThumbJpg, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
