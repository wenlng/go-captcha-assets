// Code generated for package thumb_3 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/thumbs/thumb-3/thumb.jpg
package thumb_3

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataThumbsThumb3ThumbJpg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x79\x3c\x94\xfb\xfb\xff\xef\xb1\x66\x37\x96\x22\x61\x1a\x11\xc7\x8c\x59\x2d\x33\xb6\x30\x94\x18\x4a\xb2\x34\x52\x63\x36\xc3\x2c\x8c\x29\x43\xa5\x4e\xa7\x05\x9d\xe1\xe0\x24\x74\x94\x38\x89\x2c\x1d\xbb\x54\x7c\x92\x9a\x26\x4b\x44\x64\xff\xd5\x70\x52\xb6\x43\x74\x2c\x31\xbf\x87\xbe\x39\xe7\xf3\xfd\x3e\x3e\x8f\xf3\x78\x7c\x5e\xf7\x3f\xf7\x7d\xdd\xd7\xf3\x75\xdd\xd7\xf5\x7e\xdf\x6f\xe9\x1b\xe9\x5b\x40\xcf\x5d\xc0\xa4\x03\x80\xa7\xe7\x77\xc0\x16\xe0\x6f\x49\xa7\x00\x30\xe1\x04\x25\x32\x0e\x00\x01\x72\x00\x00\x38\x00\x80\xf4\xad\x6c\x58\x38\x9f\x1f\x85\x47\x20\x38\x31\x56\x64\x2a\x37\x8c\x66\x45\xe1\xb2\x11\x02\x72\x14\x02\x65\x85\x44\x00\x0e\xce\x82\x28\x32\x25\x92\xc6\x87\x84\xd1\x18\x4c\x8e\x23\x74\xf6\x41\x13\x14\xc2\xa4\x3a\x42\x03\xad\x89\x48\x62\x94\x1b\x2d\x9c\xb9\x2f\x9e\x47\x3b\x14\xef\xe3\x4f\x89\x8f\xa4\xe0\xa8\x50\x67\x27\x88\x83\x00\x2f\x60\x47\xb1\x69\x7c\x32\x44\xc0\x66\x71\x62\xf0\x02\x47\xe8\x57\x73\x3c\x27\x06\xbf\x11\x46\x40\x21\x5f\x53\xf8\x91\x8e\x50\x97\x8d\x17\x90\x20\xe2\x01\x88\x1b\x97\x47\x83\x58\x5b\x59\xc3\x29\x48\x14\x16\x62\x8b\xb3\x42\x59\xa3\xb0\x76\x28\x18\x04\x8d\x44\x61\x10\x48\x0c\x02\x85\x81\xa3\xd0\x78\x24\x0e\x8f\xb2\x86\x7c\x13\xd4\x09\xe2\xc0\xa3\xd2\xf1\x7e\x04\x8f\x6f\xb5\x78\x54\xba\x23\xf4\x5b\x53\xb1\xb1\xb1\x56\xb1\x18\x2b\x2e\x8f\x81\x40\xe1\x70\x38\x04\x12\x8d\x40\xa3\xe1\x3c\x2a\x1d\x1e\x13\xc7\xe1\x93\x05\x70\x4e\x8c\xc9\xa6\x03\x81\x16\x43\xe1\x31\xa3\xf8\x4c\x2e\x07\xb2\xf1\x4c\x0e\xe3\x9e\xe0\x3b\x42\xa1\x9b\x2d\xb0\xa3\x88\xc4\xbf\x8c\xff\xe3\xb4\xd8\x6c\xc4\x66\x76\x0c\xdf\x8f\x46\xff\xe7\xec\x18\xff\xb8\x28\x1a\xc2\x8f\x16\xc3\x3d\xc1\xa3\xd0\xfc\x68\x74\x93\x7f\x2b\xf5\xcf\xe8\x46\x62\x14\x91\x88\xf7\xe5\x31\x19\x4c\x0e\x99\x45\xe0\x52\x4e\xb0\x69\x1c\xbe\x27\xc1\x11\x8a\xb1\xc3\x10\x5c\x6d\x70\x1e\x38\x0f\x3b\x24\xc1\xc5\xd5\xda\xce\x05\x83\x44\xb9\x20\xdd\x50\x58\x5b\x37\x0f\x1b\x6b\xdc\x26\xfb\xef\x8c\x80\x1d\x65\x45\x65\x52\xf1\x38\x1c\x12\x63\xe3\xe1\xe2\x6a\x6d\xeb\x6e\x8b\x42\xb9\xbb\xb9\xd8\xba\xda\xe1\x3c\x30\x28\xac\x35\xd6\xce\xc5\x1d\xe7\xbe\xc9\x7a\x72\x62\xf8\x64\x0e\x85\xb6\xc9\x32\xff\x66\x5d\xfe\x91\xc5\xbb\xf1\x68\x64\x3e\x97\xe7\xcf\xe5\xb2\x36\x57\xfe\x40\x38\x97\xcf\x8d\x09\xe7\x46\x41\xdc\xdc\x20\xe6\x81\x4c\x0e\x95\x1b\x1b\x63\xb1\xb1\x2a\xdf\x3e\x94\xc6\x63\x9e\xa4\x51\x3d\x78\x5c\x36\xe4\xeb\x58\xf1\xcc\xff\x50\x9e\x8e\xa4\xda\xd8\x84\x21\x29\x70\x24\x8a\x86\x86\x63\xad\xb1\x34\x38\xce\x16\x8b\x82\x87\x61\xec\x68\x14\x94\x1d\x15\x45\xc6\x62\xa0\xdf\x78\xea\x7f\x33\x2e\x84\x13\xc4\x01\xf1\x7f\xf6\xc7\x66\xc8\x8f\xe0\xb1\x71\xfb\xd7\x6e\x77\x82\xfc\xfd\xbf\xd0\x38\x54\x47\x28\x0f\xea\xec\x24\x9d\x01\xd4\xbf\x76\x0a\x50\xff\x05\x00\x00\x48\x3a\x08\x5c\x00\x14\xe4\xe4\xe4\xe4\xe5\x14\xe4\xe5\x15\x94\x14\xe4\x15\x94\x54\xb6\x28\x28\x6c\x51\x51\x55\x56\x56\x51\x56\x56\xd5\x54\xfd\x2a\x4d\x55\x75\x0d\x4d\x0d\x75\x55\x6d\x6d\x1d\x1d\x6d\xed\x1d\x06\x06\x06\x3b\x8c\xff\x12\x48\x51\x51\x51\x4d\x55\x4d\x4f\x53\x53\x6f\xbb\x2e\x58\x77\xbb\xf1\x7f\x2b\xe9\xbf\x00\xf0\x16\xc0\x01\xc8\x94\x05\x81\x01\x19\x30\x48\x16\x0c\x92\xb6\x00\x09\x00\x20\x0b\x02\x81\x40\x7f\x1f\x1a\x32\xb2\x72\x20\x40\x7e\x0b\xe8\x7f\x47\x37\xfa\x90\x91\xd5\x04\x01\x32\x20\xd9\xff\x91\x9c\xec\x46\x0c\x2c\x23\x0b\xec\xd4\x42\xb9\xc8\x1d\x24\x6b\x7f\x0f\x45\x47\xa7\x99\xdc\x72\xd5\x79\x1c\x76\xa8\xa2\x6b\x0e\xe3\xb6\x4b\x1e\xbc\x61\x22\xbb\x71\x6d\x7a\x81\xc0\x3b\x51\x32\x2e\x64\xad\x83\xb2\xda\xb7\xa4\x03\x80\xaa\x2c\x08\x90\x01\xcb\x82\x01\x67\x60\x85\xf9\x62\xd8\xae\x27\xb4\x3d\xa2\x5f\xa3\x48\x41\xc8\x18\x3c\xdf\x9b\x25\x49\x7f\x36\x8d\x0e\x14\x16\xf4\x5b\xfb\x0d\x4d\x29\x2a\xf3\x0a\x22\x49\xdb\x9f\x24\xf7\x7a\x1d\x3e\x65\x38\x75\x86\x1f\xe1\x36\x41\x6b\x3d\x52\xf4\xb6\xb8\x5b\x2f\xa3\xce\xc5\x53\x4d\x8f\x78\xbe\x3f\x55\x47\xcc\x62\xb3\x46\xfa\x71\xe6\x2d\x45\x4a\x96\x4a\x45\xc3\xe9\xdd\x5f\x4a\x33\xde\x1d\x2d\xd8\x5a\xdf\x5b\xd5\x7f\x89\xb1\xa0\xa6\xe5\x55\x0f\xd3\x81\x8b\xcc\xe6\xc0\x89\xa7\x02\xf0\xa2\xb2\x6a\x7a\x67\x57\xc8\xf5\x69\x52\xe8\xe7\x63\x11\x7b\xce\x1e\x05\x18\x0f\xc9\x52\xc0\xc4\xbc\x66\xa7\x28\x71\x57\x26\xc8\x67\x66\x05\xb6\xd5\x79\x9b\xba\xc3\xd3\x23\x5b\xe1\xee\x24\xad\x5a\xb8\xcd\xe1\x99\x8e\x4b\x55\x88\xd4\x54\xb3\xe3\xdf\xe9\x3e\xb3\x39\xae\x1f\x2c\x63\xec\xe6\x1a\x62\x69\x30\xee\x57\xd3\x1a\x72\xbb\xa2\xe7\x5e\x6b\x92\xc9\x3c\x85\x4e\x2f\x5e\x0d\x0f\x2e\x64\xcc\x4d\xa7\x0c\xcd\x99\x86\x4f\x37\xab\x95\x3e\x22\x4c\x95\x4b\x6a\x2f\x94\xd6\x7a\x1d\xa9\x6e\x34\x47\x6f\x43\x51\x45\xaf\x4a\x95\xd3\x06\x13\x56\xcc\xb8\x0c\x29\x90\x71\xae\x85\x16\xf4\xeb\x79\x13\x87\x42\xbb\xc7\x23\x27\x3b\xdb\x6e\x8f\x3d\x23\xb5\xa8\xfc\xd4\x89\x50\x82\x74\xe5\xb6\x6b\x91\xca\x1e\x87\xf5\x56\x45\x79\x3f\x66\x71\xe9\xdf\xff\xf6\x32\xe6\x5e\x9f\x3b\xf6\x69\x92\x4d\x9e\x51\x71\xfe\x74\x13\x74\xe0\x10\x77\x41\x18\x10\xe7\x33\x2e\x3a\x28\x4e\xdd\x2d\x7b\xc2\xea\xb6\xf1\x5d\x76\xd1\xe8\xef\x23\xc8\xb6\x38\x14\xe3\x96\x56\xb0\x82\x3e\xcc\xe8\xce\x5e\x42\xa5\x28\x34\xfb\x6d\xad\xfd\x0b\x63\x36\x4b\x73\xd5\xdc\xe7\x42\x1e\x3b\xf3\xcd\x4c\xdf\x2e\x6a\xde\x43\x78\xe8\x6e\x8f\xdd\x25\xdb\xf5\x4d\xae\xf4\x36\x3a\x8b\x22\xa2\x2b\x84\xfb\xcd\x13\x35\x9b\x4f\x74\x66\xe4\x9a\x88\x55\x75\x44\x69\xab\x6d\x17\xa3\xad\x35\x57\xcb\x14\xa1\x67\x07\xfb\x3c\xee\xd8\x1b\x9d\xbf\xb0\xa2\xb5\x3e\x80\x9a\xbf\xc4\x59\x0a\xfa\xd4\x32\x50\xf3\x20\xbe\x37\x68\x0c\xa3\x18\x60\xa8\x93\xb0\xd7\x3b\x5a\x4d\xb0\xf6\xe0\x6c\xec\xa0\xc6\xd4\x84\xef\x55\xfd\x92\x94\x9e\xd5\xe9\x16\x7d\x18\x32\xb5\xb4\x61\xb7\xf9\xe4\xd8\xd8\x32\xf7\x07\x65\x6a\xc7\xda\x28\xfc\x52\x75\x22\x80\xff\x71\xbb\x95\x7e\x48\xb0\x93\xc3\xd5\xbc\x60\xff\x47\xac\x07\x6f\x66\x50\xa3\x7b\x88\xf3\x23\x8b\x22\x16\x5b\x45\xbe\x8c\x06\x16\x0e\x24\xe5\xfb\xfd\x72\xf8\x9e\x14\x28\x38\x65\x53\x13\x99\x21\x4c\x66\xbd\xae\x87\xc4\xbf\x9e\x9d\xcd\xcf\x1e\x93\xe4\x95\x11\xda\x33\x65\x74\x77\x7d\x5f\x69\xe0\x19\xba\x02\x2d\xd4\x5f\x38\xb9\x12\x0e\x96\xfc\xf0\x63\x43\xab\xe7\xed\xd0\x4e\x54\x5d\xe9\xb3\x8b\x85\x8b\x66\xe4\x05\xbe\x37\xff\x91\xf3\xa7\xbb\x59\xc9\x5f\xe6\xae\x8c\x1d\xff\x7f\x67\xdb\x2f\xfe\x94\x92\x8c\xbc\xd9\xb7\x37\x38\x36\x69\xbf\x14\x80\xa6\x81\x6c\xf0\xcd\x01\xa5\x52\x20\xaa\xf8\x71\x4f\xe4\xa7\x80\xa5\xfe\x46\x97\x7e\x41\x53\x8e\xe6\x7a\x52\x65\x0e\xea\xe3\xf1\xd3\x77\x83\x25\xbc\xf6\x3d\x4c\x7e\x92\x25\xbb\x10\x9c\xc5\x37\xcd\xd5\x4e\x5f\x56\xae\xc7\x1c\x29\x8c\x08\xcc\x84\xa5\xe9\x56\xb3\xa6\x9b\xca\xaf\x38\x65\x5f\x2d\x0c\x59\x14\x01\xe4\x27\x91\x7f\xc4\x7a\xe5\x69\x1b\x5d\xe5\xfb\x14\xde\x2b\x81\x2c\x6a\x9e\x3d\x03\xb6\xb1\xb4\x2b\xb2\x71\x4e\x19\x66\x19\xa4\x12\x9b\xa9\x94\x3d\xdb\x6a\x9c\xfa\x0c\x87\x9e\x61\x6b\xa2\x03\x05\x97\xa0\xbe\x1f\xf0\x6a\x65\xe8\x63\x16\x24\x31\x5d\x58\x76\x52\xe5\x44\x62\xf1\xfd\x03\x37\x1e\xf1\xb1\x6d\x8b\xb5\x78\x0a\xf2\x15\x7b\x3e\x40\xa3\xd7\x9d\x91\x90\xa3\xa9\x33\x0f\x4f\x14\x67\xc0\x19\xba\x33\x51\x35\xb6\xb6\xc9\x25\xe6\x19\x6c\xd5\x3e\xfa\xcb\x80\x85\x62\x52\xb6\x05\x27\x84\xc2\x97\xf3\xa9\xa8\x9f\xb8\x74\x48\x34\xee\xf5\x65\x70\x14\x66\x9b\x72\x21\x01\x22\x05\xea\xdc\x82\x25\xc7\xac\x7c\x1b\x16\x23\x5b\xc2\xcb\xbb\xc9\x17\x1d\xb3\x3a\xb7\x46\x22\x54\x4f\xf4\x3f\x2f\x70\xbc\x9b\xe0\x33\xfc\xb6\x13\x59\x04\x80\x8f\x4c\x29\xee\xc1\xee\x28\x62\xf7\x55\xdd\x6d\x6f\x7a\x62\xc2\x29\x7d\xd0\x91\x78\x4d\xa3\x9d\x94\x59\xee\x93\xe0\x38\x2d\xba\x58\xd0\x5d\x94\xab\x84\x8f\xb0\x1f\x5a\x9e\xee\x8f\x1a\x13\x71\x82\xae\x6e\x9b\xca\x37\xd8\x89\x3c\x65\x76\x37\xee\xc1\x9b\x46\x1f\x22\x86\xec\x5f\x5f\xfb\x2c\x36\x31\xcb\x3e\xa8\x07\xf3\x2e\xd5\x29\xc2\x2e\xf9\xf5\x38\xeb\x49\x08\xa3\xc4\xe0\xe5\xaf\x11\x77\xb2\x5f\xc2\x3e\x45\x4b\x24\xa9\xf0\xbb\xfd\x8f\xc3\x9a\x3d\xd9\x1d\x30\xb3\xd5\x8e\x5b\xbf\xff\xa9\x3c\x57\x91\x85\xee\x53\x3b\x57\x19\x7c\x60\xa0\x3d\xed\xc6\x7a\x0e\xfc\xfd\x55\x79\x9e\x24\xc5\xf8\x8c\x5a\x3d\x2c\xc8\xf1\x46\x6a\x9f\x47\xb0\x24\xf4\x4a\x86\xa1\x7f\x78\xea\x56\x02\x6c\x1f\x66\x36\xdf\xb8\x6f\x32\xef\xc6\x7d\xcb\x8e\xe5\xd2\xb5\x07\x7e\x15\x0f\x9b\xdb\x8c\x3e\x77\x1d\x1a\x7f\x39\x86\xe3\xd4\x58\xa4\xea\xf5\x14\x95\xfd\xde\xd5\x74\x4b\x6e\xa2\xd2\x53\x87\x2a\x7e\x47\x02\x07\x9a\xee\xbf\xfc\x1d\x1a\x2c\x22\xef\x26\x8c\x09\x22\xf4\x26\x7e\x46\x15\xdb\xe4\x11\x2c\x2c\x56\x27\xda\xa7\x82\xab\x28\x4f\x85\xe2\x34\xc9\xfe\x99\xa6\x09\xc3\x3e\xf7\x96\xa5\x2a\x29\xa0\xf7\x07\x9b\x4e\x02\x01\xa5\xcd\xbf\xb1\xf0\x5b\x49\xa4\xcb\x26\xa7\xaf\xbd\x78\xd5\xec\x20\x4b\x57\x9e\x59\x38\x55\x5e\x12\x28\x5e\xac\x60\x5f\x8e\x29\x9a\x5a\xef\x28\xd8\x76\xe9\xfa\xbd\x3b\x6e\x44\xcf\x94\xdc\x47\x2b\x1e\xe5\xe5\x1d\x19\x87\x8c\x02\x75\x77\x84\xec\xcf\x84\x1f\x41\x13\x60\xcd\x3e\x1d\x05\xb7\xab\xe2\x8c\xec\xa9\x8d\x02\xb1\xeb\x2f\xea\x87\x8b\xe6\xaf\x0e\xd0\xd5\x73\x4c\xb3\xed\x10\xcf\xca\x2c\xc6\x68\xe5\xef\x46\x3a\x50\xf4\xd2\x66\xd1\xaf\xf1\xe1\x8d\x0d\x3f\x9f\xbc\xad\x01\x2d\xc4\xaf\xb5\xbe\x34\x4d\x39\xe7\xbb\x78\x54\x8b\x74\x99\x96\x9a\xf2\xe5\xa7\x52\xf4\x23\xb5\xea\x7d\x37\xde\x5c\x53\x40\xcf\x2c\xe7\x7c\xa9\x25\x8e\xeb\x29\x7d\x68\x9a\xce\x1f\x7c\x91\x77\xee\xb3\x49\x9f\x87\xf6\xfb\x12\x5f\xb3\x46\xf7\xd8\x2a\xdf\x94\x96\x96\x8c\x9d\x56\xa3\x85\x42\x96\xf6\xf8\x52\xad\x66\x5b\xc0\xf3\x8b\x8c\x19\xbd\xd1\xe9\x49\xb3\xac\x8e\xe6\x12\xf6\x87\x1c\xe3\xb9\x66\x54\x8f\x69\xd1\xf5\xa3\xc2\x3f\xd7\x73\xb0\x43\x4f\x4f\xb6\xfb\x2f\x4d\x11\xe7\x95\x3e\xe7\xbb\xd7\xc5\xc7\x4f\x98\x5b\x78\x94\xfa\x7b\x71\xce\x99\x48\x81\x33\x72\xef\x33\xbc\x05\x99\x05\xf1\x5d\x11\x96\x80\xaa\x56\x83\x69\x76\xbb\x6f\x48\x23\xb1\x88\xd6\xa6\xf7\x25\x71\xdd\xe1\x40\x7f\xe9\x6f\xa0\xce\x33\x47\x17\x76\x17\x0b\x92\x2d\xde\xdd\x97\x9f\x87\x8d\x0d\xef\x7f\x11\xb8\x78\x1e\x1b\xc9\x9a\x58\x79\x55\xff\xa2\xf7\x9c\x7f\x96\x5a\xdd\xa9\x8f\x15\xec\x11\x52\x7c\x80\x18\xe6\xb1\x48\x4c\x9b\x55\xbf\x65\x15\xaa\x52\x53\xb9\x6e\xaf\xd2\x0d\xf3\x9c\xae\x63\x1c\xbe\x87\x1b\x74\xb2\x94\x02\xed\xcc\x95\xbd\xd3\xb7\x56\x57\xac\xee\x57\x1e\xbf\x6d\x91\x79\x19\x76\x45\x94\x0c\xfa\xee\xd2\x2c\xe5\x60\xc9\xfb\xc5\xb6\x6d\x6d\xa3\x10\x49\x89\x35\xf8\x80\x70\xd5\xfc\x57\x70\x3e\xdd\xc7\xe3\x6d\xf1\xf7\x79\x77\x89\x57\x1c\xe3\x7e\x6c\x5d\xec\x32\x1d\x18\x52\x4b\xef\xe7\xe8\xf0\x74\xf7\xb7\xe5\x19\x76\xf7\xf9\x2f\x52\xdf\x5e\x5b\xf7\xae\xb9\x23\x05\x0c\xc3\x7a\x67\x11\x9f\x6f\x4e\xe6\x7b\xed\x42\x2f\xbe\xf7\x27\x18\xdd\x6b\x3a\xb8\x82\x4f\x12\x9f\x6c\xbd\xae\xbb\x17\xee\x7d\x41\x04\x3b\xe5\x34\x1a\x31\xd3\x50\x7f\xcc\xef\x74\x46\x9a\xf8\x74\x80\xf8\xa6\x5c\xa7\x4e\xcb\x1b\x4d\xa5\x5d\x72\x37\xcb\x07\x76\xa5\x7f\x86\x0e\xed\x99\x67\x5a\x9b\x5c\x3a\x6e\x63\xd4\xeb\xfb\xd4\x68\x0d\x4b\xfa\x1d\xbb\x1c\x4d\xac\x08\x12\x27\xd1\x0d\x97\xfe\x24\xef\x66\x2c\x74\xd9\xda\xfb\x66\xbc\x80\xa7\x57\xdf\x11\x7a\xd7\x89\x1f\x25\xcc\xc3\xf8\x41\x6e\x14\x6f\xc6\x1a\xfc\xa3\xfa\xe2\x7c\x44\x95\xa4\x2f\x99\x20\x79\x7e\xee\xd4\x05\xf6\x0a\x33\xcd\x39\xe1\xce\x56\xc5\xad\xca\x71\x8a\xad\x63\x54\xb4\x44\xa4\x0e\x3b\x6c\xd7\x5b\x51\x7d\x79\x7c\x85\xd9\xed\xe7\x75\xf2\xb5\xa2\x30\x18\x11\x39\xfc\x9c\xe3\xe5\xe0\x2f\xbc\x90\x92\x13\x19\x5a\xf9\xf8\x72\x9a\xbf\x57\xc0\x3b\xbe\x0f\xa2\x6b\x57\x57\x12\x6c\x59\x97\x17\xd0\xe2\xba\x2b\xd3\x30\x83\xbd\xfd\x9a\x60\x99\x9c\xde\x6b\x56\xb3\xfd\x73\x4d\x96\x71\xe7\x70\x0f\xc7\xd3\x3e\xc6\xeb\x8d\x97\x7c\xe4\x88\x3e\x75\x61\xe1\x75\xcf\x3b\xb6\x70\xe9\x79\x36\xe3\x5e\x60\x79\xfe\x7a\xb9\xf6\x75\x27\x15\x7f\x09\xb9\xfe\xa2\x5c\x6c\xd0\x40\x98\x7e\x17\xb5\xf2\x35\xd2\xc0\x40\x71\xcf\x44\x78\xbb\xa5\xd3\x21\x43\x9b\x6b\xa6\xb5\xb7\x5d\x0e\x2f\xba\xc6\x87\x57\xb2\x69\xec\xb0\x5b\x21\x5e\x00\x3c\xbf\xa0\xee\x61\x43\xf1\xf2\xf5\x86\x59\xe3\x99\x16\xea\xbe\x5a\xf7\x4a\xd5\x96\x29\xed\x21\x59\x57\xb1\x7b\x66\x1f\xb4\xc6\x27\x30\xac\x64\x40\x3e\x68\x76\x3b\xea\x63\x7f\x0b\x1b\x45\x29\xb5\x2e\x7e\x3e\xe0\x77\xec\xcc\x42\xf5\x0d\xea\xd2\x18\xd3\x6c\x75\x15\x2f\x0c\xd6\xee\x11\x9f\xaf\xb3\xf4\x5b\x4a\x6d\x61\x8b\x92\x86\xfc\xa9\xf6\xe1\x95\x73\xd5\x57\xd1\xd4\x82\xc7\xcd\xaa\x83\xa6\xb0\x74\x43\xcb\xdf\xbc\x3f\x3e\x7f\xb9\xe2\x3b\xf6\x62\xe9\x75\x9c\x07\x3e\x6b\x56\xa5\x83\x64\x31\x42\xe7\x17\x23\xca\xdf\xfb\xd4\x22\xcc\x4b\x48\xd4\x65\x64\xd3\xcf\xc6\xcf\x0d\x1f\xa7\x9f\x71\xe4\x07\xb3\x30\xf0\xe8\x51\x5d\x16\x81\x28\x78\xd3\xaf\x24\xcc\x28\xcc\x45\x64\xc3\xfb\x82\xa4\x80\x11\xcb\x2b\xe9\x4b\x4a\xf1\x4c\xc2\xa3\x85\xe9\x2b\x8d\x71\x4b\xdc\x36\x59\x6c\xe3\x60\x13\x67\x90\x99\x55\xd5\x3b\x77\x11\x67\x19\xd9\xfe\xec\x67\xc9\x7d\xf2\x88\xbe\x7c\x62\xb7\x56\x7c\x7a\xf1\xed\xe2\x88\xf6\x83\x8e\xb9\xde\x9c\xa3\x1f\xca\x57\xe3\x17\xd7\xd4\x80\xd3\x05\xe1\xce\xe0\x2b\xa4\xf0\x05\xe1\x36\x4b\xde\xe9\xb3\x86\xf7\xf7\x6e\x61\xbc\x72\xca\x81\x0d\x6b\x7c\x92\x02\x29\xd1\xa9\xd7\x92\x76\x34\x78\x9f\xe5\x87\x47\x3f\x5c\xb8\x2e\x05\xea\x9e\x8d\x7e\x8a\xc6\x11\x78\xd9\x66\x8c\xba\xd0\x1c\x6b\x4c\xc2\xe5\xcb\x5f\x42\x15\xc5\x52\xa0\x6a\xb5\xd1\x33\xfb\xcf\xdc\x6a\xaf\x81\xdc\x3c\x89\xa1\x3a\x0a\x6c\xd4\x35\x78\x38\x59\xc6\xe9\x94\x6f\xe8\x6e\x8d\xee\x87\x67\xf8\x9e\xa3\x26\xd5\x9e\x93\xd3\x1f\x8a\xea\xea\xd8\xb3\x6b\x7c\x3f\xae\xf1\xce\x0e\xc1\xde\x7e\xe7\x54\x44\xdc\xec\x87\xbb\xe3\x1d\xc3\x13\x9f\xae\x25\x34\x0e\xfc\xd2\xd0\xb6\x72\xf2\x87\xea\x2d\xd5\xa7\x83\x0b\xe6\x72\x0b\xfa\x98\xa9\xe5\x65\xbe\x93\x53\x93\x73\xef\x3e\x7d\xd0\x40\xec\x13\x2e\x24\x4d\xa2\x67\x09\xa4\x9b\x4f\x42\x8f\x5d\xd8\x21\x99\x4f\x1c\xbc\xc7\xb6\x3c\xf6\x5a\x0a\xf8\x88\xe7\xa3\xd7\x9d\x1e\xad\x51\x1e\xfa\x74\x17\x84\x9c\x2e\x6c\xfd\x23\x9a\x22\x05\x38\x5d\x98\x17\xd4\x49\x83\x88\xfa\x95\xc9\x1f\xd0\xa7\x1d\x3e\x88\xfe\xb8\x36\x26\x79\x65\xef\x5b\xfd\xd1\xbe\xdd\x76\x7a\x69\x35\x4a\xd8\x40\x38\xdb\x7d\x30\xe5\x98\xb4\xff\xff\x07\x00\x00\xff\xff\x3b\x97\x4d\xd5\x5e\x0e\x00\x00")

func sourcedataThumbsThumb3ThumbJpgBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataThumbsThumb3ThumbJpg,
		"sourcedata/thumbs/thumb-3/thumb.jpg",
	)
}

func sourcedataThumbsThumb3ThumbJpg() (*asset, error) {
	bytes, err := sourcedataThumbsThumb3ThumbJpgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/thumbs/thumb-3/thumb.jpg", size: 3678, mode: os.FileMode(420), modTime: time.Unix(1714893639, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/thumbs/thumb-3/thumb.jpg": sourcedataThumbsThumb3ThumbJpg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"thumbs": &bintree{nil, map[string]*bintree{
			"thumb-3": &bintree{nil, map[string]*bintree{
				"thumb.jpg": &bintree{sourcedataThumbsThumb3ThumbJpg, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
