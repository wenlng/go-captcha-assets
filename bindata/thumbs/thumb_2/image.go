// Code generated for package thumb_2 by go-bindata DO NOT EDIT. (@generated)
// sources:
// sourcedata/thumbs/thumb-2/thumb.jpg
package thumb_2

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourcedataThumbsThumb2ThumbJpg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x7b\x38\x94\xf9\xfb\xc7\x9f\x39\x98\x71\x98\x98\x31\x58\x87\xe4\x69\x08\xc9\x98\xf3\x60\x98\x18\xc6\xe9\xdb\x20\xa2\x50\xca\x98\x79\x86\xc1\x1c\xcc\x21\xd2\x96\x19\xb5\x6d\xda\x1c\x62\x6b\x2b\x89\x36\xad\x14\x95\xa8\x94\x95\xa9\xa8\xa4\x83\x4d\x52\xb1\x25\xa9\x36\x2a\xaa\x75\x68\x29\xbf\x4b\xbf\xb4\x5d\xdf\xeb\x7b\xed\x75\xed\xfb\xaf\xe7\xb9\x9f\xfb\xf5\xbe\x3f\xf7\xfd\xf9\x3c\x9f\xe9\x7b\xd3\x8f\x01\xcb\x80\x4c\xb1\x08\x00\x42\x42\x5c\x00\x7d\xe0\x6f\x4d\xbf\x04\x70\x5c\xb5\x20\x75\x1d\x00\x03\x90\x00\x00\x78\x03\xc0\xf4\x63\x44\x62\xb2\x4a\x25\x67\x91\x48\x52\xa5\x1b\x5f\x28\x4b\x84\xdc\x04\x32\x09\x29\x93\x2f\x27\x51\xdc\xc8\x24\xc0\xdb\x27\x53\xce\x17\xa4\x42\x2a\x30\x11\x4a\x12\x4b\xd9\x84\xe1\xc6\x66\x02\x28\x16\xb2\x09\x2b\x18\xa1\xe4\x50\xb9\x3f\x94\x2c\x0e\xce\x52\x40\xcb\xb2\xc2\xa2\x04\x59\xa9\x02\x4f\x21\xc1\x67\x31\xe8\x9d\xc9\xca\x94\xc8\x25\x90\x8a\x0f\x66\x4a\xd2\xa4\x4a\x56\x26\x9b\xf0\xc9\x9c\x25\x55\xb2\x66\xc2\x24\x02\xf8\x29\x45\x95\xca\x26\x70\x66\x3e\x80\x31\xa1\x4b\x41\x7f\x99\x02\x02\x19\x6e\x0c\xa2\x80\x4c\xa1\x83\xee\x9e\x6e\x14\x06\x85\xee\x41\x71\x05\xa9\x64\x0a\x8d\x44\xa6\x91\x28\x34\x22\x85\xca\x22\x7b\xb2\x28\x0c\xf0\xb3\x08\x8b\x41\x6f\x85\x50\xc4\x8a\xe4\x06\x7e\xae\xa5\x10\x8a\xd8\x84\xcf\x4d\x65\x64\x64\xb8\x65\xd0\xdc\x64\x8a\x24\x12\xc5\xd3\xd3\x93\x44\xa6\x92\xa8\x54\xa2\x42\x28\x22\x2a\xd7\x49\x55\xfc\x4c\xa2\x54\x69\x3f\xeb\xc0\x85\x94\x02\x85\x58\xae\x12\xcb\xa4\xe0\xcc\x3b\x3f\x51\xa6\x56\xb1\x09\x84\xd9\x16\x24\xf2\xd0\xd0\x2f\xc6\xff\x73\x5a\x12\x09\x69\x36\x5b\xa9\x8a\x84\x44\xff\x9c\xad\x8c\x5a\x27\x87\x48\x91\x90\x52\xa6\x56\x08\xa0\x48\x48\x64\xff\x55\xa9\x7f\x46\x67\x12\xe5\xa1\xa1\xac\x70\x85\x38\x49\x2c\xe5\xa7\x71\x65\x02\xb5\x04\x92\xaa\x42\xb8\x6c\x02\xcd\x83\xc6\xf5\x63\x7a\x06\x7a\x06\x7a\x90\xb9\x1c\x3f\x86\x07\x87\x46\xa6\x70\xc8\xfe\x14\xba\xbb\x7f\x20\x93\xe1\x39\xcb\x7e\xcd\x64\x4a\xe4\x6e\x42\xb1\x90\xe5\x49\xf5\xa7\x91\x69\x34\x3f\x86\x7b\x80\x3b\x85\x12\xe0\xef\x47\xe3\x50\xfd\xc9\xd4\x40\x0f\x3f\x26\xd5\x93\x49\xe5\xce\xb2\x21\x52\xa5\x8a\x2f\x15\x40\xb3\xac\xf8\x6f\x96\xf3\x8f\x2c\xcb\x5f\x01\xf1\x55\x32\x45\x94\x4c\x96\x36\xbb\xf3\x4b\x93\x65\x2a\x99\x32\x59\x26\x07\xfd\xfd\x41\xe7\x15\x62\xa9\x50\x96\xa1\x5c\x38\xb3\x2b\x9f\x17\x0a\x29\xc4\x6b\x21\x61\xa0\x42\x26\x01\x3f\x8d\x95\x25\xfe\x1f\xe5\x99\x10\x93\xc9\xa4\x30\x3c\x88\x34\x3a\xd9\x9d\xc8\x48\xa4\x0b\x88\x1e\x90\x08\x22\xd2\x45\x22\x26\x1f\x82\x20\xa1\x90\x4a\x26\x7c\xe6\x85\xff\x66\x5c\xa4\xc5\xa0\x37\xe9\xbf\xce\xc7\x6c\x28\x92\x1b\x38\xf3\xf8\xe5\xb4\x2f\x06\xff\xfe\x5f\x20\xa9\x90\x4d\x50\x10\x7c\x16\x4f\xbf\x06\x8c\x3f\x75\x0a\x08\x75\x00\x00\xc0\xa6\x7b\x80\xcd\x00\x0a\x89\x44\xea\x21\x51\x7a\x7a\x28\x03\x94\x1e\xca\xc0\x48\x1f\x85\xd2\x37\xc2\x18\x1a\x1a\x19\x1a\x62\xb0\x98\x4f\xc2\x62\x8c\x4d\xb0\x26\xc6\x18\x3c\xde\xcc\x0c\x8f\x9f\x6b\x63\x63\x33\xd7\xee\x8b\x60\x68\x34\x7a\x0e\x66\x8e\x25\x16\x6b\x69\x6d\x8e\x33\xb7\xb6\xfb\xb7\x9a\xd6\x01\x38\x7d\xc0\x1b\xd8\x85\x80\xe1\x00\x38\x0e\x86\xc0\xc1\xa6\x5b\x80\x0d\x00\x00\x47\xc0\x60\x5f\x5d\x1a\x70\x04\x00\x43\xea\xe9\xc3\x66\x04\x7c\x2d\x18\x1c\x81\x05\xe0\x70\x18\x02\x09\x03\x0c\x10\x48\xc4\xff\xc7\x70\x08\x60\xbe\x29\x92\xc2\x89\xc0\xf3\xd3\xb5\x3b\x0e\x10\xa8\xf6\x66\x7a\xb5\x17\xfc\x7e\x7b\x1c\x69\x9e\x43\x5b\x86\x9b\x31\x41\xcc\x94\xf8\xe2\x82\x9b\x4f\x81\x73\x4c\x23\xd2\x11\xd4\xe9\x07\x00\x06\x01\x03\xe0\x38\x04\x0e\xf0\x01\x46\x89\xc1\xed\x31\xcb\xbd\xb6\x76\xd8\xe5\x77\x6a\xd2\x9f\x03\xab\x4c\x2b\x16\xc2\xca\x5f\x39\xf0\xe6\x5d\x81\x6f\x95\xad\xc2\x3b\x32\xf2\x1c\xa6\x32\xaf\x51\x94\x9e\x2b\xd2\xab\xd0\xea\x8d\xb7\xfb\xb9\xd8\x39\xeb\x75\xec\x36\x24\xaa\xfd\xf9\xcd\x0e\xef\x1d\x50\x2a\x24\xbe\xb6\x50\x5d\x73\x6e\x87\x3e\xf3\x30\x68\xdd\x1d\xdc\xd5\x38\x5a\x9c\xfb\xfe\x26\xca\x38\xfa\xe3\x43\xbd\xb9\x47\xb1\x4d\xbd\x6a\x93\x74\x3f\xc9\xd2\x45\xfc\xa6\x90\xa5\xee\xe6\x10\xf2\x4a\x81\x55\x67\xcb\xad\x58\x37\xbd\xb8\x9f\x94\x73\x46\xef\x5f\x3f\xb2\xb7\x06\x73\xfa\x4d\x0c\xdd\xfc\xb4\x15\xe7\x64\x74\x7d\xf8\x84\x65\x37\x83\x76\x7d\xb0\xe7\xbd\xfe\x58\xac\xda\xf1\x61\xc0\xce\xd2\xae\x62\x0e\x3f\x7a\x93\x64\xad\x5e\xf4\x18\xfd\x20\x65\xa1\xeb\x7a\xb1\x2d\x6d\xa5\x43\x9b\x1b\xf7\x52\x76\xc1\x47\xef\xb8\x7d\xfb\x43\x77\x76\xb5\x3d\x2f\x6a\x17\x3b\x2f\xaa\xf7\x6e\xa9\x45\xf9\xb8\xe4\x97\x2a\xe7\x7d\x08\x73\xec\xa5\x74\x0d\xac\x68\x1f\x38\x67\xec\xe3\x10\xa1\x86\xaf\x3e\x1d\x7a\x2d\xbe\x65\x21\x4b\xe3\x8b\xef\xf4\xbc\x55\xfd\xeb\x8d\xb2\x53\x68\x03\x97\x27\x6f\xf3\x5c\x5f\xe6\x6f\xb3\xa8\x77\x65\x36\x48\x96\x6c\x7e\xb9\x84\xf7\xa4\xbb\xe6\x79\xc8\xa5\x43\x01\xe6\x5d\xcd\xc2\x8f\x07\xbf\x49\xe4\x0d\xfa\xda\xf5\x50\x92\x3d\x8a\xb5\x5e\x1c\x34\x1c\x40\xef\xd0\x32\xf2\x1b\x2c\x02\xf5\xc2\x2f\xe8\x7e\xd5\xeb\xe2\x2b\xde\xd9\x7d\xb7\xad\xa0\x11\x98\x1c\xd5\xd5\x75\xf4\x25\x0d\x1c\x3d\xb9\xed\xf2\xe3\xf3\x41\xb5\xa0\xf9\x6d\x11\x6f\x28\x77\xdd\x72\x1b\x8b\xd6\xac\x89\xb1\x9a\x6e\xac\xf0\x9d\xca\x26\xf6\x02\xdc\x2c\x73\xb2\x6e\xbd\xd7\x56\xff\x9e\x56\x69\x40\xd5\xa5\xb3\x1e\xe3\x27\x8e\x3f\x12\xaf\xc0\x56\x1b\xdd\x8d\xb2\xbb\xe4\x88\x79\x56\xd1\xf4\x30\xa1\x6d\xf2\xd6\xd3\xb8\xc9\x41\xe9\x82\xb9\x9b\x23\x89\xa3\x8a\x34\xdf\x2e\x94\xc0\xa6\x85\x7a\xf8\x41\xf3\x16\xa7\x67\xb4\xe3\x9d\xad\xef\xdc\x7e\xb7\x29\x5c\xe0\x2f\x79\x58\x1b\x6e\x59\xe8\x77\xc0\xfc\x80\xb0\x10\x9f\x96\x63\x56\xf0\xd6\x3a\xc9\xae\x23\xe9\x75\xc3\xf8\x70\xbf\x2c\xe5\xc6\x56\xe2\x92\x23\x48\x69\xb5\x26\xe3\x7b\x44\x32\x6d\x74\xe0\x7c\x5a\xc9\x88\xd5\x9a\xd7\xce\x4f\x62\xd5\xa7\x27\x63\xf3\x07\x7a\x2b\x7d\x13\x5c\x76\x97\x22\x53\x94\xf3\x2a\x46\x4b\x10\x99\xcf\x7a\x2c\x63\x45\xba\xe0\x1f\x01\x15\xad\xaa\xb8\x7a\x6e\x93\x9c\x1e\x75\x97\xda\xa6\xc7\x20\x58\x1a\x74\xb4\xfc\x11\xbe\xea\x26\x8a\x97\xd1\xed\x9c\xb3\xbe\x2f\x6c\xb7\xd9\x64\x4e\x51\x39\xfe\x9e\x2d\xd9\xc2\x13\xb9\x51\x05\xbd\x87\x07\x3d\x20\x93\xc6\xa3\xb2\xaf\x6f\xc0\x26\xbd\xcc\xd5\x49\xe1\x1e\x97\xa3\xce\x88\x44\x3e\x51\x97\x11\xdf\xaf\x82\x29\xf8\x5d\xaa\x04\x07\xba\xf8\x58\x44\xc1\x4e\xc9\xe8\xb9\xc2\xd3\xab\x79\x66\x47\xca\x01\x32\x38\x9c\x98\xc8\xd8\x77\x72\xc9\xc5\x5a\x65\x10\x48\x9c\xca\x5a\x17\x90\xf6\xac\xc8\xe3\xc5\xd2\x08\x68\x39\x10\x7b\xaf\xd6\xd5\xda\xde\xbd\xff\xdb\x43\xd1\xbd\x83\x76\x85\x99\xe3\xee\x83\x23\x1d\x2b\xdb\x7e\xae\x6b\x28\xbc\x6d\x26\x21\x58\x52\xdb\x26\x3a\xbf\x69\xdd\xbf\x56\x9d\x7c\x6b\x1a\x88\x5a\xfd\x83\xe7\x37\x9b\xdd\x57\x7d\xbc\x36\x54\xb7\x61\xdb\xd6\x57\x1d\x1a\xff\x10\xf4\x34\x80\xdf\x95\x2d\x3d\xf4\x63\x6a\xdf\x34\x60\x17\x6e\xf1\x43\xea\xdc\x92\xd5\xfd\x5b\xce\x60\x06\x9c\xa1\x62\x10\x77\x07\x95\xf7\xe0\x85\x55\x59\x76\xe7\xab\x2c\x83\xa7\x3f\x6d\x24\xba\x9e\x9a\x17\x44\x18\xf9\x3e\xcb\xf4\x68\x3c\xf7\xaa\x10\xb3\xb6\x76\x8d\x35\xbe\x28\xed\x49\xa6\x7d\xd6\xbc\xe8\x5f\x37\x45\x38\x67\x1e\x3e\x7a\xb6\xfc\x07\xf7\x0c\xf4\x54\xc2\x33\xe9\x1c\xfa\x9b\x56\x69\x08\x58\x57\xd4\xaa\x31\x62\x6b\x40\xb5\xf6\x07\x4e\xcc\x98\x3d\x0a\xa1\x4e\xc7\xa0\x23\xde\x7a\x0f\x60\x8c\xab\x0f\x68\x91\xb6\x9c\x09\xdd\x59\xdc\x1d\x3b\x34\x7c\x64\x11\x0f\x96\x8c\xe6\x19\x6a\x0f\x68\x2b\x37\x4e\xa0\x1e\x54\xbd\x78\xa3\xdd\x7b\xe4\x3d\xfc\xd4\xf1\xff\xe8\xb0\x2b\xab\x7c\x82\xd2\xd0\x69\x11\xab\x6f\x3c\xaf\xe0\x0d\x55\xde\xa4\x8b\xce\x14\x87\x8a\x1e\xb2\xb9\x3d\x57\xa3\xc6\xb2\x72\xc1\x9d\x02\xfc\xd9\x66\x93\x88\x9f\x60\x25\xdd\xf7\x53\x6b\x4a\x9a\x42\x4c\x82\x0b\x6e\xd8\x6c\x39\x1f\xdc\xe6\xb0\xc9\xb0\x26\x0a\x95\xb2\x77\xef\x9e\xc2\xf8\xab\xe7\x9e\xe6\xf5\xe4\x4e\xb5\xf8\xe5\x0e\x97\xd4\xc7\x2d\x3f\xb1\x28\x25\x87\x2d\x3b\xd9\xc8\x2c\xef\xad\xf5\xfa\x11\xae\xd2\x5a\xb1\x57\x2a\x5d\xea\xb2\x0d\xc2\x49\x9d\xed\x4f\x7b\x62\x8e\xbf\x5f\x59\x3f\x7f\x33\x19\xc0\xc7\xc8\x8d\x3b\x12\xfe\xb4\xea\x99\x9c\x7c\x97\xb6\x3f\xfb\xea\xdd\x53\xe9\xeb\x98\x3e\x8e\xaf\x34\xe5\x29\x67\xe0\xb0\x5e\xd0\xc2\x64\xfe\xae\xac\x24\x76\xdd\xd6\x9c\x01\x77\x8b\x41\xfc\x0e\x51\x7f\x7d\xd1\xa4\x83\x03\x3d\xf0\x67\x95\x8b\x71\x62\x58\x74\x5d\xbe\x3e\xe6\x90\xdf\x61\x9f\x5f\x60\x7b\x62\xac\xcb\x4c\xd3\x13\x6d\xad\xf3\x58\x42\x8b\x8d\xdb\x91\x6c\xa4\x69\x17\xd6\x60\xea\x2a\xb7\x6a\x1a\xe0\x19\x04\x48\x4b\x2a\xf4\x22\x39\xd1\x28\xdf\xce\x98\xbf\xe4\x95\xe2\xe7\xfa\x39\x5e\x41\x3d\x5a\x6b\xfd\x5c\xdd\x32\xd6\x51\xc2\xb8\x72\x1c\xe0\xf5\xb9\x27\xbf\xd1\x82\x61\xe7\x9d\x00\xa3\x3b\xae\xa3\x57\x1f\xa2\xfa\x9b\x9e\x54\x3c\x81\x97\x41\x53\x6a\x61\xe2\x36\xbe\x16\x6e\x00\xb4\x21\x6d\x13\x9e\xf6\xa2\x25\x8b\x52\xbe\x73\xc4\x7e\x54\x69\xfc\x5d\x39\xa8\x20\x5e\xd1\xf6\xa9\xfd\x5e\x3b\x4f\x20\x03\x0f\x2c\x9a\xef\x0c\x9e\xac\x1d\x69\xb3\xce\xa3\xdf\x48\x6e\x3f\xfd\xd1\x77\xe5\x8e\xb8\xa6\x63\x69\x42\x11\x78\x0d\xcb\xd4\xc0\xa6\x30\xe5\x2f\x76\x0d\xf4\x51\x8f\x05\x64\x8f\x69\xe3\x6d\xa5\xe7\xab\x2a\x47\x6a\x39\x71\xd8\xb0\xd7\xd7\x2e\x94\x59\xa4\xff\x7c\xaf\x33\xc9\xb5\x72\x70\xcd\x8a\x05\xfa\x20\xe7\x48\x6d\x6c\x57\xfe\x5e\x1a\x65\x32\x90\x67\x5d\x75\x20\x62\x83\xe8\xc4\x55\x33\xbc\x80\xe3\x7a\xc5\x2f\x5c\xc1\x13\xd6\xb3\x97\x3b\x26\x3a\x05\xe3\x2a\x37\x69\x62\x91\xba\xdd\x66\x81\x4d\x81\xc8\x8e\x6f\x13\x62\x75\x55\xf3\x84\x7d\xce\xf3\xdd\xeb\xc8\x1d\x00\x7e\x4d\xf5\x3e\x54\x69\x25\x2c\x63\xd5\x29\xd7\x32\x6b\xe3\xa2\x6f\xc3\xd3\xe0\x35\x43\xf2\xf8\x60\x36\x32\xc7\xe4\x91\xe6\x58\x72\xed\xe1\xfa\x15\x0d\xcc\x4b\x7a\x61\x9d\x94\x7b\x17\x36\xed\x12\x55\x31\x7a\x04\xbb\x13\x47\xd7\x17\x1a\xde\xd1\x04\x7b\x09\xeb\x5b\xb6\xe0\xad\x27\x5a\xdb\xae\x7d\x13\xbf\xbc\xe6\x96\xef\xef\xf1\x29\x15\x5d\x29\xa6\xc2\x06\x9b\xf6\x4d\xe5\x92\x2b\x23\xdb\x1b\xbd\x4c\x06\x58\x2e\x87\x56\xf7\xef\x7a\xc0\x56\x37\xe4\xf4\x6c\xa9\x98\x78\x55\x14\xbe\x33\xee\xf8\xc2\x14\x48\x71\xba\xc8\x17\x65\x68\xea\x55\x6c\xea\xf4\x47\xbb\xce\x6d\x81\x74\x9f\xba\xa6\xd0\xf1\xfe\xd2\xf2\x5b\x8f\x91\x9a\xa4\x01\x61\xf9\xf0\x02\x97\xef\x7e\xdb\xee\x72\xa5\xf8\x17\x2e\x99\x07\xa3\x06\x16\x6b\xb3\xc6\x75\x45\xc6\x48\x9d\x11\x31\x4e\xe7\xb4\x9c\xe5\x92\x5f\x31\x61\x89\x88\x8c\x5d\xf0\x92\x7a\x65\x2a\xc8\xd7\xdb\xc4\x63\x4e\xd9\x76\x03\x6d\xa4\xd3\x79\xe0\x5c\x9d\xc9\xc5\x56\xc6\x1d\x0d\x63\x92\xa3\x8b\x7d\x52\x3b\x94\x5a\xca\x0a\xb6\xeb\x48\x88\x57\x11\x85\x3b\xad\xf7\x57\x14\x85\x4c\xca\x0f\x1a\xfa\x61\x43\x04\x03\x8f\x0d\x1a\xe2\x8e\x4a\xb6\xfe\x72\x77\xd1\xa1\x95\xe5\xa6\x07\x7d\x31\x62\x5a\x6e\xa9\x71\x62\xcd\x29\x05\xda\xad\xc7\xb6\xc9\xb9\xe5\xee\x75\x24\xb1\xc2\xef\x04\xd2\xa1\x42\xcd\xae\x5b\x4f\xc2\xc5\xd3\x6b\x52\x1d\x36\x07\x44\x90\xc0\x3f\x1d\xf6\xd8\x87\x3a\x88\xb0\x83\xbd\x31\xda\x3b\x39\xd5\x30\xcc\x2f\x1c\x74\x83\x07\xea\xdb\x3e\x42\xf7\xb2\x0d\xff\x09\xd6\x18\xe1\xde\x22\x4d\x86\x34\xba\x8b\x42\xab\x77\x96\xa8\x99\x75\xa7\x99\x57\xb7\x14\xf1\xa3\xd4\x4e\x97\x81\xae\x28\x4a\xed\xe8\x89\x71\x5b\x60\x84\x6c\xa3\x55\xbe\xd1\x38\xb2\x86\x34\x8e\x5d\xc6\x16\x6a\x36\x32\x15\xb1\x0a\xa1\xdb\x7b\xab\x25\xc1\xff\x43\xbd\xee\x20\x45\x73\x94\xbd\x71\x70\x3c\xec\xc3\x5a\xee\x95\x50\x11\x5d\xb7\x69\xac\xe3\x37\x9c\x93\x2a\x68\xf5\xbb\x8f\xef\xf7\x94\x5c\xac\xeb\x6e\x7c\xc0\x5e\xf3\xd7\x78\x73\xf3\x7d\xaf\xc6\xcb\x8f\xf2\xee\xdf\xfe\x93\xe9\xf6\xbb\x7d\x85\xb8\xdf\x8b\x2b\xde\xc3\xd9\x87\x19\x93\x7c\xb8\xa8\x2a\xcd\xf3\xe1\x16\x0c\x6b\x6e\x30\xde\x68\x96\xbc\x97\xcf\xdf\xed\x61\xd5\xb2\xf1\x8f\xd7\x7b\x0a\x6e\xef\xdf\xf1\x68\x48\x77\x7b\xf1\xe2\x6a\x03\x0d\xa9\x39\xb4\xf6\x0e\x6f\x62\xd8\xce\x03\x96\xdd\x28\x7b\x71\xf9\xf5\xbb\xee\xc1\x52\xb2\xd9\xf9\xb2\x65\x97\x87\x45\x25\xcd\x7f\xf1\x5e\x8c\xf7\x65\x4f\xdf\xff\xbf\x00\x00\x00\xff\xff\x80\x7c\xbd\x56\x5a\x0c\x00\x00")

func sourcedataThumbsThumb2ThumbJpgBytes() ([]byte, error) {
	return bindataRead(
		_sourcedataThumbsThumb2ThumbJpg,
		"sourcedata/thumbs/thumb-2/thumb.jpg",
	)
}

func sourcedataThumbsThumb2ThumbJpg() (*asset, error) {
	bytes, err := sourcedataThumbsThumb2ThumbJpgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sourcedata/thumbs/thumb-2/thumb.jpg", size: 3162, mode: os.FileMode(420), modTime: time.Unix(1714893639, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sourcedata/thumbs/thumb-2/thumb.jpg": sourcedataThumbsThumb2ThumbJpg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sourcedata": &bintree{nil, map[string]*bintree{
		"thumbs": &bintree{nil, map[string]*bintree{
			"thumb-2": &bintree{nil, map[string]*bintree{
				"thumb.jpg": &bintree{sourcedataThumbsThumb2ThumbJpg, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
